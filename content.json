{"meta":{"title":"蔓舞寻樱的博客","subtitle":"みんなで実现の物语 - μ's","description":"blog hexo","author":"hiroya","url":"https://www.yuyanlab.com"},"pages":[{"title":"Link","date":"un66fin66","updated":"un00fin00","comments":true,"path":"Link/index.html","permalink":"https://www.yuyanlab.com/Link/index.html","excerpt":"","text":"感谢有你如果没有可能是换链接太久失踪了，或者挂了。快来留言哇~ 玟茵开源社区 Takanashirin (SSL ON) Arondight 灰灰的博客 (SSL ON) Jclmiku’s Blog (SSL ON) shy泠的博客 (SSL ON) 響き喵~ (SSL ON) AD’s Blog (SSL ON) 0xBBC (SSL ON) 夜雨初霁 (SSL ON) 蚊子 (SSL ON) ProfessorJohnny (SSL ON) 枯龙吟的博客 (SSL ON) Tsez’s Blog (SSL ON) Corps Said (SSL ON) 白泠酱 (SSL ON) 0page 田飞雨 sonico Afox 静静 (SSL ON) NGLYF2011 儒沫杂记 小付 coolrc (SSL ON) Dsus4’s (SSL ON) 张大侠 夏至 ZFirst’s Blog (SSL ON) Ghost (SSL ON) Yanhao’s blog 本子桐"},{"title":"about","date":"un66fin66","updated":"un00fin00","comments":true,"path":"about/index.html","permalink":"https://www.yuyanlab.com/about/index.html","excerpt":"","text":"关于“毓彦的博客”小站初创于2015年4月3日，至今已经两年多啦 主要记录一下博主不务正业的计算机折腾过程，还有一些博主的碎碎念 在此之前经历过两个域名，用过其他的的blog程序，现在呢，就用hexo来生成文章啦，样式呢当然还是会改动啦 推荐浏览器 Edge12+,Chrome 44+,Firefox 54+。 通过Atom订阅/atom.xml (不一定完整) 使用hexo生成器，bulma前端，使用React构建。 博客遵循、采用“署名-非商业性使用-相同方式共享 4.0 国际协议” 关于博主“毓彦”毓彦现在呢在武汉的一所不起眼的大学里读大二。虽然读的是计算机，但是水平依然很差呢。平时喜欢折腾些小玩意儿，用框架写点东西或者造轮子。经常和动漫社的小伙伴在一起玩耍ヽ(ﾟ∀ﾟ)ﾒ(ﾟ∀ﾟ)ﾉ。 企鹅 1572608434 一些没有用的链接： PGP: 0X31261D50279C2AD0 邮箱： sakura#alleysakura.com Github：YuYanDev Twitter : YuYanDev"}],"posts":[{"title":"使用React，GithubAPI，Hexo，Travis-CI构建一个属于自己的博客","slug":"react-hexo-blog","date":"un33fin33","updated":"un00fin00","comments":true,"path":"post/react-hexo-blog/","link":"","permalink":"https://www.yuyanlab.com/post/react-hexo-blog/","excerpt":"的确现在的博客就是基于这个思路打造的。纯粹的restful+单页应用的风格。 首先的Hexo部分，hexo本来是通过生成一个个目录的然后加入index.html实现的文章路径，得益于“hexo-generator-json-content”这个插件，它可以把所有文章信息，构造为一个json。这个json后面上传到github上便成为了最主要的api。 至于原来的目录，出于seo优化的需要，我们在page.ejs等模板上做一个重定向/post/postname -&gt;/#!/post/postname Travis-CI方面，主要是根据GihubAPI的特点，满足我们懒人的需要，只需要朝gitpage的一个分支上上传markdown，Travis-CI就会给我们自动部署发布到主分支上。我们hexo生成上传的东西也需要做些优化，毕竟，我们要的只是那个content.json和其他一些东西。 Github方面，不说了，就提供文件储存还有API。 关于React，接下来继续说","text":"的确现在的博客就是基于这个思路打造的。纯粹的restful+单页应用的风格。 首先的Hexo部分，hexo本来是通过生成一个个目录的然后加入index.html实现的文章路径，得益于“hexo-generator-json-content”这个插件，它可以把所有文章信息，构造为一个json。这个json后面上传到github上便成为了最主要的api。 至于原来的目录，出于seo优化的需要，我们在page.ejs等模板上做一个重定向/post/postname -&gt;/#!/post/postname Travis-CI方面，主要是根据GihubAPI的特点，满足我们懒人的需要，只需要朝gitpage的一个分支上上传markdown，Travis-CI就会给我们自动部署发布到主分支上。我们hexo生成上传的东西也需要做些优化，毕竟，我们要的只是那个content.json和其他一些东西。 Github方面，不说了，就提供文件储存还有API。 关于React，接下来继续说 React的路由，我规划了如下路由 /article/:Id我们不可能把所有文章和他们的节选全部放一个页面里，这样访问体验极差。所以我们需要个文章列表分页功能。 /post/:post文章内容 /page/:staticPage一些关于，友情链接等等的页面 /首页就直接跳转至/article/1 样式你可以选择各种各样的前端框架，不过请注意不要选择是使用jQuery操作DOM的框架。 article页面由于React-Router4的传值操作体验极差，所以博主并没有使用它提供的api，而是使用了原生的方式来获取id值（PS：在web开发上博主非常建议使用React-Router2，RN可能还是4比较好）在提取到id值后，我们统计一下文章数，并计算出5文章一页需要多少页面可以把文章塞完。然后将content.json遍历一遍，曲线救国按顺序再构造出当页的结构。最后存入state给render渲染 post和staticPage理由同上，原生获取id，然后发起fetch请求抓取github的api，获得json和content数据，github的markdown比较特殊，进行了非标准的base64加密，我们需要多次转码，并使用正则替代来同时兼容hexo能读取的markdown1234567891011121314151617function utf8_to_b64(str) &#123; return window.btoa(unescape(encodeURIComponent(str)));&#125;function b64_to_utf8(str) &#123; return decodeURIComponent(escape(window.atob(str)));&#125;async function fetchAsyncPostMarkdown () &#123; let response = await fetch(`https://api.github.com/repos/$&#123;GITHUBNAME&#125;/$&#123;GITHUBREPO&#125;/contents/source/_posts/$&#123;path&#125;.md?ref=master`); let data = await response.json(); return data;&#125;fetchAsyncPostMarkdown().then(data =&gt; &#123; var Content = marked(b64_to_utf8(utf8_to_b64(b64_to_utf8(data.content))).replace(/---\\ntitle:/g,'### ').replace(/date:/g,'\\n##### ')) ;&#125;).catch(reason =&gt; console.log(reason.message)) 其他的也就加了些工具库。 感受就是，状态数据管理很重要，好好看文档orz","categories":[],"tags":[]},{"title":"好久没有写博客了，来叙叙最近吧","slug":"newblog","date":"un33fin33","updated":"un00fin00","comments":true,"path":"post/newblog/","link":"","permalink":"https://www.yuyanlab.com/post/newblog/","excerpt":"最近踩了很多坑，然后用React 15，通过travis-ci来hexo生成一些json，结合github的api一起造了这个博客。踩了很多的坑。以后慢慢在博客中叙述叙述记叙出来吧。 大学生活也是一言难尽，总之，我回来了","text":"最近踩了很多坑，然后用React 15，通过travis-ci来hexo生成一些json，结合github的api一起造了这个博客。踩了很多的坑。以后慢慢在博客中叙述叙述记叙出来吧。 大学生活也是一言难尽，总之，我回来了","categories":[],"tags":[]},{"title":"Nginx+FCGI编译安装+TCL/C++/shell的学习/安装调教","slug":"fcgi","date":"un66fin66","updated":"un00fin00","comments":true,"path":"post/fcgi/","link":"","permalink":"https://www.yuyanlab.com/post/fcgi/","excerpt":"FCGI虽然是上个世纪的东西，但是缺了还真不行。在FCGI的编译安装方面Google都无法找到相关笔记文档。在经历了一下午的折磨后，才安装上了。我觉得应该写成笔记，帮助更多人少走弯路。 FCGI存在与epel和Ubuntu等源里，因此，大多数设备都能无痛安装。 但由于我的是CentOS armv7版的操作系统，不可能使用epel源，由于FCGI缺乏维护，所以在编译过程中，走了很多弯路。 nginx的安装查看我的上一篇博客的nginx安装部分即可。 首先我们来搞清楚一下，CGI相关的原理，如何编写相关脚本，以及使用这套组合的意义。","text":"FCGI虽然是上个世纪的东西，但是缺了还真不行。在FCGI的编译安装方面Google都无法找到相关笔记文档。在经历了一下午的折磨后，才安装上了。我觉得应该写成笔记，帮助更多人少走弯路。 FCGI存在与epel和Ubuntu等源里，因此，大多数设备都能无痛安装。 但由于我的是CentOS armv7版的操作系统，不可能使用epel源，由于FCGI缺乏维护，所以在编译过程中，走了很多弯路。 nginx的安装查看我的上一篇博客的nginx安装部分即可。 首先我们来搞清楚一下，CGI相关的原理，如何编写相关脚本，以及使用这套组合的意义。 CGI通用网关接口（Common Gateway Interface/CGI）是一种重要的互联网技术，可以让一个客户端，从网页浏览器向执行在网络服务器上的程序请求数据。CGI描述了服务器和请求处理程序之间传输数据的一种标准。CGI 独立于任何语言的，CGI 程序可以用任何脚本语言或者是完全独立编程语言实现，只要这个语言可以在这个系统上运行。（Wikipedia）所以理论上，任何可以使用终端命令行运行的程序都能通过一定改动来支援cgi。 我们很少看到直接的cgi，那是因为更多的web服务器软件都使用了一种更先进的cgi技术-FastCGI。注意，这里是FastCGI只是作为一个扩展依赖，相当于开放了接口，是一种被动型的，并不能直接操纵。另外安装时需要加上参数编译进去。 安装FCGI快速通用网关接口（Fast Common Gateway Interface／FastCGI）是通用网关接口（CGI）的改进，描述了客户端和服务器程序之间传输数据的一种标准。FastCGI致力于减少Web服务器与CGI程式之间互动的开销，从而使服务器可以同时处理更多的Web请求。与为每个请求创建一个新的进程不同，FastCGI使用持续的进程来处理一连串的请求（Wikipedia） 请注意，这里的FCGI不同于perl-fcgi，php-cgi，这是一套完整的fcgi能够支援各种语言的FCGI及其cgi开发工具库。其对应的epel名称为fcgi-devel。 由于FCGI已经倒闭，所以你从各种博客上找到的教程叫你去官网下是不可能的。 但是，github上有份镜像下来的fastcgi官网镜像，尽管里面的源代码非常混乱，编译各种warning，但是好歹有了。这个一个是方便我们编写c/cpp的cgi程序，另外一个fcgiwrap也是依赖这个工具库的1234yum install autoconf automake libtoolwget https://github.com/FastCGI-Archives/FastCGI.com/raw/master/original_snapshot/fcgi-2.4.1-SNAP-0910052249.tar.gztar xvfz fcgi-2.4.1-SNAP-0910052249.tar.gzcd fcgi-2.4.1-SNAP-0910052249 然后你需要修改./include/fcgio.h，在里面加入#include &lt;cstdio&gt;，这里是源代码的相关bug 123./configure --prefix=/usr/local/fcgimakemake install 下面的内容非常重要，一定要软链头文件和动态库。博主就是坑在这里，一直去调ldconfig，发现不能正确启用1234ln -s /usr/local/fcgi/lib/libfcgi.so.0 /usr/lib/ln -s /usr/local/fcgi/lib/libfcgi.so /usr/lib/ln -s /usr/local/fcgi/lib/libfcgi.so.0.0.0 /usr/lib/ln -s /usr/local/fcgi/include/*.h /usr/include/ 如果你需要c++相关的编译，也需要连接libfcgi++.so相关。 安装FCGI相关扩展为了能支持大部分脚本，我们需要安装fcgiwrap这个库。这个库安装依赖上面的FCGI开发套件1234567git clone https://github.com/gnosek/fcgiwrap.gitcd fcgiwrapautoreconf -i./configuremakemake installln -s fcgiwrap /usr/local/bin/ 为了方便 操纵fcgiwrap，我们建立fcgiwrap的管理启动脚本nano /etc/init.d/fcgiwrap1234567891011121314151617181920212223242526272829#!/usr/bin/perluse strict;use warnings FATAL =&gt; qw( all );use IO::Socket::UNIX;my $bin_path = '/usr/local/bin/fcgiwrap';my $socket_path = $ARGV[0] || '/tmp/cgi.sock';my $num_children = $ARGV[1] || 1;close STDIN;unlink $socket_path;my $socket = IO::Socket::UNIX-&gt;new( Local =&gt; $socket_path, Listen =&gt; 100,);die \"Cannot create socket at $socket_path: $!\\n\" unless $socket;for (1 .. $num_children) &#123; my $pid = fork; die \"Cannot fork: $!\" unless defined $pid; next if $pid; exec $bin_path; die \"Failed to exec $bin_path: $!\\n\";&#125; 安装FCGI管理器在之前我们说了，nginx等软件知识被动接受FastCGI接口，所以，我们需要spawn-fcgi这个进程管理器123456wget http://download.lighttpd.net/spawn-fcgi/releases-1.6.x/spawn-fcgi-1.6.4.tar.gztar -zxvf spawn-fcgi-1.6.4.tar.gzcd spawn-fcgi-1.6.4./configuremakemake install 执行spawn-fcgi --help验证安装情况，具体如何用过会儿再讲。 CGI程序的编写，这里有几个不同语言的示例。建议创建/var/www/cgi/cgi-bin目录，把写好的cgi脚本都放里面。另外赋予相关权限chown -R nginx:nginx /var/www/cgi-bin tcl语言Tcl（发音tickle）是一种脚本语言。由John Ousterhout创建。TCL经常被用于快速原型开发 RAD、脚本编程、GUI编程和测试等方面。（Wikipedia） 这是测试的最好一种语言了，我们创建test-tcl.cgi12345#!/usr/bin/tclshputs \"Content-type: text/html\"puts \"\"puts \"This is a tcl cgi test script\" bash脚本我们创建test-bash.cgi12345678910#!/bin/bashecho -e \"Content-type: text/html\\n\\n\";echo \"&lt;html&gt;\"echo \"&lt;title&gt;\"echo -e \"cgi test\\n\"echo \"&lt;/title&gt;\"echo \"&lt;body&gt;\"echo -e \"&lt;p&gt; This is a bash cgi test script&lt;/p&gt;\"echo \"&lt;/body&gt;\"echo \"&lt;/html&gt;\" c语言我们创建 test-c.cpp123456789101112131415#include &lt;fcgi_stdio.h&gt;#include &lt;stdlib.h&gt;int main(void)&#123; int count = 0; while (FCGI_Accept() &gt;= 0) printf(\"Content-type: text/html\\r\\n\" \"\\r\\n\" \"&lt;title&gt;FastCGI Hello!&lt;/title&gt;\" \"&lt;h1&gt;FastCGI Hello!&lt;/h1&gt;\" \"Request number %d running on host &lt;i&gt;%s&lt;/i&gt;\\n\", ++count, getenv(\"SERVER_NAME\")); return 0;&#125; 然后g++ test-c.cpp -o test-c.cgi –lfcgi来编译你的c语言的cgi程序。 perl语言测试我们创建 test-perl.cgi12345#!/usr/bin/perlprint \"Content-type: text/html\\n\\n\";print \"&lt;html&gt;&lt;head&gt;&lt;title&gt;cgi test&lt;/title&gt;&lt;/head&gt;\\n\";print \"&lt;body&gt;&lt;p&gt;This is a bash cgi test script&lt;p&gt;&lt;/body&gt;&lt;/html&gt;\\n\"; 启动cgi工具以及nginx相关配置使用spawn-fcgi来启动fcgiwrap。当然，你也可以使用spawn-fcgi单独启动一个可执行的cgi程序1234#cgi交给fcgiwrap托管spawn-fcgi -f /usr/local/sbin/fcgiwrap -p 5000#单独启动单个cgi程序spawn-fcgi -a 127.0.0.1 -p 5000 -f /var/www/cgi/cgi-bin/test-c.cgi 在nginx的配置 比如，匹配所有cgi后缀123456location ~ .*\\.cgi$ &#123; root /var/www/cgi/; fastcgi_pass 127.0.0.1:5000; fastcgi_index index.cgi; include fastcgi.conf;&#125; 又比如，cgi-bin文件夹交个cgi处理123456location /cgi-bin/ &#123; root /var/www/cgi/; fastcgi_pass 127.0.0.1:5000; fastcgi_index index.cgi; include fastcgi.conf;&#125; 这个样更适用于c和cpp编写的cgi应用 为什么使用这套组合。首先，这次实验的设备是armv7单片机，所以才会编译得吐血。尽管FastCGI开销不小，但是在单片机这样的使用的场景下，效率绝对是比nginx+mysql/sqlite+php/node.js的效率要高很多的，特别是我们使用bash或者c语言来作为cgi相应的话，效率非常高。另外，我们如果操作GPIO针脚，使用c语言，无论是易用性还是效率性能都要大大高于python的。 但是，本套配置文件在cgi响应请求方面还是有些问题，估计是nginx配置的锅，我也会继续折腾研究的","categories":[],"tags":[]},{"title":"Kali在树莓派上的调教笔记","slug":"Kali-raspberry","date":"un00fin00","updated":"un00fin00","comments":true,"path":"post/Kali-raspberry/","link":"","permalink":"https://www.yuyanlab.com/post/Kali-raspberry/","excerpt":"一个偶然的时刻，我发现某个地方的IP是开放80和443端口的，那如果不好好利用一下简直太可惜了。当然，人家可是良民，当然会遵守国家的法律法规啦，那废话就不多说了。 小插曲：好久不用raspbian了，刷好镜像通电后才知道raspbian已经在一年前就已经默认关闭了ssh，没ssh那玩个鬼。 索性放弃raspbian，那么目前有Ubuntu Mate，Kali OS，Arch Linux三个系统供我选择，Ubuntu Mate也是需要通过显示器设定，故放弃；Arch Linux arm安装需要用到linux的机子；所以选择了Kali OS。","text":"一个偶然的时刻，我发现某个地方的IP是开放80和443端口的，那如果不好好利用一下简直太可惜了。当然，人家可是良民，当然会遵守国家的法律法规啦，那废话就不多说了。 小插曲：好久不用raspbian了，刷好镜像通电后才知道raspbian已经在一年前就已经默认关闭了ssh，没ssh那玩个鬼。 索性放弃raspbian，那么目前有Ubuntu Mate，Kali OS，Arch Linux三个系统供我选择，Ubuntu Mate也是需要通过显示器设定，故放弃；Arch Linux arm安装需要用到linux的机子；所以选择了Kali OS。这是Kali的安装指导页面https://docs.kali.org/introduction/download-official-kali-linux-images里面包括了自定义构建镜像的方法和已构建好的镜像的下载链接。也可以直接从这个页面寻获下载链接https://www.offensive-security.com/kali-linux-arm-images/ 接下啦是刻录的方式，我的本子是OS X的系统，所以我写的是该系统的烧录方式 下载 123wget https://images.offensive-security.com/arm-images/kali-2017.01-rpi2.img.xzunxz kali-2017.01-rpi2.img.xzmv kali-2017.01-rpi2.img ~/ 打开OS X的自带的磁盘工具，将tf卡格式化成MS-DOS(FAT)格式的。 用df -h命令找到你的tf卡的挂在地址. 假设我的是/dev/disk2s1，就执行diskutil unmount /dev/disk2s1，以此类推。 执行diskutil list来找到tf卡，假设我返回来的是/dev/disk2 使用dd命令来刻录sudo dd bs=4m if=kali-2017.01-rpi2.img of=/dev/rdisk2，注意of后指向的disk要加上r。刻录时间稍长，多等等。最后会打印record和transferred信息的。 最后diskutil unmountDisk /dev/disk2来推出设备，就可以插上树莓派了。 这时，把树莓派接上网线。登入你的路由器控制面板。有以下几件事需要做 打开客户端列表，查看主机名为kali设备的内网IP地址和MAC地址 打开保留列表，将记录下来的内网IP和MAC地址绑定 打开端口转发列表，将80和443或者其他端口转发至内网IP，协议默认即可，也可指定。 如果路由器自带ddns服务的话，也可以设定。 好了，这个时候，我们可以登入Kali了，官方打包的系统，默认使用root用户。密码toor。登入后修改密码。 第一步先换源，树莓派版本的Kali是基于kali-rolling构建的，所以我们在修改软件源时要务必注意和检查比如清华tuna源，在https://mirrors.tuna.tsinghua.edu.cn/kali/dists/里有kali-rolling所以理论上是可以用这个源的（当然的确是可以用的）编辑镜像源列表nano /etc/apt/sources.list12345deb http://mirrors.tuna.tsinghua.edu.cn/kali kali-rolling main non-free contribdeb-src http://mirrors.tuna.tsinghua.edu.cn/kali kali-rolling main non-free contribdeb http://http.kali.org/kali kali-rolling main non-free contribdeb-src http://http.kali.org/kali kali-rolling main non-free contrib 刷新一下apt-get update 接下来是安装nginx的部分，由于对树莓派操纵数据库的阴影，(可以查看本博客最早的那些文章)所以不打算安装数据库，我不会写php，所以也没必要安装php。 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647apt-get install -y unzip curl build-essential make gcc libpcre3 libpcre3-dev libpcre++-dev zlib1g-dev libbz2-dev libxslt1-dev libxml2-dev libgd2-xpm-dev libgeoip-dev libgoogle-perftools-dev libperl-dev libssl-devwget https://www.openssl.org/source/openssl-1.0.2l.tar.gzwget http://nginx.org/download/nginx-1.12.0.tar.gztar -zxvf openssl-1.0.2l.tar.gztar -zxvf nginx-1.12.0.tar.gzcd nginx-1.12.0./configure \\--prefix=/etc/nginx \\--sbin-path=/usr/sbin/nginx \\--conf-path=/etc/nginx/nginx.conf \\--error-log-path=/var/log/nginx/error.log \\--http-log-path=/var/log/nginx/access.log \\--pid-path=/var/run/nginx.pid \\--lock-path=/var/run/nginx.lock \\--http-client-body-temp-path=/var/cache/nginx/client_temp \\--http-proxy-temp-path=/var/cache/nginx/proxy_temp \\--http-fastcgi-temp-path=/var/cache/nginx/fastcgi_temp \\--http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp \\--http-scgi-temp-path=/var/cache/nginx/scgi_temp \\--user=nginx \\--group=nginx \\--with-openssl=../openssl-1.0.2l \\--with-http_ssl_module \\--with-http_realip_module \\--with-http_addition_module \\--with-http_sub_module \\--with-http_dav_module \\--with-http_flv_module \\--with-http_mp4_module \\--with-http_gunzip_module \\--with-http_gzip_static_module \\--with-http_random_index_module \\--with-http_secure_link_module \\--with-http_stub_status_module \\--with-http_auth_request_module \\--with-file-aio \\--with-http_v2_module \\--with-threads \\--with-stream \\--with-stream_ssl_module \\--with-http_slice_modulemake &amp;&amp; make installuseradd -r nginxmkdir /var/cache/nginxtouch /var/cache/nginx/client_temp 这时我们再创建一个systemctl启动脚本nano /lib/systemd/system/nginx.service123456789101112131415[Unit]Description=The NGINX HTTP and reverse proxy serverAfter=syslog.target network.target remote-fs.target nss-lookup.target[Service]Type=forkingPIDFile=/var/run/nginx.pidExecStartPre=/usr/sbin/nginx -tExecStart=/usr/sbin/nginxExecReload=/bin/kill -s HUP $MAINPIDExecStop=/bin/kill -s QUIT $MAINPIDPrivateTmp=true[Install]WantedBy=multi-user.target 就可以启动systemctl start nginx 接下来，我们去/etc/nginx里编辑脚本就可以啦,博客之前的文章也有。node还没有装，不过后续可能会更新吧。","categories":[],"tags":[]},{"title":"HBUT 2nd ACM Contest","slug":"HBUT-2ACM","date":"un00fin00","updated":"un00fin00","comments":true,"path":"post/HBUT-2ACM/","link":"","permalink":"https://www.yuyanlab.com/post/HBUT-2ACM/","excerpt":"恩，菜鸡和大佬之间的差距不是一天两天能追上的，当然思路正确写不出来是不可原谅的。。。。。。总之，很丢人orz 虽然都是大部分是水题，但是还是把这部分分享出来吧w 拿自己的和标程对比，人家的就是写的就是清爽漂亮，哎。。。","text":"恩，菜鸡和大佬之间的差距不是一天两天能追上的，当然思路正确写不出来是不可原谅的。。。。。。总之，很丢人orz 虽然都是大部分是水题，但是还是把这部分分享出来吧w 拿自己的和标程对比，人家的就是写的就是清爽漂亮，哎。。。 Problem A:(1s/32768k) Lucyma(Lucy 的妈妈)最近很着急，因为Lucy不喜欢吃苹果，但俗话说“每天一苹果，医生远离我”，Lucyma很像让Lucy多吃一点苹果，那怎么办呢？于是Lucyma每天都会按照顺序把水果放到果盘里，如果果盘装满，Lucyma就会将最先放的水果拿出来，以不能浪费粮食的名义，让Lucy吃掉。现在Lucyma一共有n个水果，她想知道这种方法能让lucy最多吃掉几个苹果，你能告诉Lucyma么？ 输入描述：第一行是一个整数T，代表数据组数。(0&lt;T&lt;=20)每组输入有两行，第一行是两个整数n，m分别代表水果的个数和果盘的容量，用一个空格隔开(0&lt;n,m&lt;=100000)第二行是一串长度为n的字符串，都是小写字母，其中每个数字都代表一种水果，a代表苹果。 输出描述：对于每组数据，输出一行，一个整数m，代表lucy最多吃掉苹果的个数。 Sample Input1234523 5aab5 3abasd Sample Output1202 AC Code1234567891011121314151617181920212223242526272829303132#include &lt;iostream&gt;#include &lt;cstring&gt;#include &lt;cstdio&gt;#include &lt;algorithm&gt;#include &lt;cmath&gt;#include &lt;ctime&gt;using namespace std;const int maxn = 100005;char s[maxn];int main()&#123; int T; scanf(\"%d\",&amp;T); while(T--) &#123; int n,m; scanf(\"%d %d\",&amp;n,&amp;m); scanf(\"%s\",s); int num=0; if(m&gt;=n) printf(\"0\\n\"); else&#123; for(int i=0;i&lt;n;i++) &#123; if(s[i]=='a') num++; &#125; if(num&gt;=(n-m)) printf(\"%d\\n\",n-m); else printf(\"%d\\n\",num); &#125; &#125; return 0;&#125; Problem B:(1s/32768k) Lucy最近迷上了看奥运会，她对运动员不抛弃不放弃，以及追求更高，更快，更强的奥运会精神深深折服。Jason也是个奥运迷，有一天，lucy和jason讨论奥运会举办的时间，lucy认为奥运会是每四年举办一次，jason认为奥运会都是在闰年举办的。lucy知道jason的想法是错的，你能帮助lucy么？（第一界奥运会举办时间是在1896年） 输入描述：输入第一行是一个整数T，代表数据组数。(0&lt;T&lt;=20)每组第一行是一个N，代表年份(0&lt;n&lt;2017) 输出描述：每组输出两行，第一行输出是否为奥运会举办的年份，如果是，输出”YES”,否则输出”NO”。第二行输出是否为闰年，如果是，输出”YES”，否则输出”NO”； Sample Input1211900 Sample Output12YESNO AC Code1234567891011121314151617181920212223242526272829303132333435363738394041#include &lt;iostream&gt;#include &lt;cstring&gt;#include &lt;cstdio&gt;#include &lt;algorithm&gt;#include &lt;cmath&gt;#include &lt;ctime&gt;using namespace std;int ay(int n)&#123; if(n%4==0) return 1; else return 0;&#125;int yn(int n)&#123; if(n%100==0) &#123; if(n%400==0) return 1; else return 0; &#125; else &#123; if(n%4==0) return 1; else return 0; &#125;&#125;int main()&#123; int T; scanf(\"%d\",&amp;T); while(T--) &#123; int n; scanf(\"%d\",&amp;n); if(ay(n)&amp;&amp;n&gt;=1896) printf(\"YES\\n\"); else printf(\"NO\\n\"); if(yn(n)) printf(\"YES\\n\"); else printf(\"NO\\n\"); &#125; return 0;&#125; Problem C:(1s/32768k) Lucy和jason最近刚学了三角形的基本性质，lucy觉得自己学的比jason好，jason不服气了，想考一考lucy，看谁学得更好。于是jason捡来了很多小木棍，问其中能不能找到三根木棍可以组成一个三角形。其实偷偷告诉你lucy学得并不好，但是不能被jason发现了，你能编写个程序来帮lucy回答么？ 输入描述：第一行是一个整数T，代表数据数组。(0&lt;T&lt;=20)每组数据有两行，第一行数据是一个整数n，代表木棍的数量。第二行是n个整数，i代表每个木棍的长度。(3&lt;=n&lt;100,0&lt;i&lt;100000) 输出描述：对于每组数据，输出一行，如果有三根木棍可以组成一个三角形，输出”YES”,否则输出”NO”。 Sample Input1234567331 2 341 2 3 451 2 3 4 5 Sample Output123NOYESYES AC Code1234567891011121314151617181920212223242526272829303132333435#include &lt;iostream&gt;#include &lt;cstdio&gt;#include &lt;algorithm&gt;#include &lt;cstring&gt;#include &lt;cmath&gt;using namespace std;const int maxn = 105;int a[maxn];int main()&#123; int T; scanf(\"%d\",&amp;T); while(T--) &#123; memset(a,0,sizeof(a)); int n; scanf(\"%d\",&amp;n); for(int i=0;i&lt;n;i++) scanf(\"%d\",&amp;a[i]); sort(a,a+n); int flag=0; for(int i=0;i&lt;n;i++) for(int j=i+1;j&lt;n;j++)&#123; for(int k=j+1;k&lt;n;k++) &#123; if((a[i]+a[j])&lt;=a[k]) continue; if(a[i]&lt;=(a[k]-a[j])) continue; flag=1; &#125; &#125; if(flag) printf(\"YES\\n\"); else printf(\"NO\\n\"); &#125; return 0;&#125; Problem D:(1s/32768k) 一天，lucy和jason被传送到了一个从未捡到过的地方，她们唯一要做的事情就是努力活下去。她们惊喜的发现附近有许多可加工的食物。一共有n个食物，使用这些食物可以增加她们的饱和度Yi，但是令人心塞的是，每一种食物都有它相应的时间Xi。如果加工时间未达到，增加的饱食度与它可以增加的最大饱食度的比例和它的实际加工时间占需要加工时间的比例一致。例如 胡萝卜本来可以增加饱食度10，需要加工的时间为2，如果加工时间为1，就只能增加饱食度5了。而且她们的时间是宝贵的，只能有k时间用来加工食物，请问她们加工这些食物之后能增加的最大的饱食度是多少呢？ 输入描述：第一个数字为T，表示样例总数。(0&lt;T&lt;=100)每个样例的第一行输入为两个整数n和k。(0&lt;n&lt;=1000,0&lt;k&lt;=1000)每个样例第二行为n个整数，第i个数字表示第i种食物的加工时间Xi。(0&lt;Xi&lt;=100)每个样例的第三行为n个整数，第i个数字表示第i种食物可以增加的最大饱食度Yi(0&lt;Yi&lt;100) 输出描述：每个样例输出一个数字。每个数字占一行，表示lucy和jason最多能增加的饱食度，保留两位小数。 Sample Input123413 21 1 210 10 5 Sample Output120.00 AC Code12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;algorithm&gt;#include &lt;cstdlib&gt;#include &lt;ctime&gt;using namespace std;const int maxn = 1005;struct food&#123; int ti,d; food(int a,int b) &#123; ti = a; d = b; &#125; food()&#123;&#125;&#125;data[maxn];bool cmp(food a, food b)&#123; double x = (double)a.d/a.ti,y = (double)b.d/b.ti; return x &gt; y;&#125;int kase;void datamake()&#123; srand(time(0)); kase = 100; printf(\"%d\\n\",kase); while(kase--) &#123; int n = rand()%1000 + 1; int k = rand()%1000 + 1; printf(\"%d %d\\n\",n,k); for(int i = 0; i &lt; n ; i++) &#123; int casei = rand()%100+1; i == 0 ? printf(\"%d\",casei) : printf(\" %d\",casei); &#125; printf(\"\\n\"); for(int i = 0; i &lt; n ; i++) &#123; int casei = rand()%100+1; i == 0 ? printf(\"%d\",casei) : printf(\" %d\",casei); &#125; printf(\"\\n\"); &#125;&#125;int main()&#123; int n,k; scanf(\"%d\",&amp;kase); while(kase--) &#123; scanf(\"%d %d\",&amp;n,&amp;k); for(int i = 0; i &lt; n; i++) scanf(\"%d\",&amp;data[i].ti); for(int i = 0; i &lt; n ; i++) scanf(\"%d\",&amp;data[i].d); sort(data,data+n,cmp); double ans = 0; int use = 0; for(int i = 0; i &lt; n ; i++) &#123; if(use + data[i].ti &lt;= k) &#123; ans += data[i].d; use += data[i].ti; &#125; else &#123; if(use &lt; k) &#123; double x = (double)(k-use)/data[i].ti; ans += (double)x*data[i].d; use = k; &#125; &#125; &#125; printf(\"%.2f\\n\",ans); &#125; return 0;&#125; Problem E: (简直欺负我不玩阴阳师)(1s/32768k) 到五一假期的时候阴阳师又推出了这一活动，一张蓝色卡可以抽一次奖（每次用蓝色卡就会得到一点积分，满足10点积分额外送一张蓝色卡）抽奖是一个吸欧气的过程，每抽520次就能抽到一个ssr式神。ssr式神一共有10种，请问抽到相同ssr式神的概率有多少。 输入描述第一行是一个整数T，表示数据组数，(1&lt;=T&lt;=10000)每组输入一个整数n，表示初始蓝色卡个数。(0&lt;n&lt;=1000000000) 输出描述输出抽到相同式神的概率。（算得的结果小数点保留6位，概率的最大值为1） Sample Input12321232560 Sample Output120.0000000.697600 AC Code12345678910111213141516171819202122232425262728293031323334353637#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;algorithm&gt;using namespace std;double fact[13], cnt[13];void init()&#123; fact[0] = cnt[0] = 1.0; for(int i = 1; i &lt;= 10; i++)&#123; fact[i] = fact[i-1] * i; cnt[i] = cnt[i-1] * 10; &#125;&#125;int main()&#123; init(); int T; scanf(\"%d\", &amp;T); while(T--)&#123; int n; scanf(\"%d\", &amp;n); int left = 0, ans = 0; while(n)&#123; ans += n; left += n; n = left/10; left %= 10; &#125; ans /= 520; if(ans &gt; 10) printf(\"1.000000\\n\"); else if(ans == 10) printf(\"%.6lf\\n\", 1.0-fact[9]/cnt[9]); else printf(\"%.6lf\\n\", 1.0-fact[10]/fact[10-ans]/cnt[ans]); &#125; return 0;&#125; Problem F &amp;&amp; Problem G &amp;&amp; Problem H:略（看不懂）","categories":[],"tags":[]},{"title":"React与Express项目前后端一体化实战","slug":"react-express","date":"un44fin44","updated":"un00fin00","comments":true,"path":"post/react-express/","link":"","permalink":"https://www.yuyanlab.com/post/react-express/","excerpt":"在之前的造轮子的过程中，前后端分离开来写实在蛋疼，所以最近决定研究并折腾一下前后端工程一体化。 在这样的实时的环境中，最重要的是做好前后端之间的协调作用，说白了，也就是路径规划问题与热刷新问题。 在我的项目中，我选择开发和生产的环境的加载代码制作两份，只有模板，中间件什么的代码的通用。(网上推崇使用env变量来加载热更新组件，但是本人并不推崇全部使用env) 主要就是分析几项内容，除了工程的路径规划，一是开发代码(app.js)，二是生产代码(server.js)，最后还有模板引擎的调整","text":"在之前的造轮子的过程中，前后端分离开来写实在蛋疼，所以最近决定研究并折腾一下前后端工程一体化。 在这样的实时的环境中，最重要的是做好前后端之间的协调作用，说白了，也就是路径规划问题与热刷新问题。 在我的项目中，我选择开发和生产的环境的加载代码制作两份，只有模板，中间件什么的代码的通用。(网上推崇使用env变量来加载热更新组件，但是本人并不推崇全部使用env) 主要就是分析几项内容，除了工程的路径规划，一是开发代码(app.js)，二是生产代码(server.js)，最后还有模板引擎的调整 首先是路径规划问题，两个甚至更多工程的合并，我们必须得把路径规划好 举个栗子（窝的）我选择把express脚手架生成的大部分文件放到server文件夹里，外面只留启动文件（相信熟悉express的同学一眼就能看出），前端react的代码放置到client里。启动代码在bin里123456789101112131415161718.├── app.js├── bin│ ├── dev.js│ └── server.js├── client│ ├── index.js│ └── public├── node_modules├── package.json├── server│ ├── info│ ├── public│ ├── routes│ └── views├── server.js├── webpack.dev.config.js└── webpack.production.config.js 启动脚本12345\"scripts\": &#123; \"start\": \"cross-env NODE_ENV=production node ./bin/server.js\", \"dev\": \"cross-env NODE_ENV=dev node ./bin/dev.js\", \"bulid\": \"NODE_ENV=production webpack -p --config webpack.production.config.js\" &#125; 开发代码在开发中，我们需要调用webpackDevMiddleware和webpackHotMiddleware两套东西，当然，为了不发生找不到组件的尴尬情况，我们还是把大部分依赖装上吧,同样生产版本也需要用到一些组件。1npm install --save-dev chunk-manifest-webpack-plugin cross-env html-webpack-plugin webpack-chunk-hash webpack-dev-middleware webpack-dev-server webpack-hot-middleware webpack-manifest-plugin 在开发代码中，我们先使用cross-env设为dev，然后我们在开发版本的启动入口js里加入 注意 ：需要在app定义后就要引入 12345678910111213141516171819202122// 设置环境变量app.locals.env = process.env.NODE_ENV || 'dev';// 热加载功能导入var webpack = require('webpack'), webpackDevMiddleware = require('webpack-dev-middleware'), webpackHotMiddleware = require('webpack-hot-middleware'), webpackDevConfig = require('./webpack.dev.config.js'); // 你自己创建的适用于开发版本的webpack配置。具体写法之后会说明var compiler = webpack(webpackDevConfig);// 热加载功能挂载部分,里面的配置来自app.use(webpackDevMiddleware(compiler, &#123; // public path should be the same with webpack config publicPath: webpackDevConfig.output.publicPath, noInfo: true, stats: &#123; colors: true &#125;&#125;));app.use(webpackHotMiddleware(compiler)); 在最后module.exports前加入重启相关代码。1234var http = require('http');var reload = require('reload');var server = http.createServer(app);reload(server, app); 我很担心这会增加很多占用 这样，在express里的内容就完了,模板引擎的调整我们放到最后讲。 接下来我们讲讲webpack.dev.config.js开发配置的问题,直接贴23333333。 12345678910111213141516171819202122232425262728293031323334353637var webpack = require('webpack');var path = require('path');var node_modules_dir = path.resolve(__dirname, 'node_modules');var publicPath = 'http://127.0.0.1:3000/';var hotMiddlewareScript = 'webpack-hot-middleware/client?reload=true'; //加载热跟新中间件var config = &#123; entry: [ hotMiddlewareScript, './client/index.js'], //使用热更新功能 output: &#123; path: path.resolve(__dirname, './server/public/static/js/'), filename: 'bundle.js', publicPath: publicPath &#125;, module: &#123; loaders: [ &#123; test: /\\.js$/, exclude: /node_modules/, loader: 'babel-loader?presets[]=es2015&amp;presets[]=react' &#125;, &#123; test: /\\.css$/, exclude: /node_modules/, use: ['style-loader','css-loader' ] &#125; ] &#125;, /* 创建热更新热加载组件 */ plugins: [ // new webpack.optimize.OccurenceOrderPlugin(), //用webpack1.0版本时才需要 new webpack.HotModuleReplacementPlugin(), new webpack.NoEmitOnErrorsPlugin() ]&#125;;module.exports = config; 这时候，大部分已经完成了，如果你急着试试，可以看文章最后有关模板引擎的内容，就可以启动你的开发版本的app.js，功能都得到了保留，webpack打包信息和express的信息都会console出来。 生产代码生产代码的express入口不需要怎么改动，只需设置下环境变量即可1app.locals.env = process.env.NODE_ENV || 'production'; 重要的是webpack的配置文件，我在这里使用的是 webpack.production.config.js 在这里，最关键的一点是，如何把打包出来的带hash值的js的文件名传进后端模板中，这时我们需要webpack-manifest-plugin这个东西， 网上使用的很多推荐直接用inlineManifest去载入进ejs，但实际上非常不符合需求，webpack需要随时开启着，也不好用。直接贴代码 1234567891011121314151617181920212223242526272829303132333435var path = require('path');var webpack = require(\"webpack\");var node_modules_dir = path.resolve(__dirname, 'node_modules');var ManifestPlugin = require('webpack-manifest-plugin');var config = &#123; entry: &#123; main: path.resolve(__dirname, 'client/index.js') &#125;, output: &#123; path: path.resolve(__dirname, 'server/public/static/js'), filename: '[name].[chunkhash:16].js', &#125;, module: &#123; loaders: [ &#123; test: /\\.js$/, exclude: /node_modules/, loader: 'babel-loader?presets[]=es2015&amp;presets[]=react' &#125;, &#123; test: /\\.css$/, // Only .css files exclude: /node_modules/, use: ['style-loader','css-loader' ] &#125; ] &#125;, plugins:[ new ManifestPlugin(&#123; fileName: 'my-manifest.json' &#125;) ]&#125;;module.exports = config; 这里会在打包出的js同目录下生成一个json，记录了文件名。 所以这时候，我们就可以去express中间件里写功能去提取文件名，这里我遇到了非常大的坑，虽然解决了，但都不好意思说出来，然后呢，用了非常粗暴的方法… 123var mymanifest = require(\"../public/static/js/my-manifest\");var exportFileName = mymanifest[\"main.js\"];var filestring = '&lt;script src=\"/static/js/' + exportFileName + '\"&gt;&lt;/script&gt;' 中间件改造完成，可以直接render进模板了 模板部分简单粗暴orz12345&lt;% if (env !== \"production\" ) &#123; %&gt; &lt;script src=\"/bundle.js\"&gt;&lt;/script&gt;&lt;% &#125; else &#123; %&gt; &lt;%- jsfile %&gt; &lt;!-- jsfile是从render传过来的值“-”是为了防止被转译 --&gt;&lt;% &#125; %&gt; 这时候，run一下build，webpack打包出东西，再start，就是标准生产的服务状态 参考文章http://acgtofe.com/posts/2016/02/full-live-reload-for-express-with-webpackhttps://doc.webpack-china.org/guides/caching/","categories":[],"tags":[]},{"title":"一个非常好用的npm包管理工具npm-check","slug":"npm-check","date":"un00fin00","updated":"un00fin00","comments":true,"path":"post/npm-check/","link":"","permalink":"https://www.yuyanlab.com/post/npm-check/","excerpt":"很多做node.js开发的小伙伴呢都遇到这样一个问题：我全局安装的脚手架，如何升级。或者，我某个项目里，很多组件都大幅更新了，增加了很多好用的新特性，我该如何去升级我所想升级的组件呢。常规使用的npm update呢，又不是很好用。偶然发现了这个好用的工具，分享给大家。 首先安装 sudo npm install npm-check -g 然后，你就可以在该项目执行npm-check即可查看该项目下的依赖情况和新版的依赖情况，emoji表情意外萌呢~ 它还会检测你在工程里import进的依赖，没有用到的依赖还会提示你去移除它。提示非常丰富。 // 分割线，首页不放图o(////▽////)q","text":"很多做node.js开发的小伙伴呢都遇到这样一个问题：我全局安装的脚手架，如何升级。或者，我某个项目里，很多组件都大幅更新了，增加了很多好用的新特性，我该如何去升级我所想升级的组件呢。常规使用的npm update呢，又不是很好用。偶然发现了这个好用的工具，分享给大家。 首先安装 sudo npm install npm-check -g 然后，你就可以在该项目执行npm-check即可查看该项目下的依赖情况和新版的依赖情况，emoji表情意外萌呢~ 它还会检测你在工程里import进的依赖，没有用到的依赖还会提示你去移除它。提示非常丰富。 // 分割线，首页不放图o(////▽////)q 如需升级工程下的依赖的话，在工程目录下执行npm-check -u，即可检查出可以升级的组件，空格选择，回车开始升级 如果是升级诸如脚手架之类的全局组件，执行sudo npm-check -u -g，使用同理。 主要用法就这两个，其他用法使用npm-check --help查看即可。 恩，就酱紫~","categories":[],"tags":[]},{"title":"在墙内部署docker镜像的正确姿势","slug":"docker_cn","date":"un22fin22","updated":"un00fin00","comments":true,"path":"post/docker_cn/","link":"","permalink":"https://www.yuyanlab.com/post/docker_cn/","excerpt":"说换镜像什么的都是扯淡，根本无法好好使用。本文将会告诉你在墙内部署docker应用的正确姿势。 本文基于Ubuntu 16.04测试环境，大部分具有systemctl的系统都同样可行，适用于物理服务器和云服务器。如果你的环境是aliyun ecs请前往/etc/apt/source.list里把所有mirrors.aliyuncs.com的镜像注释掉！ 检查内核是否需要升级 uname -a查看，大于3.16即可。如果小于3.16，可以按照这篇教程换掉你的内核并提升你的服务器性能: https://emiria.io/post/TCP-BBR/ 接下来是具体步骤。","text":"说换镜像什么的都是扯淡，根本无法好好使用。本文将会告诉你在墙内部署docker应用的正确姿势。 本文基于Ubuntu 16.04测试环境，大部分具有systemctl的系统都同样可行，适用于物理服务器和云服务器。如果你的环境是aliyun ecs请前往/etc/apt/source.list里把所有mirrors.aliyuncs.com的镜像注释掉！ 检查内核是否需要升级 uname -a查看，大于3.16即可。如果小于3.16，可以按照这篇教程换掉你的内核并提升你的服务器性能: https://emiria.io/post/TCP-BBR/ 接下来是具体步骤。 首先 apt-get update 安装screen：apt-get install screen建立一个screen窗口：screen -S installDocker 然后，安装配置shadowsocks（没代理玩个鬼）123apt-get install pythonapt-get install python-pippip install shadowsocks 在Ubuntu1604上，可能安装ss会报错：locale.Error: unsupported locale setting输入export LC_ALL=C即可。 在方便的位置建立一个 ss.json并在里面根据实际情况填入12345678&#123; &quot;server&quot;: &quot;11.22.33.44&quot;, &quot;server_port&quot;: 40002, &quot;local_port&quot;: 1080, &quot;password&quot;: &quot;123123123&quot;, &quot;timeout&quot;: 600, &quot;method&quot;: &quot;aes-256-cfb&quot;&#125; 启动shadowssockssslocal -c ss.json -d startPS：如果机器重启后需要重新执行 我们需要一个工具来吧socks5代理转换为http代理&gt;&gt; polipo1apt-get install polipo 修改/etc/polipo/config12345678910logSyslog = truelogFile = /var/log/polipo/polipo.logproxyAddress = &quot;0.0.0.0&quot;socksParentProxy = &quot;127.0.0.1:1080&quot;socksProxyType = socks5chunkHighMark = 50331648objectHighMark = 16384serverMaxSlots = 64serverSlots = 16serverSlots1 = 32 重启polipo：/etc/init.d/polipo restart 配置代理12export http_proxy=&quot;http://127.0.0.1:8123/&quot;export https_proxy=&quot;http://127.0.0.1:8123/&quot; 注意：此方法只在当前tty下有效，重启或开启新的tty或者screen窗口后需要重新执行export配置，关闭unset http_proxy。你可以使用 curl myip.ipip.net命令来校验代理是否开启成功。 这时，你可以愉悦的在全局代理下安装docker了1wget -qO- https://get.docker.io/ | sh 关于docker的http代理以下docker代理的配置文件摘自docker官网，亲测可行 1mkdir -p /etc/systemd/system/docker.service.d 在/etc/systemd/system/docker.service.d/http-proxy.conf中写入12[Service]Environment=&quot;HTTP_PROXY=http://127.0.0.1:8123/&quot; 然后12systemctl daemon-reloadsystemctl restart docker 使用systemctl show --property=Environment docker来查看是否写入成功。 到此为止，应付大部分docker容器应该是够了！","categories":[],"tags":[]},{"title":"Dell R410服务器踩坑总结","slug":"DellR410-BIOS","date":"un55fin55","updated":"un00fin00","comments":true,"path":"post/DellR410-BIOS/","link":"","permalink":"https://www.yuyanlab.com/post/DellR410-BIOS/","excerpt":"翘了大学语文课去机房上架服务器被语文老师抓到，这种事情一定是终生难忘的（哭）。 好了，以下来介绍所踩的坑。 某202.xxx.xxx.xxx/28的ip是我们社团的服务器所使用，但由于年久失修，宕了只有一台了orz，于是fix的这个任务就落到了我的头上了orz。 由于是接手的，只留下了一个记录了密码和用户名什么的文档来，只能靠自己摸索，架构是多台Apache+php环境组成的集群和一台数据库服务器组成，具体配置无法测试（基本的命令都缺失，有必要全部重做系统了），内网带宽实测100mbps。但数据库服务器的raid早已坏掉，各种丢数据，唯一剩下来的一台也不敢动，于是，只能贡献出我自己的R410了。 R410的网卡是博通一种服务器网卡，很可惜Debian初始并不带网卡驱动，需要后续在没网的情况下手动安装，故舍弃Debian。Ubuntu 16.04.2 LTS在写入系统时又发生失败。centos才是最适合R410的系统orz。 R410集成了非常强大的BIOS和远控卡，然而正是强大，导致了使用不是很方便，个人非常不推荐使用UEFI引导，而且也非常不好用。在不小心按了F10进入了UEFI后，你将会经历漫长的等待，看着Initializing UEFI,Please wait...(&gt;=1hr)，而且极有可能加载失败。所以我们要做的就是，关闭电源，再开启电源，加载完BIOS后迅速按下Ctrl 和E键，进入菜单，进入System Services选项菜单里并把它关掉。保存退出，继续加载bios的过程中再去F11里选择u盘启动。 安装完centos后有个非常恶心的阅读协议，这个只能Good luck了。在实际上架服务器中，我们不可能使用DHCP协议获取ip，只能手动配置ip，在参考另外一台服务器的配置文件后顺利完成了ip的配置，其实图形化界面下的centos配置防火墙很容易23333333 PS：机房老师中途进来看到raid的配置和机器上4个盘位只插了一块盘有点想笑，我能怎么办，我也没钱买硬盘哇(╯‵□′)╯︵┻━┻","text":"翘了大学语文课去机房上架服务器被语文老师抓到，这种事情一定是终生难忘的（哭）。 好了，以下来介绍所踩的坑。 某202.xxx.xxx.xxx/28的ip是我们社团的服务器所使用，但由于年久失修，宕了只有一台了orz，于是fix的这个任务就落到了我的头上了orz。 由于是接手的，只留下了一个记录了密码和用户名什么的文档来，只能靠自己摸索，架构是多台Apache+php环境组成的集群和一台数据库服务器组成，具体配置无法测试（基本的命令都缺失，有必要全部重做系统了），内网带宽实测100mbps。但数据库服务器的raid早已坏掉，各种丢数据，唯一剩下来的一台也不敢动，于是，只能贡献出我自己的R410了。 R410的网卡是博通一种服务器网卡，很可惜Debian初始并不带网卡驱动，需要后续在没网的情况下手动安装，故舍弃Debian。Ubuntu 16.04.2 LTS在写入系统时又发生失败。centos才是最适合R410的系统orz。 R410集成了非常强大的BIOS和远控卡，然而正是强大，导致了使用不是很方便，个人非常不推荐使用UEFI引导，而且也非常不好用。在不小心按了F10进入了UEFI后，你将会经历漫长的等待，看着Initializing UEFI,Please wait...(&gt;=1hr)，而且极有可能加载失败。所以我们要做的就是，关闭电源，再开启电源，加载完BIOS后迅速按下Ctrl 和E键，进入菜单，进入System Services选项菜单里并把它关掉。保存退出，继续加载bios的过程中再去F11里选择u盘启动。 安装完centos后有个非常恶心的阅读协议，这个只能Good luck了。在实际上架服务器中，我们不可能使用DHCP协议获取ip，只能手动配置ip，在参考另外一台服务器的配置文件后顺利完成了ip的配置，其实图形化界面下的centos配置防火墙很容易23333333 PS：机房老师中途进来看到raid的配置和机器上4个盘位只插了一块盘有点想笑，我能怎么办，我也没钱买硬盘哇(╯‵□′)╯︵┻━┻","categories":[],"tags":[]},{"title":"Omega2Plus上手体验","slug":"Omega2-Getstart","date":"un55fin55","updated":"un00fin00","comments":true,"path":"post/Omega2-Getstart/","link":"","permalink":"https://www.yuyanlab.com/post/Omega2-Getstart/","excerpt":"好吧，我相信这是国内首发上手测评 #(手动滑稽) Omega2是onion公司搞出的一款超迷你的IOT设备，体积非常迷你，12月参与的众筹，春节后收到的东西（顺丰发货好评）。 这款东西最大的特色是小而丰富，而且价格便宜，标准版5$，Plus版是9$，我参与的呢是plus版。 先来几张低清有码","text":"好吧，我相信这是国内首发上手测评 #(手动滑稽) Omega2是onion公司搞出的一款超迷你的IOT设备，体积非常迷你，12月参与的众筹，春节后收到的东西（顺丰发货好评）。 这款东西最大的特色是小而丰富，而且价格便宜，标准版5$，Plus版是9$，我参与的呢是plus版。 先来几张低清有码 这plus拥有一颗580MHz的处理器128MB的内存，32MB的储存，但支持TF卡，自带wifi。 官方推出了类似积木的dock扩展，然而价格较贵，不推荐。15个脚的GPIO接口，可以各种折腾，官方提供了接口图。 图片源自onion 我怎么可能老老实实买dock拓展呢哈哈哈）但是针脚不兼容面包板，注意不要硬怼，正确的姿势应该使用杜邦线，把供电的3.3和GND接入到供电板上（某宝很便宜），这时，可以给板子加电了。加电之后，Omega2会自己建立个wifi，然后用自己的电脑连上这个wifi就可以初始化你的onion。 支持的编程语言也非常多，C艹，ruby，nodejs，php，python（理论上c也可以）orz 至于该怎么做，官方文档写的非常清楚，非常适合小白入门，非常友好，链接-&gt; https://docs.onion.io (英文版)","categories":[],"tags":[]},{"title":"React.js折腾小计","slug":"first-learning-react-experience","date":"un33fin33","updated":"un00fin00","comments":true,"path":"post/first-learning-react-experience/","link":"","permalink":"https://www.yuyanlab.com/post/first-learning-react-experience/","excerpt":"我不会告诉你这篇文章是折腾了ng1，vue，react三大框架之后才写的QvQ 好了废话不多说了，为什么我会跳入这个坑，最早是因为在express框架中，注册表单在用户填写后得通过post请求传回到后端再写入数据库，然而又不想碰jQuery这个东西，所以想到了用目前流行想这些框架。 一开始是用ng1，然后根据phonecat的教程构建出了应用，然而也用了原始的方法，一个angular.js一个angular-router.js再加一个app.js实现的。当然这样被 锐神等dalao吐槽了，于是乎尝试锐神他们较为推荐的vue来构建，但是vue虽然轻量，但是在模板实现上，以及子父绑定上并不友好，并且vue的社区支持并不友好，对于新手来学习上手并不友好，没有手把手的案例来教你做应用，即使，vue推出了vue-cli这个东西，然而，由于太多报错不知道如何解决，故放弃，最后采用了react实现了项目，并熟悉了webpack打包模式。 这个项目呢，是一个不依托后端程序的单页应用，（导航站），为什么不直接写死html呢，废话！当然是为了便于维护(╯‵□′)╯︵┻━┻，同时也是为了后期升级做打算，因为，未来打算做成一个综合门户，页眉页脚直接写死html，到content里在调用react形成app，content目前只是通过几个路由，每个路由下get一个json，列出导航条目，后期的话，把菜单导航升级成二级的，就可以调用比如论坛等的api实现一个综合门户。 react的hash路由系统默认会抛出一个 “? k=xxxxx”的东西，google一圈，so上有大佬解释说这是为了方便判断什么时候点的某个链接，也有相应的隐藏的解决方案。但是窝不打算隐藏，url嘛，总要带些 &amp;?_ 什么的才有逼格嘛2333333。 webpack打包模式非常赞，尽管他给我打包出个32k行的js…，但webpack用得不是特别熟悉的情况下，不要乱import进css。（包括我(:з」∠) ） react目前才学习了冰山一角，开学后继续学习，该应用也很快将会上线，下一篇博文会写一下该应用的实现ovo。 PS：jsx的写法实在太赞了！另外webpack -p后不要在编辑器里乱点编译好的js（。别问我为什么Orz）","text":"我不会告诉你这篇文章是折腾了ng1，vue，react三大框架之后才写的QvQ 好了废话不多说了，为什么我会跳入这个坑，最早是因为在express框架中，注册表单在用户填写后得通过post请求传回到后端再写入数据库，然而又不想碰jQuery这个东西，所以想到了用目前流行想这些框架。 一开始是用ng1，然后根据phonecat的教程构建出了应用，然而也用了原始的方法，一个angular.js一个angular-router.js再加一个app.js实现的。当然这样被 锐神等dalao吐槽了，于是乎尝试锐神他们较为推荐的vue来构建，但是vue虽然轻量，但是在模板实现上，以及子父绑定上并不友好，并且vue的社区支持并不友好，对于新手来学习上手并不友好，没有手把手的案例来教你做应用，即使，vue推出了vue-cli这个东西，然而，由于太多报错不知道如何解决，故放弃，最后采用了react实现了项目，并熟悉了webpack打包模式。 这个项目呢，是一个不依托后端程序的单页应用，（导航站），为什么不直接写死html呢，废话！当然是为了便于维护(╯‵□′)╯︵┻━┻，同时也是为了后期升级做打算，因为，未来打算做成一个综合门户，页眉页脚直接写死html，到content里在调用react形成app，content目前只是通过几个路由，每个路由下get一个json，列出导航条目，后期的话，把菜单导航升级成二级的，就可以调用比如论坛等的api实现一个综合门户。 react的hash路由系统默认会抛出一个 “? k=xxxxx”的东西，google一圈，so上有大佬解释说这是为了方便判断什么时候点的某个链接，也有相应的隐藏的解决方案。但是窝不打算隐藏，url嘛，总要带些 &amp;?_ 什么的才有逼格嘛2333333。 webpack打包模式非常赞，尽管他给我打包出个32k行的js…，但webpack用得不是特别熟悉的情况下，不要乱import进css。（包括我(:з」∠) ） react目前才学习了冰山一角，开学后继续学习，该应用也很快将会上线，下一篇博文会写一下该应用的实现ovo。 PS：jsx的写法实在太赞了！另外webpack -p后不要在编辑器里乱点编译好的js（。别问我为什么Orz）","categories":[],"tags":[]},{"title":"你好2017","slug":"WelcomeTo2017","date":"un66fin66","updated":"un00fin00","comments":true,"path":"post/WelcomeTo2017/","link":"","permalink":"https://www.yuyanlab.com/post/WelcomeTo2017/","excerpt":"欢迎2017的到来，祝大家新年快乐o(* ≧▽≦)ツ 在2016这段时间里，我没什么拿得出手的东西，博客更新慢了许多，主要还是没有多少时间来折腾。花了大量时间应付高数和英语，却没取得什么成绩，险些挂科，花在计算机上的时间也不多，除了学习到了很多c语言的知识外，也学了一些nodejs，尝试使用express框架写了些东西，也学到了一些关于jQuery的知识，但离生产还差得很远很远，感觉有些迷茫。当然，我也结识一些dalao朋友，通过交流讨论学到了很多。 2017，一起加油吧！","text":"欢迎2017的到来，祝大家新年快乐o(* ≧▽≦)ツ 在2016这段时间里，我没什么拿得出手的东西，博客更新慢了许多，主要还是没有多少时间来折腾。花了大量时间应付高数和英语，却没取得什么成绩，险些挂科，花在计算机上的时间也不多，除了学习到了很多c语言的知识外，也学了一些nodejs，尝试使用express框架写了些东西，也学到了一些关于jQuery的知识，但离生产还差得很远很远，感觉有些迷茫。当然，我也结识一些dalao朋友，通过交流讨论学到了很多。 2017，一起加油吧！","categories":[],"tags":[]},{"title":"Centos安装Munin服务器监控系统","slug":"Munin-setup","date":"un66fin66","updated":"un00fin00","comments":true,"path":"post/Munin-setup/","link":"","permalink":"https://www.yuyanlab.com/post/Munin-setup/","excerpt":"为什么窝选择Munin系统，原因很简单，安全，轻量快速，可分析性强。 其实很多开源镜像站和一些老网站都采用这个系统，历史悠久，占用小，各种强悍的图表 Munin分为监控机软件(munin)和被监控机软件(munin-node),两个，其中一台机器上必须都安装（作为监控机）其余机器安装munin-node即可 安装非常简单。munin基于Perl，我们应该先装好perl全家桶。由于rrdtool在epel源里才有，所以我们应该提前设置epel源。1yum install munin munin-common munin-node rrdtool 这是两个非常重要的配置文件位置，关于如何增加节点在配置文件里都有配置说明和例子12/etc/munin/munin.conf #主监控机配置/etc/munin/munin-node.conf #节点机器配置 有关nginx访问也很简单，munin安装好后，默认已经生成在/var/www/html/munin/下，我们只需把网站配置文件的location指向这个目录即可 munin默认记录监控日志，并自动压缩储存在/var/log/munin下 1service munin-node start 我在使用中发现一个巨大问题，就是网页不会刷新，于是尝试手动刷新1/usr/bin/munin-cron 但是返回这个错误1234This program will easily break if you run it as root as you aretrying now. Please run it as user &apos;nobody&apos;. The correct &apos;su&apos; commandon many systems is &apos;su - munin --shell=/bin/bash&apos;Aborting. OK,我们切换到munin用户，当再次执行的时候，又报错1[ERROR] Could not copy contents from /etc/munin/static/ to /[path to static file] at /usr/share/perl5/vendor_perl/Munin/Master/HTMLOld.pm line 716. Google一圈，找到解决方案http://serverfault.com/questions/605226/munin-cron-unable-to-copy-contents明显是epel源那堆打包的工程师粗心好不好orz，好在可以结决了 123su - munin --shell=/bin/bash #切换到munin用户chown -R munin:munin /var/www/html/munin #更改权限exit #返回root用户 等五分钟你就可以看到正常刷新了 默认监听端口4949，多机集群别忘了放行端口。","text":"为什么窝选择Munin系统，原因很简单，安全，轻量快速，可分析性强。 其实很多开源镜像站和一些老网站都采用这个系统，历史悠久，占用小，各种强悍的图表 Munin分为监控机软件(munin)和被监控机软件(munin-node),两个，其中一台机器上必须都安装（作为监控机）其余机器安装munin-node即可 安装非常简单。munin基于Perl，我们应该先装好perl全家桶。由于rrdtool在epel源里才有，所以我们应该提前设置epel源。1yum install munin munin-common munin-node rrdtool 这是两个非常重要的配置文件位置，关于如何增加节点在配置文件里都有配置说明和例子12/etc/munin/munin.conf #主监控机配置/etc/munin/munin-node.conf #节点机器配置 有关nginx访问也很简单，munin安装好后，默认已经生成在/var/www/html/munin/下，我们只需把网站配置文件的location指向这个目录即可 munin默认记录监控日志，并自动压缩储存在/var/log/munin下 1service munin-node start 我在使用中发现一个巨大问题，就是网页不会刷新，于是尝试手动刷新1/usr/bin/munin-cron 但是返回这个错误1234This program will easily break if you run it as root as you aretrying now. Please run it as user &apos;nobody&apos;. The correct &apos;su&apos; commandon many systems is &apos;su - munin --shell=/bin/bash&apos;Aborting. OK,我们切换到munin用户，当再次执行的时候，又报错1[ERROR] Could not copy contents from /etc/munin/static/ to /[path to static file] at /usr/share/perl5/vendor_perl/Munin/Master/HTMLOld.pm line 716. Google一圈，找到解决方案http://serverfault.com/questions/605226/munin-cron-unable-to-copy-contents明显是epel源那堆打包的工程师粗心好不好orz，好在可以结决了 123su - munin --shell=/bin/bash #切换到munin用户chown -R munin:munin /var/www/html/munin #更改权限exit #返回root用户 等五分钟你就可以看到正常刷新了 默认监听端口4949，多机集群别忘了放行端口。","categories":[],"tags":[]},{"title":"关于阿里云糟糕的工单服务","slug":"Aliyun-Bad-Work-Order","date":"un55fin55","updated":"un00fin00","comments":true,"path":"post/Aliyun-Bad-Work-Order/","link":"","permalink":"https://www.yuyanlab.com/post/Aliyun-Bad-Work-Order/","excerpt":"本文除了暴露了一些阿里云的问题外，有些个人的情绪，故折叠。","text":"本文除了暴露了一些阿里云的问题外，有些个人的情绪，故折叠。 关于阿里云糟糕的工单的服务，让我怀疑他们售后工程师的linux运维水平。 原本我对阿里云的印象非常好，在之前使用阿里云的各种服务都给了我非常好的体验，直到这次才发现糟糕的一面。 具体问题详见对话12345我：ecs只有22端口可以访问，服务器上防火墙已经关了（debian8 iptables），但浏览器显示访问被拒绝， Nginx监听端口正常（非80端口，用的是5000和7000），在云服务器上telnet localhost 7000是正常的， 但我这里的计算机telnet到ecs显示被拒，阿里云ecs内网组策略全部放行，如何处理？工程师：我这测试7000端口是不通的，22端口正常，建议您提供一下端口监听的截图，我这核实一下，谢谢 于是我把截图抛过去了123工程师：您好，查看端口是正常监听的，这个是不需要设置什么的，建议您提供服务器的ip地址和远程账号密码、端口，以便我们来登录检查， 问题处理后请您及时更改密码。注意：不需要提供登录阿里云控制台的帐号和密码。 我这登录核实一下，谢谢 OK没问题，你自家的东西你们很清楚，我上面也没什么，就编译了一个nginx而已，我把密码就发过去了1工程师：看您的主机内部还存在防火墙设置配置的，我这边是否可以为您尝试关闭下，或者是您自行关闭下然后在查看下 我告诉他，随你怎么折腾，能用就行12工程师：目前我们测试/etc/init.d/iptables和service以及systemctl都无法关闭您的防火墙，您是否如何安装的防火墙，建议您远程后关闭下您的防火墙重新测试核实下 这时我心中：excuse me？？？没看到关闭防火墙时都显示了failed 防火墙未加载么，明明都没开你跟我说关不掉？？？123456我： 防火墙压根就是关闭的，系统也是用你们的初始镜像debian8的， 并且也只是安装了nginx+mysql+php的环境，没有对防火墙什么的做过更改，我尝试卸掉iptables，并且成功了。 重启进入系统后，用python建立了个简单的http服务，但是这回不是拒绝了访问，是响应时间过长， 我不清楚你们的debian是不是做了什么黑科技魔改？工程师： 您好，阿里云提供的都是纯净的镜像，没有任何限制，我方测试您的服务器5000和7000端口都未监听，请您核实 我差点说，不想解决问题就明说，没必要这么玩套路，靠你还不如靠我自己。！！(╯°□°）╯︵┻━┻ 按照我个人的分析，要么是它母鸡的防火墙问题，要么它提供的debian镜像有问题，于是我改用centos，和debian7，均正常，换回debian8，还是老问题，所以问题在于它所谓的“纯净的debian8系统” 呵呵呵","categories":[],"tags":[]},{"title":"TCP-BBR拥塞控制技术的简单分析及使用","slug":"TCP-BBR","date":"un55fin55","updated":"un00fin00","comments":true,"path":"post/TCP-BBR/","link":"","permalink":"https://www.yuyanlab.com/post/TCP-BBR/","excerpt":"TCP-BBR技术是Google实现的一项技术，在其正式生产环境通过后在ACM queue期刊发表: http://queue.acm.org/detail.cfm?id=3022184 并提交到了Linux主线中。这项技术致力于实现在劣质网络下达到较高的稳定性和可用性。 相信大家对CUCN 和 EAC-C2C 两条丢包率丧心病狂的海底光缆深有感触，许多好盆友都使用了例如锐速或者finalspeed等暴力发包软件来解决这个问题，这类软件虽然自己用得爽了，但是会加剧海底光缆的拥堵，以及可能导致由于你懂得的原因把IP给ban掉。 在看了相关参考文章后，在这里来分析一下：TCP-BBR技术呢，用了一种溢水原理的思想，来预判丢包率，调配发包速率。假设你有一支较细的U形管，下面还有一堆不可溶的填塞物，你从一边开始大量灌水，如果另一边出水正常，你就可以继续加大灌水量，达到最大带宽。如果另一边发现水时断时有，就证明下面出现了随机拥堵，这时，你就要减小灌水量，等待水位落下。这时如果采用传统继续灌水时，也就会造成水溢出（丢包现象的产生）。所以这是真正的按需发包。当然，这一切是建立在系统预估的情况下。 以实际情况说，也就是应用程序在创立会话时，这项技术会增加额外少量的的会话，这些会话用于检测带宽和延迟，根据网路设备返回的情况来分析网路质量（确认延迟和带宽口径，以及回避不易确认丢包类型）。另外，这项技术中，BBR接管了TCP的控制权。 由于这项技术公布的时间也就一周左右，可能会出现许多不稳定和不科学的现象，期待更新以及Google更详细的doc。知乎上的许多大牛也对这项内容进行了详细的分析 https://www.zhihu.com/question/53559433 这里是几份权威的文章，较为详细的说明了TCP-BBR技术http://www.thequilt.net/wp-content/uploads/BBR-TCP-Opportunities.pdfhttp://blog.cerowrt.org/post/bbrs_basic_beauty/ 接下来是具体安装运用方面","text":"TCP-BBR技术是Google实现的一项技术，在其正式生产环境通过后在ACM queue期刊发表: http://queue.acm.org/detail.cfm?id=3022184 并提交到了Linux主线中。这项技术致力于实现在劣质网络下达到较高的稳定性和可用性。 相信大家对CUCN 和 EAC-C2C 两条丢包率丧心病狂的海底光缆深有感触，许多好盆友都使用了例如锐速或者finalspeed等暴力发包软件来解决这个问题，这类软件虽然自己用得爽了，但是会加剧海底光缆的拥堵，以及可能导致由于你懂得的原因把IP给ban掉。 在看了相关参考文章后，在这里来分析一下：TCP-BBR技术呢，用了一种溢水原理的思想，来预判丢包率，调配发包速率。假设你有一支较细的U形管，下面还有一堆不可溶的填塞物，你从一边开始大量灌水，如果另一边出水正常，你就可以继续加大灌水量，达到最大带宽。如果另一边发现水时断时有，就证明下面出现了随机拥堵，这时，你就要减小灌水量，等待水位落下。这时如果采用传统继续灌水时，也就会造成水溢出（丢包现象的产生）。所以这是真正的按需发包。当然，这一切是建立在系统预估的情况下。 以实际情况说，也就是应用程序在创立会话时，这项技术会增加额外少量的的会话，这些会话用于检测带宽和延迟，根据网路设备返回的情况来分析网路质量（确认延迟和带宽口径，以及回避不易确认丢包类型）。另外，这项技术中，BBR接管了TCP的控制权。 由于这项技术公布的时间也就一周左右，可能会出现许多不稳定和不科学的现象，期待更新以及Google更详细的doc。知乎上的许多大牛也对这项内容进行了详细的分析 https://www.zhihu.com/question/53559433 这里是几份权威的文章，较为详细的说明了TCP-BBR技术http://www.thequilt.net/wp-content/uploads/BBR-TCP-Opportunities.pdfhttp://blog.cerowrt.org/post/bbrs_basic_beauty/ 接下来是具体安装运用方面 Linux kernel 4.9已经加入了，我们只需要更新下内核并启用就行了 更新内核有风险，许多vps都有镜像功能，请镜像一份disk，如果你是单点服务器，也请做好备份！！ 这里是公布的是基于do的Debian8适用的，其他发行版Google一下，如果arch什么的就等下次滚动更新吧233333 1234567891011121314wget http://kernel.ubuntu.com/~kernel-ppa/mainline/v4.9-rc8/linux-image-4.9.0-040900rc8-generic_4.9.0-040900rc8.201612051443_amd64.debdpkg -i linux-image-4.9.0*.deb #安装内核dpkg -l|grep linux-image #查看服务器上已存在的内核apt-get purge linux-image-3.16.0-4-amd64 #替换成自己的旧内核名称即可，（可能会有提示另外一个` linux-image-amd64 ` 内核也要删掉，那就删掉吧。关于Abort kernel removal选择 Noupdate-grub #更新引导reboot #重启 重启进入系统后，先 uname -a 一下看看内核是否更新成功 然后执行123echo &quot;net.core.default_qdisc=fq&quot; &gt;&gt; /etc/sysctl.confecho &quot;net.ipv4.tcp_congestion_control=bbr&quot; &gt;&gt; /etc/sysctl.confsysctl -p 校验一下 执行 sysctl net.ipv4.tcp_available_congestion_control 返回值有bbr。执行 lsmod | grep bbr 返回值有tcp_bbr。 最后再重启一下就可以啦ovo 当你看到这篇文章时，你已经享受到了TCP-BBR技术所带来的速度了。以下是一些须注意的坑 从kernel官网下的内核更新包仅支持老内核版本在4.3以上的机器更新，所以我们应该使用Ubuntu源的不同系统的grub配置文件可能不一样，灵活处理。","categories":[],"tags":[]},{"title":"mbxo 一款专为手机而生的hexo主题","slug":"mbxo","date":"un66fin66","updated":"un00fin00","comments":true,"path":"post/mbxo/","link":"","permalink":"https://www.yuyanlab.com/post/mbxo/","excerpt":"在 mobi.css 发布后，就有了这个想法，能不能做一个非常简洁的博客手机端，即使在 GPRS 网也能以一个不错的速度访问。 于是乎， 8 月底，雏形完成啦，但是，第四次调试时老机器的硬盘出现了故障，就 gg 了。于是开学了，于是军训，于是各种各样的事情，直到十月中，才用新电脑开始填坑（抽了两个晚自习写了出来 orz ） Github:https://github.com/Alleysakura/hexo-theme-mbxoDemo:https://alleysakura.github.io/hexo-theme-mbxo/","text":"在 mobi.css 发布后，就有了这个想法，能不能做一个非常简洁的博客手机端，即使在 GPRS 网也能以一个不错的速度访问。 于是乎， 8 月底，雏形完成啦，但是，第四次调试时老机器的硬盘出现了故障，就 gg 了。于是开学了，于是军训，于是各种各样的事情，直到十月中，才用新电脑开始填坑（抽了两个晚自习写了出来 orz ） Github:https://github.com/Alleysakura/hexo-theme-mbxoDemo:https://alleysakura.github.io/hexo-theme-mbxo/","categories":[],"tags":[]},{"title":"利用代理隧道接入HE.net的IPv6网","slug":"HEnet-ipv6","date":"un22fin22","updated":"un00fin00","comments":true,"path":"post/HEnet-ipv6/","link":"","permalink":"https://www.yuyanlab.com/post/HEnet-ipv6/","excerpt":"IPv6正在成为因特网的主流，但是，很多时候，无论是IDC还是ISP都不一定支持IPv6网络。但是IPv6的地址数量非常多，HE.net家拥有全球最大的IPv6网络，同时他家为了推广IPv6网络，推出了一项非常任性的服务23333333——利用代理隧道接入他家的v6网。","text":"IPv6正在成为因特网的主流，但是，很多时候，无论是IDC还是ISP都不一定支持IPv6网络。但是IPv6的地址数量非常多，HE.net家拥有全球最大的IPv6网络，同时他家为了推广IPv6网络，推出了一项非常任性的服务23333333——利用代理隧道接入他家的v6网。首先打开https://tunnelbroker.net/ 右上注册。然后在邮件里的链接里点过去写密码，然后登陆。这时候，就可以开始注册啦，点击create tunnel，如果你要为自己的电脑创建代理的话，直接输入网页上显示的ip就可以了，如果是给你的服务器上使用的话，填上你服务器的ip（v4）然后下面选择一个代理隧道地址，当然你可以用服务器ping一下，看看哪个延迟低。 确认后就能看到一张表格了（居然还有反查名和任播地址，太良心了）然后上面有个Example Configurations，里面有各种各样系统的配置文件，按照你的系统修改即可23333 当然以后修改也还是可以滴（他也提供的api修改的接口，任性发挥吧233333），HE.net任性的分了一大块地址给你，所以，只要稍懂一点路由原理，可以给你的局域网的每台机器都分配一个地址（包括各种虚拟化的的机器），不过博主也没有具体尝试过，以后有机会再试试吧。 HE.net的这项服务同样支持BGP代理隧道，不过个人用不到，天朝内的政策法规也不给你这样做2333333","categories":[],"tags":[]},{"title":"你好 大学","slug":"Hello-hbut","date":"un55fin55","updated":"un00fin00","comments":true,"path":"post/Hello-hbut/","link":"","permalink":"https://www.yuyanlab.com/post/Hello-hbut/","excerpt":"window.Ymplayer.Init(); 终于被录了～好开心，第一志愿学校，第一志愿专业。耶耶耶！不过好悬，今年湖工录取线暴涨……按前三年的计算可以说稳进，可是今年，差点被退档，比最低分只高两分。 进了想去的学校，进了想进的专业。会给我的计算机之路鼓足强大的信心～C，JAVA ，JS我会去攻略的（当然不会忘了Linux这个陪伴了我高中半数时光的好伙伴～） 光阴似箭，这一切像梦一样，但又十分真实，现在是时候泻药一下了","text":"window.Ymplayer.Init(); 终于被录了～好开心，第一志愿学校，第一志愿专业。耶耶耶！不过好悬，今年湖工录取线暴涨……按前三年的计算可以说稳进，可是今年，差点被退档，比最低分只高两分。 进了想去的学校，进了想进的专业。会给我的计算机之路鼓足强大的信心～C，JAVA ，JS我会去攻略的（当然不会忘了Linux这个陪伴了我高中半数时光的好伙伴～） 光阴似箭，这一切像梦一样，但又十分真实，现在是时候泻药一下了 2013年的8月26日，参加完加拿大夏令营的我，经历了短暂几小时的休整，踏进了官渡区第一中学的校门，此时，学校已经军训了3天了 这时候的我，是个疯狂的果粉。同时，我毛遂自荐的当上了化学科代表，并痴迷上化学了，竞赛书，大学化学教材什么的也看过一些。自然这时候的化学，肯定也不差。 这时，我入宅了~~~入宅作是–少女爱上姐姐 ，还有我入手了一片树莓派，触碰到了iot的大门，用python写了人生中第一个程序（虽然现在早把python忘了） 转眼间，我升到了高二 高二，除了动漫外，我爱上了摇滚（由于轻音少女），开始练琴。同时我自学完了化学选修三。 高二下学期，是我17年来，最精彩的半年！ 由于一个叫《日本印象-秋》的视频，我误入了一个叫PC426的网站，这彻底的改变了的我的人生。 方向上，由化学转向到了计算机。 在看了426的奋斗日记后，深有感触，所以学习上开始拼搏，由二十多名跳进前五。 同时，在2015年4月2日，尝试建起了我的第一个网站（也就是这个网站）开始了linux运维之路，（感谢入坑师傅 @白翼，还有他写的的《奔跑吧！服务器》的文章） 我也加入了一支乐队–半导体乐队，在里面任主音吉他。 高三，我的生活里，就只剩下试卷和linux。我使用的计算机，系统也换成了Debian。我从使用一键包构建apache构建web环境，进步到了可以手动按需求自行编译，也将博客的后端换成了HEXO，在高三下学期，步入了nginx和集群时代，全面走向centos7。 学习上呢，也就呵呵了，靠的是高考前50天的奋斗~ 高考呢，勉勉强强，我只能说我尽了我最大的努力，虽然外人会觉得我英语失常，但就那张试卷而言我只能得到这点分，换一张或许会高很多，反正我也无所谓。 高考，在我眼里就是一场赌博，一个过程，人生无常，谁又能说清楚未来的事情呢~ 假期呢，我应战CCNA，不过在出录取结果的这一天，我参加了考试，然而没过，终究是15天自学的，有两块短板太明显orz 不过，我已经准备好10月再次迎战CCNA了！Cisco！咱们武汉再见！ 未来的路，我没想好，做网络架构，还是搞linux运维，还是搞前端开发呢？ 以后再决定了，也许fullstack可以成为一个我的目标~，引用《纪实72小时》里的一句话“规划好的人生，太没意思了。” 总而言之，大学，我来了~","categories":[],"tags":[]},{"title":"Caddy Server简易使用手册","slug":"CaddyServer","date":"un66fin66","updated":"un00fin00","comments":true,"path":"post/CaddyServer/","link":"","permalink":"https://www.yuyanlab.com/post/CaddyServer/","excerpt":"Caddy Server是一个用golang写的优秀web server，国内用户相对偏少，但我非常喜欢这个东西，所以来做个简易的手册。它有许多nginx和apache没有的功能，不仅具有特色而且非常实用，比如简洁的conf，http/2，markdown渲染等等要说它的缺点，就是效率不如前两者。 本文会以下几块方面来介绍此服务器 caddy安装及配置文件基本写法 基本组成模块 传统php+mysql建站 caddy特色markdown建站 反向代理引入更多后端系统","text":"Caddy Server是一个用golang写的优秀web server，国内用户相对偏少，但我非常喜欢这个东西，所以来做个简易的手册。它有许多nginx和apache没有的功能，不仅具有特色而且非常实用，比如简洁的conf，http/2，markdown渲染等等要说它的缺点，就是效率不如前两者。 本文会以下几块方面来介绍此服务器 caddy安装及配置文件基本写法 基本组成模块 传统php+mysql建站 caddy特色markdown建站 反向代理引入更多后端系统 1:Caddy的安装及配置文件基本写法caddy的安装，就是从caddy的官网下载：https://caddyserver.com/download 想要什么模块就尽情点上吧2333如果没有官网列表上设备或是有特殊需求的同学，可以参考无闻菊苣的文章自行构建可执行文件：https://wuwen.org/2015/11/13/caddy-in-action.html PS:解压时请把压缩包放在一个新文件夹后再解压，别问我为什么QwQ 然后执行 ./caddy 这时候访问localhost:2015就可以测试是否运行起来了，至于持久化运行，有多种方法实现， candyserver下载下来的安装包里已经包含各系统启动文件 博主使用的是使用screen来守护，当然还有更专业的软件实现，比如supservisor和systemd，systemd在无闻菊苣的文章里已经有了，这里提供一份摘自互联网的supservisor的配置文件123456789101112131415[program:caddy]command=/usr/bin/caddy -conf=\"/var/www/Caddyfile\" directory=/var/www ; directory to cwd to before exec (def no cwd) autostart=true ; start at supervisord start (default: true) autorestart=unexpected ; whether/when to restart (default: unexpected) startsecs=1 ; number of secs prog must stay running (def. 1) startretries=3 ; max # of serial start failures (default 3) exitcodes=0,2 ; 'expected' exit codes for process (default 0,2) stopsignal=QUIT ; signal used to kill process (default TERM) stopwaitsecs=10 ; max num secs to wait b4 SIGKILL (default 10) stopasgroup=false ; send stop signal to the UNIX process group (default false) user=www ; setuid to this UNIX account to run the program redirect_stderr=true ; redirect proc stderr to stdout (default false) stdout_logfile=/var/log/caddy.log ; stdout log path, NONE for none; default AUTO stderr_logfile=/var/log/caddyerr.log ; stderr log path, NONE for none; default AUTO caddy的conf写法有好多种，首先你要在caddy的可执行文件的同目录创建一个名叫Caddyfile的文件，或者在启动时加入路径./caddy -conf=&quot;/path/to/Caddyfile&quot;接下来是几种caddy的conf的写法，简直辣眼睛 本地访问80：1:80 单网站：（它会帮您签好let’s encrypt证书并且强制定向到https）123example.comroot /var/www/html//更多模块 多网站：12345example.com &#123; gzip root /var/www/htm/ //更多模块&#125; 2:常用基本组成模块均写入到conf站点配置中 1.log日志1log /var/www/log/example.log 2.目录访问1browse 3.gzip压缩1gzip 4.自主ssl证书1tls /path/ssl/example.com.crt /path/ssl/example.com.key 5.git拉取功能(3600秒为间隔时间)123git https://github.com/user/project.git /var/www/html/git/ &#123; interval 3600&#125; 6.访问口令认证（用户emiria，密码abc123）1basicauth / emiria abc123 7.cors跨域(下载时记得勾上)123456789cors / &#123; origin https://alleysakura.com origin http://alleysakura.pw https://alleysakura.pw methods POST,PUT allow_credentials false max_age 3600 allowed_headers X-Custom-Header,X-Foobar exposed_headers X-Something-Special,SomethingElse&#125; 8.IP屏蔽(下载时记得勾上)12345ipfilter / &#123; rule block ip 212.10.15.0-255 202.10.15.0-10 59.43.247.103 blockpage /var/www/html/403.html&#125; 9.跳转功能(目录重写功能也类似)1redir http://example.com&#123;url&#125; 而且不像nginx进行www重定向那么麻烦，把域名原域名（不限协议）写上，大括号里加上这个就可以，简直太赞了 10.自定义错误页面1234errors &#123; 404 404.html 500 /var/www/html/500.html&#125; 3:传统php+mysql建站包管理器安装mysql+php，然后添加1fastcgi / 127.0.0.1:9000 php 4:caddy特色markdown建站首先载入markdown渲染格式(用index.html来定义，类似swig和ejs模板)123markdown / &#123; template index /path/templates/index.html&#125; 这是一种渲染格式（index.html)1234567891011121314151617181920212223242526&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;meta charset=\"utf-8\" /&gt; &lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" /&gt; &lt;title&gt;&#123;&#123;.Doc.title&#125;&#125;&lt;/title&gt; &lt;link rel=\"stylesheet\" type=\"text/css\" href=\"styles/main.css\" /&gt; &lt;/head&gt; &lt;body&gt; &lt;header&gt; &lt;a href=\"/\"&gt;&lt;h1 class=\"page-title\"&gt;&#123;&#123;.Doc.sitename&#125;&#125;&lt;/h1&gt;&lt;/a&gt; &lt;/header&gt; &lt;main&gt; &#123;&#123;range .Links&#125;&#125; &#123;&#123;if ne .URL \"/index.md\" &#125;&#125; &lt;article&gt; &lt;h3&gt;&lt;a href=\"&#123;&#123;.URL&#125;&#125;\"&gt;&#123;&#123;.Title&#125;&#125;&lt;/a&gt;&lt;/h3&gt; &#123;&#123;.Summary&#125;&#125; &lt;/article&gt; &#123;&#123;end&#125;&#125; &#123;&#123;end&#125;&#125; &lt;/main&gt; &lt;/body&gt;&lt;/html&gt; 接下来，我们只用按照正常的markdown在网站根目录写了（index.md)123456---template: indextitle: caddysitename: test caddy---text 233333333333333333 当然各种html标签也是可以滴，爱怎们玩怎么玩2333333 5:反向代理引入更多后端系统引入反向代理，只需一行1proxy / localhost:4000 负载均衡也是类似配置的23333123proxy / 10.10.201.222:80 10.10.201.221:80 &#123; policy round_robin &#125; 当然caddyserver还有许多不常用的，但是非常好玩的组件，大家可以去官网看看文档，博主也将继续探索~（&gt; y &lt;)","categories":[],"tags":[]},{"title":"Gogs:一个不错的GitWeb服务器","slug":"Gogs","date":"un33fin33","updated":"un00fin00","comments":true,"path":"post/Gogs/","link":"","permalink":"https://www.yuyanlab.com/post/Gogs/","excerpt":"网址 ：htttps://gogs.ioGogs作为一个Git服务器，就目前来说已经足够成熟了。它简单易用，极少的bug，所以特别适合小公司及个人使用。相比较Gitlab来说，这个更加轻量，所以我们可以使用树莓派，废旧电脑，或者一台不低于512mb内存的vps上搭一个 相关安装文档官网已经写得非常清楚了，第三方的教程中，这有一篇比较优质的https://mynook.info/blog/post/host-your-own-git-server-using-gogs 在vps等机器跑gogs，需要我们使用screen或者tmux等工具来守护这个进程。 接下来是博主脑洞大开，想出的对于gogs的一些实验性(作死)玩法。","text":"网址 ：htttps://gogs.ioGogs作为一个Git服务器，就目前来说已经足够成熟了。它简单易用，极少的bug，所以特别适合小公司及个人使用。相比较Gitlab来说，这个更加轻量，所以我们可以使用树莓派，废旧电脑，或者一台不低于512mb内存的vps上搭一个 相关安装文档官网已经写得非常清楚了，第三方的教程中，这有一篇比较优质的https://mynook.info/blog/post/host-your-own-git-server-using-gogs 在vps等机器跑gogs，需要我们使用screen或者tmux等工具来守护这个进程。 接下来是博主脑洞大开，想出的对于gogs的一些实验性(作死)玩法。 1.开启目录浏览gogs吧git仓库挂在了一个文件夹上，于是，如果我们用nginx把某网址指向了git仓库目录，并开启目录浏览，更改时间等，直接点击即可下载/浏览，会提高各种效率（许多时候比git工作方式还高）另外，对于内网中小伙伴们之间分享文件也是非常方便的。 2.在线搜索github上有许多优秀文档搜索工具（可以精确的文章内的文字的），大部分是nodejs写的，如果我们把这个工具绑上一个网址，把目录指向git仓库，这样，就实现类似github那样项目内搜索功能。 最后的观点，个人用的话，是没有必要安装类似项目的，一个git-server + nginx足够了","categories":[],"tags":[]},{"title":"一个值得尝试的小型linux发行版-TinyCore","slug":"A-Good-MiniLinux","date":"un66fin66","updated":"un00fin00","comments":true,"path":"post/A-Good-MiniLinux/","link":"","permalink":"https://www.yuyanlab.com/post/A-Good-MiniLinux/","excerpt":"TinyCore，一个有名的linux系统，以体积小而著称，在体验过着这个可爱的系统后，我爱上了它，但我们彼此之间还需要磨合。 地址：http://www.tinycorelinux.net/作者提供了三种版本的 Core，TinyCore，CorePlus 个人呢，更倾向于core版，非常轻量，无图形界面（果然还是Terminal最有爱）加载迅速（512mb,hdd虚拟机5s内完成启动）tinycore则是，加了图形界面的core版，coreplus则加入了更多组件 使用core/tinycore的真正意义，则是用它来打造自己心目中最理想的Linux。它提供了最基本的功能，vi编辑器，make工具，gcc编译器，wget下载器等等，但多余的累赘根本没有。它不像LFS一样，定制需要繁琐的交叉编译，也不像gentoo，虽然可定制化高，但毕竟已经有了自身的灵魂。 这个系统，值得尝试（但好像被设计了在虚拟机里跑，因此，引导方面还需我们自行定制）","text":"TinyCore，一个有名的linux系统，以体积小而著称，在体验过着这个可爱的系统后，我爱上了它，但我们彼此之间还需要磨合。 地址：http://www.tinycorelinux.net/作者提供了三种版本的 Core，TinyCore，CorePlus 个人呢，更倾向于core版，非常轻量，无图形界面（果然还是Terminal最有爱）加载迅速（512mb,hdd虚拟机5s内完成启动）tinycore则是，加了图形界面的core版，coreplus则加入了更多组件 使用core/tinycore的真正意义，则是用它来打造自己心目中最理想的Linux。它提供了最基本的功能，vi编辑器，make工具，gcc编译器，wget下载器等等，但多余的累赘根本没有。它不像LFS一样，定制需要繁琐的交叉编译，也不像gentoo，虽然可定制化高，但毕竟已经有了自身的灵魂。 这个系统，值得尝试（但好像被设计了在虚拟机里跑，因此，引导方面还需我们自行定制）PS：还有一个不是linux的小型系统，同样值得尝试：MenuetOS，http://www.menuetos.net","categories":[],"tags":[]},{"title":"Sphider搜索引擎的安装及Bug修复","slug":"Sphider-Bugs-Fix","date":"un33fin33","updated":"un00fin00","comments":true,"path":"post/Sphider-Bugs-Fix/","link":"","permalink":"https://www.yuyanlab.com/post/Sphider-Bugs-Fix/","excerpt":"Sphider呢，是一个极其简单易上手的搜索引擎，相比起Nutch之类的JAVA搜索引擎来说，降低了普通站长的使用难度，同时节省了对于机器的开销！虽然这个搜索引擎比较简陋（尤其前端23333）各种bug，以及万年不更新（大雾）等等，但我还是选择了它地址:http://www.sphider.eu/别问为什么，你去GitHub上看看就知道，不得不承认，上面有些源码写得的确好，但却没告诉我怎么用QAQ！！有些是解析json的，有些干脆把json当数据库用，有些还要重新编译php加入额外分词组件 etc. 好了以开始正题，如何去折腾这样一个搜索引擎~首先，作者提供的Installation已经无法使用 http://www.sphider.eu/docs.php#installation所以我来做一个具体的安装文档（我的运行环境 Nginx-1.11.1(SSL ON) Mysql5.5 PHP5.5)","text":"Sphider呢，是一个极其简单易上手的搜索引擎，相比起Nutch之类的JAVA搜索引擎来说，降低了普通站长的使用难度，同时节省了对于机器的开销！虽然这个搜索引擎比较简陋（尤其前端23333）各种bug，以及万年不更新（大雾）等等，但我还是选择了它地址:http://www.sphider.eu/别问为什么，你去GitHub上看看就知道，不得不承认，上面有些源码写得的确好，但却没告诉我怎么用QAQ！！有些是解析json的，有些干脆把json当数据库用，有些还要重新编译php加入额外分词组件 etc. 好了以开始正题，如何去折腾这样一个搜索引擎~首先，作者提供的Installation已经无法使用 http://www.sphider.eu/docs.php#installation所以我来做一个具体的安装文档（我的运行环境 Nginx-1.11.1(SSL ON) Mysql5.5 PHP5.5) 1，下载源码并解压至网站根目录，并使用phpmyadmin创建一个新的数据库/用户 2， 如果你是Linux用户的话执行以下命令，将timestamp的时间字段值设为默认0 .. #居然调到14….12cd sqlsed &quot;s/timestamp(14)/timestamp default 0/g&quot; tables.sql 3，将修改好的sql导入至数据库里，进入settings里修改database.php配置数据库，进入auth.php里修改管理员用户名及密码（默认admin/admin）。 至此配置基本完成，但还没完！ Sphider有严重的乱码问题，我们需要修改为默认UTF-8（这年头应该很少用GBK了吧） 1，先看看php.ini里写没写，一般在 /etc 或者 /usr/local/php/etc/下1grep -i &apos;default_charset&apos; php.ini 如果没有1default_charset = &quot;UTF-8&quot; 则需要加上 2，在前面提到的database.php里1$success = mysql_select_db ($database); 后面加上1mysql_query(&quot;set names &apos;utf8&apos;&quot;); 这里建议使用nano/vi编辑器，不要用sed/awk命令，与正则表达式有冲突。 3，在admin的spider.php里1$file = file_get_contents($url); 后面 换行 加上1$file=mb_convert_encoding($file,&quot;UTF-8&quot;,&quot;gbk,gb2312,UTF-8&quot;); 另外Sphider不支持https站点，不过这个有多种方案可以解决：nginx报头识别，修改本地hosts，等等的方法都可以实现啦~","categories":[],"tags":[]},{"title":"我又回来啦!","slug":"NewStart","date":"un33fin33","updated":"un00fin00","comments":true,"path":"post/NewStart/","link":"","permalink":"https://www.yuyanlab.com/post/NewStart/","excerpt":"原地满血复活2333333 这个假期,我将完整自己的linux知识体系,准备ccna考试,同时开始学习javascript.对博客将会有一个全新的优化和界面的更改,请期待~ 三个月内,发生了很多,我依然没有停止做死,而是尝试了一些新的机器prpr,也收获了一些经验.相关内容陆续会写的qaq 恩就这样吧~","text":"原地满血复活2333333 这个假期,我将完整自己的linux知识体系,准备ccna考试,同时开始学习javascript.对博客将会有一个全新的优化和界面的更改,请期待~ 三个月内,发生了很多,我依然没有停止做死,而是尝试了一些新的机器prpr,也收获了一些经验.相关内容陆续会写的qaq 恩就这样吧~","categories":[],"tags":[]},{"title":"针对HTTP/2的一些优化","slug":"something-about-ssl-handshake","date":"un66fin66","updated":"un00fin00","comments":true,"path":"post/something-about-ssl-handshake/","link":"","permalink":"https://www.yuyanlab.com/post/something-about-ssl-handshake/","excerpt":"HTTP/2现在来说已经不新鲜了,很多博客第一时间都用上了HTTP/2.但是里面有很多小细节值得推敲! 很多人打开chrome的控制台一看,WoW~ h2启用成功了.实际上并不然,这只代表了服务器给你发出了HTTP/2的CipherSuite,不一定真的启用了HTTP/2.但是我们可以用抓包工具来check.这个就不详细说明了.看使用文档去23333333但我们可以用更简单的方法来检验-&gt;SSLLABShttps://www.ssllabs.com这是一款在线的ssl检测的网站,权威且专业.检测完毕后,我们可以查看Handshake Simulation,从IE6到最新的Edge都有如果没有使用HTTP/2,则显示TLS 1.2 &gt; http/1.1如果HTTP/2启用成功,则显示TLS 1.2 &gt; h2 如果算法调不好,甚至还会出现Chrome和ff无法访问的情况如何正确的使用HTTP/2.关于握手算法我推荐1ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:AES128-GCM-SHA256:AES256-GCM-SHA384; 如果你使用了BoringSSL 我推荐JerryQu提供的算法1ssl_ciphers [ECDHE-ECDSA-AES128-GCM-SHA256|ECDHE-ECDSA-CHACHA20-POLY1305]:[ECDHE-RSA-AES128-GCM-SHA256|ECDHE-RSA-CHACHA20-POLY1305]:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:AES128-GCM-SHA256:AES256-GCM-SHA384:DES-CBC3-SHA; 另外,博主发现了几个BoringSSL的bug,希望大家注意!1:BoringSSL下,nginx-ct模块目前处于失效状态,无法启用2:安装好后编译nginx时会报错|| n == SSL_R_NO_CIPHERS_SPECIFIED /*183*/解决方案 nano ./src/event/ngx_event_openssl.c ,然后删除这一行另外,关于食用BoringSSL的方法,以及另外的一个BUG.可以查看JerryQu的文章https://imququ.com/post/optimize-ssl-ciphers-with-boringssl.html","text":"HTTP/2现在来说已经不新鲜了,很多博客第一时间都用上了HTTP/2.但是里面有很多小细节值得推敲! 很多人打开chrome的控制台一看,WoW~ h2启用成功了.实际上并不然,这只代表了服务器给你发出了HTTP/2的CipherSuite,不一定真的启用了HTTP/2.但是我们可以用抓包工具来check.这个就不详细说明了.看使用文档去23333333但我们可以用更简单的方法来检验-&gt;SSLLABShttps://www.ssllabs.com这是一款在线的ssl检测的网站,权威且专业.检测完毕后,我们可以查看Handshake Simulation,从IE6到最新的Edge都有如果没有使用HTTP/2,则显示TLS 1.2 &gt; http/1.1如果HTTP/2启用成功,则显示TLS 1.2 &gt; h2 如果算法调不好,甚至还会出现Chrome和ff无法访问的情况如何正确的使用HTTP/2.关于握手算法我推荐1ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:AES128-GCM-SHA256:AES256-GCM-SHA384; 如果你使用了BoringSSL 我推荐JerryQu提供的算法1ssl_ciphers [ECDHE-ECDSA-AES128-GCM-SHA256|ECDHE-ECDSA-CHACHA20-POLY1305]:[ECDHE-RSA-AES128-GCM-SHA256|ECDHE-RSA-CHACHA20-POLY1305]:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:AES128-GCM-SHA256:AES256-GCM-SHA384:DES-CBC3-SHA; 另外,博主发现了几个BoringSSL的bug,希望大家注意!1:BoringSSL下,nginx-ct模块目前处于失效状态,无法启用2:安装好后编译nginx时会报错|| n == SSL_R_NO_CIPHERS_SPECIFIED /*183*/解决方案 nano ./src/event/ngx_event_openssl.c ,然后删除这一行另外,关于食用BoringSSL的方法,以及另外的一个BUG.可以查看JerryQu的文章https://imququ.com/post/optimize-ssl-ciphers-with-boringssl.html","categories":[],"tags":[]},{"title":"一个Shadowsock Bug","slug":"A-Shadowsock-Bug","date":"un55fin55","updated":"un00fin00","comments":true,"path":"post/A-Shadowsock-Bug/","link":"","permalink":"https://www.yuyanlab.com/post/A-Shadowsock-Bug/","excerpt":"这个bug发现于安装shadowsock-qt5客户端时 由于debian没有ppa源的支持，我们只能用dpkg手动构建shadowsock-qt5，那么问题来了…..1sudo apt-get install qt5-qmake qtbase5-dev libqrencode-dev libqtshadowsocks-dev libappindicator-dev libzbar-dev libbotan1.10-dev debian源里木有这个libqtshadowsocks-dev QAQ 好在Github有libqtshadowsocks https://github.com/shadowsocks/libQtShadowsocks12sudo apt-get install qt5-qmake qtbase5-dev libbotan1.10-devdpkg-buildpackage -uc -us -b 恩，正常，但是安装时 报错了12dpkg-split：错误：读取 libqtshadowsocks 时出错: 是一个目录 #理论上包管理器已经纠正dpkg:../../src/unpack.c:123:deb_reassemble: 内部错误：unexpected exit status 2 from dpkg-split 查找到两个bug反映，可以推测是ss的问题 至此在debian下构建ss客户端只能通过手动编译的方式，强行PPA源的方式不推荐，也不期望…..","text":"这个bug发现于安装shadowsock-qt5客户端时 由于debian没有ppa源的支持，我们只能用dpkg手动构建shadowsock-qt5，那么问题来了…..1sudo apt-get install qt5-qmake qtbase5-dev libqrencode-dev libqtshadowsocks-dev libappindicator-dev libzbar-dev libbotan1.10-dev debian源里木有这个libqtshadowsocks-dev QAQ 好在Github有libqtshadowsocks https://github.com/shadowsocks/libQtShadowsocks12sudo apt-get install qt5-qmake qtbase5-dev libbotan1.10-devdpkg-buildpackage -uc -us -b 恩，正常，但是安装时 报错了12dpkg-split：错误：读取 libqtshadowsocks 时出错: 是一个目录 #理论上包管理器已经纠正dpkg:../../src/unpack.c:123:deb_reassemble: 内部错误：unexpected exit status 2 from dpkg-split 查找到两个bug反映，可以推测是ss的问题 至此在debian下构建ss客户端只能通过手动编译的方式，强行PPA源的方式不推荐，也不期望…..","categories":[],"tags":[]},{"title":"谨贺新年","slug":"2016NewYear","date":"un11fin11","updated":"un00fin00","comments":true,"path":"post/2016NewYear/","link":"","permalink":"https://www.yuyanlab.com/post/2016NewYear/","excerpt":"写点什么好呢？….. 首先，祝大家新年快乐！ (〃＾∇＾) 博客差不多快一年了，跟上了全民https的潮流，服务器也从bandwagonhost迁移到conoha最终迁移到现在的Linode，从typecho转向了hexo，并组建了御坂网络，构建了具有监控能力的小型集群。 其实主题已经开发完成，但由于平板兼容性和css&amp;js文件过大的原因，未能启用，故选择了当前主题，并进行了优化。感谢主题作者提供的后续支持。","text":"写点什么好呢？….. 首先，祝大家新年快乐！ (〃＾∇＾) 博客差不多快一年了，跟上了全民https的潮流，服务器也从bandwagonhost迁移到conoha最终迁移到现在的Linode，从typecho转向了hexo，并组建了御坂网络，构建了具有监控能力的小型集群。 其实主题已经开发完成，但由于平板兼容性和css&amp;js文件过大的原因，未能启用，故选择了当前主题，并进行了优化。感谢主题作者提供的后续支持。","categories":[],"tags":[]},{"title":"新年新气象，全新的服务器环境","slug":"new-docker","date":"un44fin44","updated":"un00fin00","comments":true,"path":"post/new-docker/","link":"","permalink":"https://www.yuyanlab.com/post/new-docker/","excerpt":"终于把这个坑填了，趁着元旦3天假期。CentOS6.6 + Nginx-1.8.0(with spdy3.1) + MySQL5.5 + PHP7.0.1nginx+spdy3.1的速度感觉的确是比apache快的，尤其是启用了gzip之后。好多人吐槽窝的网站环境比较奇葩（nginx去编译，而MySQL和PHP用包管理器），但这是按窝的偏好来配置的23333333。包管理器方便省时，nginx编译又可以增加一些其他的模块。至于为何不编译nginx1.9.9 with HTTP/2。原因很简单，ssl加密算法兼容性还不够好。感谢epel,remi,atomic源的支持。","text":"终于把这个坑填了，趁着元旦3天假期。CentOS6.6 + Nginx-1.8.0(with spdy3.1) + MySQL5.5 + PHP7.0.1nginx+spdy3.1的速度感觉的确是比apache快的，尤其是启用了gzip之后。好多人吐槽窝的网站环境比较奇葩（nginx去编译，而MySQL和PHP用包管理器），但这是按窝的偏好来配置的23333333。包管理器方便省时，nginx编译又可以增加一些其他的模块。至于为何不编译nginx1.9.9 with HTTP/2。原因很简单，ssl加密算法兼容性还不够好。感谢epel,remi,atomic源的支持。","categories":[],"tags":[]},{"title":"体验Windows service 2012 R2/ /一些其他内容更新","slug":"win-s-2012-r2","date":"un66fin66","updated":"un00fin00","comments":true,"path":"post/win-s-2012-r2/","link":"","permalink":"https://www.yuyanlab.com/post/win-s-2012-r2/","excerpt":"","text":"1. Nginx不在需要手动patch去启用http/2了 2. IIS8.5/10安装需要2GB以上内存（被坑了…）IIS10现已支持http/2 3. 各Linux发行版的pcre与zlib库安装方法不一 |– For Ubuntu/Debian apt-get install zlib1g.devapt-get install libpcre3 libpcre3-dev |– For RedHat/CentOS yum install zlib-develyum install pcre-devel |– For Freebsd 自行编译吧……天朝的网络不适合pkg…更何况10.1不自带pkg ##体验Windows service 2012 R2 一直说把静态文件搬回国内，阿里云流量计费100mb带宽很合算，走443无需备案 然而IIS需要2Gb以上内存，放弃……(nginx Windows 组件太少) 转向debian，除了http2问题外，其他都好，下周重新编译，改用spdy3.1","categories":[],"tags":[]},{"title":"给树莓派滚到了Jessie","slug":"update-Jessie","date":"un55fin55","updated":"un00fin00","comments":true,"path":"post/update-Jessie/","link":"","permalink":"https://www.yuyanlab.com/post/update-Jessie/","excerpt":"难得周六不补课，折腾一下小pi，性能优化一下。这次是在pi2上进行的，老的b+版编译到kernel4.3内核后，操作还好好的，然后滚Jessie的时候就滚挂了，原因不详……… 1. 移除web相关组件 2. 精简系统 3. 升级系统 4. 再次精简优化 5. 配置vim 6. 无 #差点把桌面换成了gnome","text":"难得周六不补课，折腾一下小pi，性能优化一下。这次是在pi2上进行的，老的b+版编译到kernel4.3内核后，操作还好好的，然后滚Jessie的时候就滚挂了，原因不详……… 1. 移除web相关组件 2. 精简系统 3. 升级系统 4. 再次精简优化 5. 配置vim 6. 无 #差点把桌面换成了gnome 上次的lamp拖得小pi每次top一下都吓死人，先把这个东西移除了吧……1234sudo apt-get autoremove apache2sudo apt-get autoremove mysqlsudo apt-get autoremove php5sudo apt-get remove phpmyadmin 精简系统，把python，pythongame，小奶瓶，wifite都移除掉，用法如上。升级系统，换源，这次tuna源炒鸡卡，100kb的速度……下载依赖总共差不多花了2个小时……以下是具体食用方法123456789sudo apt-get updatesudo apt-get upgradesudo apt-get dist-upgrade``` 进入`/etc/apt/sources.list`把所有wheezy字符换成jessie，重复以上操作``` sudo apt-get updatesudo apt-get upgradesudo apt-get dist-upgrade 中途会提示很多是否保留源配置，更具自己的需要选择即可，也可以查看更新内容有提示说是否是从ssh操作，需如实选择，否则会boom 重启sudo reboot 继续精简，系统居然少了许多组件，只需要移除python相关即可 安装vim，vim是树莓派上能用的编辑器中，最好用的一个了…… sudo apt-get install vim 然后开始塞插件233333333","categories":[],"tags":[]},{"title":"Shell学习笔记(1)","slug":"shell-study1","date":"un00fin00","updated":"un00fin00","comments":true,"path":"post/shell-study1/","link":"","permalink":"https://www.yuyanlab.com/post/shell-study1/","excerpt":"","text":"为何要学习Shell，不说了，懒人必备，大多数一键安装包都是用shell写的，今天开坑了。简单的大家都会玩，一个简单的例子说明一切For example 重启一下lamp12345#!/bin/bashservice httpd restartservice mysqld restartservice php-fpm restartecho &quot;Lamp restart complete&quot; 这样大家都会，所以我们所要学习的，就是交互式shell，比如今天学会的这个：12345678#!/bin/bashPIDNUM=$(pgrep httpd | wc -l) #检测apache进程if [[ $PIDNUM -eq 0 ]];then #检测apache的pid状态 echo &quot;Apache is stopped.&quot; service httpd startelse echo &quot;Apache is running.&quot;fi 这样我们的脚本就聪明多了这次学到的东西，就是用$去定义一个活动，（检查pid 启动apache），以及if条件句的使用。当然我们还可以输出一个apache的pid号，方便使用1echo &quot;Proccess number is $PIDNUM.&quot; 23333333","categories":[],"tags":[]},{"title":"ghost博客新玩法&迁移,备份教程","slug":"ghost-play","date":"un66fin66","updated":"un00fin00","comments":true,"path":"post/ghost-play/","link":"","permalink":"https://www.yuyanlab.com/post/ghost-play/","excerpt":"告别反人类的forever吧 前几天把千反田迁去了搬瓦工……搬迁时出了很多问题。现在总结一下如何搬迁……","text":"告别反人类的forever吧 前几天把千反田迁去了搬瓦工……搬迁时出了很多问题。现在总结一下如何搬迁……搬迁前的准备：首先，你得停掉ghost，如果是forever的话 forever stop index.jsghost博客的数据存放在./content/data里，先把这两个文件拷走，然后再把themes文件拷走，image也一样，然后把上面拷走的文件打包。把打好包的文件sftp到目标服务器，假设IP为233.233.233.233压缩包为kotori.zip的话123sftp root@233.233.233.233put ./kotori.zip /root/bye 好了，在新服务器上的姿势。安装nodejs，安装ghost……官方文档已经说的很清楚了：nodejs安装 ghost安装 挑喜欢的版本安装 在npm install --production后，不要急着npm start把之前打好包的文件恢复到原位然后npm start 注意：任何备份/恢复不完全都可能导致500 访问正常或许这时候你会使用forever然而问题来了，变成了一个新的博客，什么也没有？！？退出forever，用npm start启动，又正常了…… 这时候，引入一个好玩的东西，screen。这是Linux下一个好用的后台处理程序，通常ssh登陆后不久即掉线，相应进程会终止，而screen就骗过ssh，保持会话安装123yum install screenscreen -S ghostnpm start 让这个会话后台运行Ctrl+a d这时你可以关掉putty窗口了 下次登入时1screen -r ghost 回到之前screen会话，会看到一堆请求更改信息orz。至于性能，以及会不会导致内存和swap爆满还有待测试。目前效果不错","categories":[],"tags":[]},{"title":"Visual Studio Code初体验","slug":"VSC","date":"un00fin00","updated":"un00fin00","comments":true,"path":"post/VSC/","link":"","permalink":"https://www.yuyanlab.com/post/VSC/","excerpt":"今年早期的时候，巨硬发布了这款编辑器，跨平台，支持多种编程语言，据说未来还会提供插件支持（像Atom一样）无奈系统装的是32bit的，无缘Atom（主要是懒得折腾）一开始是打算Sublime Text的，后来有个小伙伴推荐了这个编辑器，（据说更专业，看起来也是，嗯 ∑(O_O;) ）","text":"今年早期的时候，巨硬发布了这款编辑器，跨平台，支持多种编程语言，据说未来还会提供插件支持（像Atom一样）无奈系统装的是32bit的，无缘Atom（主要是懒得折腾）一开始是打算Sublime Text的，后来有个小伙伴推荐了这个编辑器，（据说更专业，看起来也是，嗯 ∑(O_O;) ） Linux通用安装方式(Ubuntu除外)下载地址：https://www.visualstudio.com/products/code-vs挑自己的系统下载，挺小的下载完后，mv到你想放的地方，然后unzip，点击.code来启动最好把这个code给 ln -s到/usr/local/bin/code里，方便启动当然你也可以 code 文件位置 来直接编辑文件最好chmod +x code一下 Ubuntu百度一下一堆，非要另类去搞make…… 第一次使用这种专业编辑器，感觉太好用了，自己补全，自动排版，还具有很多提示！以前用nano写东西好煞笔呀如果你wget一下tris.pw当中的网页看看，代码排版一团糟，web软件的conf也是经常因排版问题不识别……有时候还会掉括号（多层负载均衡的的配置文件还要一个个的排错简直要疯掉……）wget命令wget -m -e robots=off -U &quot;Mozilla/5.0 (Windows; U; Windows NT 5.1; zh-CN; rv:1.9.1.6) Firefox/3.5.6&quot; &quot;http://网站域名/&quot;手机端改下UI即可（这个可以用来镜像静态站点，并且可以无视robots.txt) PS:关于debian没有预置intel网卡驱动的解决方案起初尝试的方案:去Intel官网寻找相关内容，得到了一下两个页面http://www.intel.com/support/cn/wireless/wlan/sb/cs-034398.htm?wapkw=iwlwifi+-1000-5&amp;_ga=1.176836653.927392567.1439982352https://wireless.wiki.kernel.org/en/users/Drivers/iwlwifi高高兴兴的去下载，然后只得到了5个当中的2个，当然，这两个页面可能对你的机器有用接下来去wiki上找找，得到方案sudo apt-get install firmware-iwlwifisudo modprobe -r iwlwifi ; modprobe iwlwifi收工","categories":[],"tags":[]},{"title":"Hi Jessie","slug":"Jessie","date":"un44fin44","updated":"un00fin00","comments":true,"path":"post/Jessie/","link":"","permalink":"https://www.yuyanlab.com/post/Jessie/","excerpt":"一年半前的一天，窝认识到了一个叫Raspbian的系统，基于Wheezy打造，LXDE桌面，从此走向一条不归路。一年半后，开始折腾i386版的Debian。此时已经是Jessie了，镜像真够吓人的，3.7GB。我一直费解官方为什么预置一大堆桌面环境而不预置个Intel网卡驱动……安装很简单，并且有图形安装，百度教程一大堆既然镜像里有KDE干脆就装了吧(实在是不喜欢Gnome和Debian Desktop Environment风格)基本没问题，Intel驱动wiki上也有解决办法：https://wiki.debian.org/iwlwifi安装一下fcitx，文泉驿，KDE中文支持123sudo apt-get install fcitx fcitx-googlepinyinsudo apt-get install kde-l10n-zh*sudo apt-get install ttf-wqy-zenhei 安装Chrome并配置Flash。安装Mplayer。安装git。代码编辑器选择了Visual Studio Code 和Sublime text微软还是良心的,vs-code免费好用且支持Linux:https://www.visualstudio.com/products/code-vs 基本上也就玩玩这些，其他也没什么用的了orz购自淘宝销量最高的山寨(ShineDisk 64GB)的ssd还是不错的2333333","text":"一年半前的一天，窝认识到了一个叫Raspbian的系统，基于Wheezy打造，LXDE桌面，从此走向一条不归路。一年半后，开始折腾i386版的Debian。此时已经是Jessie了，镜像真够吓人的，3.7GB。我一直费解官方为什么预置一大堆桌面环境而不预置个Intel网卡驱动……安装很简单，并且有图形安装，百度教程一大堆既然镜像里有KDE干脆就装了吧(实在是不喜欢Gnome和Debian Desktop Environment风格)基本没问题，Intel驱动wiki上也有解决办法：https://wiki.debian.org/iwlwifi安装一下fcitx，文泉驿，KDE中文支持123sudo apt-get install fcitx fcitx-googlepinyinsudo apt-get install kde-l10n-zh*sudo apt-get install ttf-wqy-zenhei 安装Chrome并配置Flash。安装Mplayer。安装git。代码编辑器选择了Visual Studio Code 和Sublime text微软还是良心的,vs-code免费好用且支持Linux:https://www.visualstudio.com/products/code-vs 基本上也就玩玩这些，其他也没什么用的了orz购自淘宝销量最高的山寨(ShineDisk 64GB)的ssd还是不错的2333333","categories":[],"tags":[]},{"title":"yum部署JDK+Tomcat+MySQL环境","slug":"10","date":"un55fin55","updated":"un00fin00","comments":true,"path":"post/10/","link":"","permalink":"https://www.yuyanlab.com/post/10/","excerpt":"这年头不会配置tomcat都说不过去了……于是配置了一下，计划在上面扔个JSP网站 还好不是编译安装，不过在搬瓦工超售VPS上部署这个东西还是有点顾虑的23333","text":"这年头不会配置tomcat都说不过去了……于是配置了一下，计划在上面扔个JSP网站 还好不是编译安装，不过在搬瓦工超售VPS上部署这个东西还是有点顾虑的233331：启用atomic源，好多源软件都太老了1wget -q -O - http://www.atomicorp.com/installers/atomic | sh 2：yum安装rzsz，JDK，MySQL12yum update -yyum install lrzsz java-1.7.0-openjdk* mysql-server* 别忘了设置mysql root密码1/usr/bin/mysqladmin -u root password 密码 3：安装Tomcat7（安装8.0也可以）/usr/local/lib123456wget http://mirrors.hust.edu.cn/apache/tomcat/tomcat-7/v7.0.64/bin/apache-tomcat-7.0.64.tar.gztar -zxvf apache-tomcat-7.0.64.tar.gzmv apache-tomcat-7.0.64 tomcat7 #重命名文件夹chmod +x tomcat7cd tomcat7cd conf 编辑server.xml在最后面是修改域名端口等等，仅调试应用的话默认即可12cd /usr/local/lib/tomcat7/binsh startup.sh 启动完成防火墙放行8080（default端口） 1/sbin/iptables -I INPUT -p tcp --dport 8080 -j ACCEPT 把JSP程序放入webapp文件夹里，输入IP:8080即可访问应用 通过修改server.xml可以把8080改为80，8443改为443，启用方法比较简单 PS: 折腾tomcat需要在2G内存的vps/独立服务器上进行，亲测搬瓦工512m在部署b3log后内存和swap均爆炸","categories":[],"tags":[]},{"title":"关于服务器无法使用SMTP发件的常见问题和解决方法","slug":"9","date":"un55fin55","updated":"un00fin00","comments":true,"path":"post/9/","link":"","permalink":"https://www.yuyanlab.com/post/9/","excerpt":"本文部分内容是总结网友滴……先声明一下啦！把博客无法回复邮件提示的问题解决了，同时总结一下 另外博客换了个色系，应该叫樱粉吧(#ee6e73)……炒鸡喜欢的说(❁´◡`❁)✲ﾟ 不废话了，开始正题：1 . 由于PHP禁用了fsockopen和pfsockopen函数导致的解决方法: nano /etc/php.ini①搜索allow_url_fopen如果搜出来是allow_url_fopen = off需要把off换成on，注意空格！②搜索extension=php_openssl.dll如果前面有;就去掉;。③搜索disable_functions往后看，如果存在pfsockopen的话就删掉。④重启server服务，下次不kill进程了2 . 来着汪汪姐的提示:部分IDC封禁25端口，还好conoha比较良心，更换为465发信即可（需要邮件服务器商支持）3 . 发件程序问题，比如无名智者的云签到程序就出现了问题，信件被拒收，返回码500 bad syntax这是程序的邮箱兼容问题4 . 邮箱提供商问题，如果是用个人邮箱，需开通smtp发信服务，默认是不开通的，如果是企业邮箱的其余问题，直接轰炸客服即可5 . iptables防火墙问题，需放行OUTPUT的25或者465端口。6 . 目录的可写性，cd到CommentToMail文件夹，然后chmod 777 *.*和chmod 777 ./log/* 感谢吟梦的提示:换套源码试试，也感谢汪汪姐的提示:试试465","text":"本文部分内容是总结网友滴……先声明一下啦！把博客无法回复邮件提示的问题解决了，同时总结一下 另外博客换了个色系，应该叫樱粉吧(#ee6e73)……炒鸡喜欢的说(❁´◡`❁)✲ﾟ 不废话了，开始正题：1 . 由于PHP禁用了fsockopen和pfsockopen函数导致的解决方法: nano /etc/php.ini①搜索allow_url_fopen如果搜出来是allow_url_fopen = off需要把off换成on，注意空格！②搜索extension=php_openssl.dll如果前面有;就去掉;。③搜索disable_functions往后看，如果存在pfsockopen的话就删掉。④重启server服务，下次不kill进程了2 . 来着汪汪姐的提示:部分IDC封禁25端口，还好conoha比较良心，更换为465发信即可（需要邮件服务器商支持）3 . 发件程序问题，比如无名智者的云签到程序就出现了问题，信件被拒收，返回码500 bad syntax这是程序的邮箱兼容问题4 . 邮箱提供商问题，如果是用个人邮箱，需开通smtp发信服务，默认是不开通的，如果是企业邮箱的其余问题，直接轰炸客服即可5 . iptables防火墙问题，需放行OUTPUT的25或者465端口。6 . 目录的可写性，cd到CommentToMail文件夹，然后chmod 777 *.*和chmod 777 ./log/* 感谢吟梦的提示:换套源码试试，也感谢汪汪姐的提示:试试465","categories":[],"tags":[]},{"title":"嗨起来！nginx-1.9.3 ＋ HTTP/2.0","slug":"8","date":"un00fin00","updated":"un00fin00","comments":true,"path":"post/8/","link":"","permalink":"https://www.yuyanlab.com/post/8/","excerpt":"终于弄好了—-看了起司博客的这篇文章http://www.tntsec.com/487.html后开始折腾 在窝的vps上，起司博客的文章并不适用，执行完成后nginx还是老版本，网页访问返回信息也是老版本的nginx-1.8.0，无奈自己研究…… 终于在第5遍的时候，折腾成功了！注意这是全新安装使用纯净系统（当然你把nginx和openssl卸载干净也可以）。另外HTTP/2需要一张SSL证书，推荐 let’s encrypt。","text":"终于弄好了—-看了起司博客的这篇文章http://www.tntsec.com/487.html后开始折腾 在窝的vps上，起司博客的文章并不适用，执行完成后nginx还是老版本，网页访问返回信息也是老版本的nginx-1.8.0，无奈自己研究…… 终于在第5遍的时候，折腾成功了！注意这是全新安装使用纯净系统（当然你把nginx和openssl卸载干净也可以）。另外HTTP/2需要一张SSL证书，推荐 let’s encrypt。1 先安装必要的工具，免得过会儿麻烦1yum install gcc patch pcre-devel zlib-devel 2 安装openssl-1.0.2d这是所需最低版本1234567cd /usr/local/srcwget http://www.openssl.org/source/openssl-1.0.2d.tar.gztar -zxvf openssl-1.0.2d.tar.gzcd openssl-1.0.2d./config #差什么装什么makemake install 3 安装nginx/usr/local123456789101112wget http://nginx.org/download/nginx-1.9.3.tar.gztar -zxvf nginx-1.9.3.tar.gzcd nginx-1.9.3.tar.gzwget http://nginx.org/patches/http2/patch.http2.txtpatch -p1 --dry-run &lt; patch.http2.txtpatch -p1 &lt; patch.http2.txt./configure --with-http_ssl_module --with-http_v2_module --with-debug --with-openssl=/usr/local/src/openssl-1.0.2dmakemake install 结束时最好保存个截图4 启动12cd /usr/local/nginx/sbin./nginx 5 配置，建议参考起司博客的文章重启nginx，kill进程，然后再./nginx（可以去网上找脚本，博主太懒了）6 检验去github把这个程序拖下来https://github.com/rauchg/chrome-spdy-indicator解压，在chrome的程序拓展中，进入开发者模式，加载解压出来的文件夹，刷新网页就可以看到闪电标志的HTTP/2，如图所示 折腾日志： 远没想象中的简单，第一次，…编译安装openssl-1.0.2d [OK]…编译nginx-1.9.3 [FAILED] 缺少pcre-devel，好吧 yum一下…再次编译安装nginx-1.9.3 [SUCCESS] 但安装到了一个神秘的地方，连find也找不到，history更是无解………失败 第二次，备份文件，重置系统，全新安装！…编译安装openssl-1.0.2d [OK]…编译nginx-1.9.3 [FAILED] 缺少pcre-devel，gcc，gzip等等一大堆，窝忍了，yum一下…再次编译安装nginx-1.9.3 [SUCCESS]，把输出截图了下来，配置文件弄起来，可以用service nginx ……的命令了，虽然nginx -v还是找不到…书写conf文件，incloud到nginx.conf里，重启……[FAILED]居然说读不懂配置文件？！？，然而并没有什么错误…………估计是缺了什么东西，或者编译时出bug，毕竟是开发版，orz 第三次，按照起司博客yum安装lnmp的方法安装了lnmp，再进行升级，[FAILED]还是老版本…… 第四次，发现没有make install步骤，orz重新来……但是，还是[FAILED]了，无法启用http2…… 第五次，按照标志编译安装方法，复制到tty上，成功了！ 失败之处在于，iOS上的Serverauditor软件排版bug，导致未成功加载模块，导致编译失败，orz","categories":[],"tags":[]},{"title":"使用云数据库搭建网站集群","slug":"6","date":"un44fin44","updated":"un00fin00","comments":true,"path":"post/6/","link":"","permalink":"https://www.yuyanlab.com/post/6/","excerpt":"","text":"这两天腾讯云数据库打折，6元6月，手贱入了一个，于是乎搭建一个网站集群 用的是某宝垃圾香港空间 1.上传网站源码至两个空间，DNS解析到两个空间，空间绑定域名，腾讯云数据库开启外网地址。2.用第一个空间商赠送的三级域名安装到第一个空间，连接云数据库，完成后进入后台改地址。3.用第二个空间商赠送的三级域名在第二个空间连接数据库，自动识别完成。 搭建完成，ping时会ping到不同的地址。 但大家会感觉非常慢，所以，如果你的服务器在腾讯云内部，那感受会不一样，速度会非常快，而且安全。否则不建议这样玩！","categories":[],"tags":[]},{"title":"树莓派(RaspberryPi)搭建服务器集群，负载均衡","slug":"club","date":"un55fin55","updated":"un00fin00","comments":true,"path":"post/club/","link":"","permalink":"https://www.yuyanlab.com/post/club/","excerpt":"树莓派的性能实在不行，做服务器时很卡，如果是服务器集群将会如何呢？ 实验思路，一台2pi做负载均衡和后端，另外一台b+只做后端。先更改固定IP这里负载均衡使用nginx，后端采用Apache。先安装后端，并更改端口，窝改为81，防止冲突，在httpd.conf的前半部分把Listen 80改为Listen 81并重启机子，因为树莓派没法单独重启Apache安装nginx1sudo apt-get install nginx 打开nginx配置文件nginx.conf/也有可能是default.conf。看实际情况配置12345678910111213141516httpd &#123; upstream 192.168.1.119 &#123; server 192.168.1.120:80; server 192.168.1.119:80; #负载目标，按需增加 &#125; &#125; server&#123; listen 80; server_name 192.168.1.119; location / &#123; proxy_pass http://127.0.0.1:81; #反代Apache proxy_set_header Host $host; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_buffering off; #禁用缓存，否则没效果，反而更慢 &#125; &#125; 文件结束，重启机子，同时在b+上部署lamp。 最终效果不明显，依然卡，但由于未进行MySQL主从同步，内容不一致，由此看出负载均衡起效果了","text":"树莓派的性能实在不行，做服务器时很卡，如果是服务器集群将会如何呢？ 实验思路，一台2pi做负载均衡和后端，另外一台b+只做后端。先更改固定IP这里负载均衡使用nginx，后端采用Apache。先安装后端，并更改端口，窝改为81，防止冲突，在httpd.conf的前半部分把Listen 80改为Listen 81并重启机子，因为树莓派没法单独重启Apache安装nginx1sudo apt-get install nginx 打开nginx配置文件nginx.conf/也有可能是default.conf。看实际情况配置12345678910111213141516httpd &#123; upstream 192.168.1.119 &#123; server 192.168.1.120:80; server 192.168.1.119:80; #负载目标，按需增加 &#125; &#125; server&#123; listen 80; server_name 192.168.1.119; location / &#123; proxy_pass http://127.0.0.1:81; #反代Apache proxy_set_header Host $host; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_buffering off; #禁用缓存，否则没效果，反而更慢 &#125; &#125; 文件结束，重启机子，同时在b+上部署lamp。 最终效果不明显，依然卡，但由于未进行MySQL主从同步，内容不一致，由此看出负载均衡起效果了","categories":[],"tags":[]},{"title":"Linux服务器防护加固策略(四)部署安全狗，博主初试(体验)安全狗","slug":"5","date":"un44fin44","updated":"un00fin00","comments":true,"path":"post/5/","link":"","permalink":"https://www.yuyanlab.com/post/5/","excerpt":"安全狗是一款服务器安全软件，窝也是刚刚得知，看了起司博客的文章:tntsec.com/index.php/archives/34.html后,决定试一试（因为看起来比云锁灵活，且安全性比自己配置的更高）但原理与云锁有许多不同。食用方法可以看上面起司博客的文章，也可以登陆安全狗官网http://safedog.cn,详细使用说明点此查看其他不过多赘述，窝来讲讲窝碰到的问题","text":"安全狗是一款服务器安全软件，窝也是刚刚得知，看了起司博客的文章:tntsec.com/index.php/archives/34.html后,决定试一试（因为看起来比云锁灵活，且安全性比自己配置的更高）但原理与云锁有许多不同。食用方法可以看上面起司博客的文章，也可以登陆安全狗官网http://safedog.cn,详细使用说明点此查看其他不过多赘述，窝来讲讲窝碰到的问题PS:安装前尽可能把之前所用的安全服务关闭（如ufw）此软件基于iptables①与一些面板兼容性不好，我用的wdcp就出现了很多问题1:由于整台服务器的邮件系统有问题（无论是博客还是安全狗，均无法发送邮件，探针却可以）2:Apache路径需要自己修改…3:一些防护措施有冲突②与部分电脑软件相容性不大好（可以理解，Linux偏要弄图形也是难为开发者了）大家尽量选择putty之类的软件，窝平板上的控制软件就用不了③软件所提供的建议仅供参考比如:探针识别成了马，非要叫我删掉……然后非要禁ping，海外vps禁ping有些时候出了问题不大好处理","categories":[],"tags":[]},{"title":"Typecho部署调用Disqus评论系统","slug":"disqus","date":"un00fin00","updated":"un00fin00","comments":true,"path":"post/disqus/","link":"","permalink":"https://www.yuyanlab.com/post/disqus/","excerpt":"在日常博客千反田建立以后，[Trii Hsia][1]吐槽道没有评论系统，日常博客没有评论系统的确不够欢乐，看小伙伴们都在用Disqus。不如就来部署一个吧。①注册一个disqus账号。②在sitting选项里有个Add Disqus To Site，他会提示注册一个disqus.com的二级域名，注册即可。③进入二级域名站点，进入sittings，在点击install，这时我们选择Universal Code(通用代码)。将第一块代码复制，并把Typecho主题文件夹下comments.php里的内容替换掉即可(事先请备份)。查看你的站点你就会发现评论模块变了④个人优化，例：调用中文，评论设置(自己看着办吧)PS:由于[https://chitanda.org][2]用的主题的血统不正，page.php里的内容一头雾水，强加的评论模块放在哪个位置都无法调用，无奈放入footer.php里，导致整站都可以评论，不过也没什么不好 ∑(O_O；)另外用五分钟把Chitanda.org部署上了SSL。这个是必须的！但Alleysakura.com并未启用，作为一个技术性站点，评论不打算使用第三方系统，数据本地储存，应该有个技术站该有的样子目前https://chitanda.org已安装正统ghost [1]: http://hsia.in [2]: https://chitanda.org","text":"在日常博客千反田建立以后，[Trii Hsia][1]吐槽道没有评论系统，日常博客没有评论系统的确不够欢乐，看小伙伴们都在用Disqus。不如就来部署一个吧。①注册一个disqus账号。②在sitting选项里有个Add Disqus To Site，他会提示注册一个disqus.com的二级域名，注册即可。③进入二级域名站点，进入sittings，在点击install，这时我们选择Universal Code(通用代码)。将第一块代码复制，并把Typecho主题文件夹下comments.php里的内容替换掉即可(事先请备份)。查看你的站点你就会发现评论模块变了④个人优化，例：调用中文，评论设置(自己看着办吧)PS:由于[https://chitanda.org][2]用的主题的血统不正，page.php里的内容一头雾水，强加的评论模块放在哪个位置都无法调用，无奈放入footer.php里，导致整站都可以评论，不过也没什么不好 ∑(O_O；)另外用五分钟把Chitanda.org部署上了SSL。这个是必须的！但Alleysakura.com并未启用，作为一个技术性站点，评论不打算使用第三方系统，数据本地储存，应该有个技术站该有的样子目前https://chitanda.org已安装正统ghost [1]: http://hsia.in [2]: https://chitanda.org","categories":[{"name":"黑科技","slug":"黑科技","permalink":"https://www.yuyanlab.com/categories/黑科技/"}],"tags":[]},{"title":"树莓派(RaspberryPi)下LAMP服务器性能测试及实际生产 ","slug":"test","date":"un11fin11","updated":"un00fin00","comments":true,"path":"post/test/","link":"","permalink":"https://www.yuyanlab.com/post/test/","excerpt":"这东西性能情况如何呢？DDOS就不进行测试了，意义不大，天朝的网络上行质量放在那。正常打开都难更别说DDOS了…①首先是在完全运行LAMP时，内存占用达到50% 而平常跑图形也就30％，开HTML5网页网站达到70％ –LAMP的内存占用还是十分可观的，利用free命令和探针说明了这点，上图 ②然后是整数运算，浮点运算以及磁盘读写，探针选择与几家大型vps商的服务器进行比较，差距明显2Pi的性能是四核ARM900MHz 1GbRAM,与实际数据比例差不多，io读写尽管用了高速TF卡但敌不过Raid阵列Unixbench跑分测试UnixBench是服务器常用的性能综合测试软件，在广大站长圈子里广泛流传，今天用树莓派来跑下这个试试，看看Pi2的实际性能情况这个软件从浮点，整数，io，哈希等等进行了单线程，多线程测试","text":"这东西性能情况如何呢？DDOS就不进行测试了，意义不大，天朝的网络上行质量放在那。正常打开都难更别说DDOS了…①首先是在完全运行LAMP时，内存占用达到50% 而平常跑图形也就30％，开HTML5网页网站达到70％ –LAMP的内存占用还是十分可观的，利用free命令和探针说明了这点，上图 ②然后是整数运算，浮点运算以及磁盘读写，探针选择与几家大型vps商的服务器进行比较，差距明显2Pi的性能是四核ARM900MHz 1GbRAM,与实际数据比例差不多，io读写尽管用了高速TF卡但敌不过Raid阵列Unixbench跑分测试UnixBench是服务器常用的性能综合测试软件，在广大站长圈子里广泛流传，今天用树莓派来跑下这个试试，看看Pi2的实际性能情况这个软件从浮点，整数，io，哈希等等进行了单线程，多线程测试先下载123wget http://teddysun.com/wp-content/uploads/unixbench.shchmod +x unixbench.sh./unixbench.sh 等待时间可能比较长，这个小派花了近一小时……测试结果惨不忍睹 从解压速度也可以看出，解压typecho本conoha服务器1s不到而树莓派花了4s ③网站实际运行速度，这里仍然使用了typecho来测试，为了尽可能增加负载，使用了含有大量的js元素的模板，用的是吟梦这位大神的杰作，实际内存占用并没有上升。 ④使用花生壳动态IP解析功能让小pi外网访问去花生壳官网http://www.oray.com注册一个账号，再注册一个域名（推荐免费的），大多数路由器都内置了花生壳，再路由器内部登陆账号即可做端口转发，每家的路由器方法不同，可以去官网查看","categories":[],"tags":[]},{"title":"作死向:利用树莓派(RaspberryPi)打造LAMP服务器","slug":"lamp","date":"un00fin00","updated":"un00fin00","comments":true,"path":"post/lamp/","link":"","permalink":"https://www.yuyanlab.com/post/lamp/","excerpt":"目前树莓派是最火的开源平台之一，性能拓展性也是最强的，使用它来打造服务器是个很好的主意(LAMP=Linux+Apache+MYSQL+PHP)别问我为何不用Nginx，他跟我有仇orz这里用的是Pi2(因为老B+今天骄傲了，死活开不了机)看了汪汪姐的起司博客非编译手动安装服务器环境的原理后，决定动手一试","text":"目前树莓派是最火的开源平台之一，性能拓展性也是最强的，使用它来打造服务器是个很好的主意(LAMP=Linux+Apache+MYSQL+PHP)别问我为何不用Nginx，他跟我有仇orz这里用的是Pi2(因为老B+今天骄傲了，死活开不了机)看了汪汪姐的起司博客非编译手动安装服务器环境的原理后，决定动手一试 1sudo apt-get install apache2 mysql-server mysql-client php5 php5-gd php5-mysql 等待即可，po主家里网速感人，大家可以先换源，po主用的是重庆大学的源http://mirrors.cqu.edu.cn换源方法进入此地址可见 当中会提示键入MySQL的root密码 赋予权限1sudo chmod 777 /var/www/ 安装phpmyadmin1sudo apt-get install phpmyadmin （当中会提示选用什么版本 我们选Apache2 空格选择，回车确定）启用重写规则1sudo a2enmod rewrite 启用phpmyadmin（就是在浏览器上能访问）1sudo ln -s /usr/share/phpmyadmin /var/www 重启apache1sudo service httpd restart ⑧用phpinfo验证12cd /var/wwwnano phpinfo.php 写入以下内容12345&lt;?phpphpinfo();?&gt; 保存退出键入ifconfig查看ip地址 在浏览器上键入http://IP/phpinfo.php即可查看","categories":[{"name":"树莓派","slug":"树莓派","permalink":"https://www.yuyanlab.com/categories/树莓派/"}],"tags":[]},{"title":"提升SSL加密等级，强制使用AES加密","slug":"4","date":"un55fin55","updated":"un00fin00","comments":true,"path":"post/4/","link":"","permalink":"https://www.yuyanlab.com/post/4/","excerpt":"仅仅把SSL证书配置，安全措施根本不够，如果去专业网站检测，也就是C级而已，所以我们应该提升网站的加密措施第一项：强制使用AES128或AES256加密算法（这些信息可以使用chrome浏览器查看，点击绿锁即可） 1：老规矩 nano httpd-ssl.conf 去删除注释 2：对照图片修改（需要默认128就128在前） 3：关闭 SSL v3 （据说是因为harker可以监听数据）SSLProtocol all -SSLv2改为SSLProtocol all -SSLv2 -SSLv3 4：线上工具检测，这里推荐两个，一个是最权威的 Qualys SSL Labs https://www.ssllabs.com/ssltest/一个是Globalsign的，这个能提供修复建议https://sslcheck.globalsign.com/cn","text":"仅仅把SSL证书配置，安全措施根本不够，如果去专业网站检测，也就是C级而已，所以我们应该提升网站的加密措施第一项：强制使用AES128或AES256加密算法（这些信息可以使用chrome浏览器查看，点击绿锁即可） 1：老规矩 nano httpd-ssl.conf 去删除注释 2：对照图片修改（需要默认128就128在前） 3：关闭 SSL v3 （据说是因为harker可以监听数据）SSLProtocol all -SSLv2改为SSLProtocol all -SSLv2 -SSLv3 4：线上工具检测，这里推荐两个，一个是最权威的 Qualys SSL Labs https://www.ssllabs.com/ssltest/一个是Globalsign的，这个能提供修复建议https://sslcheck.globalsign.com/cn","categories":[],"tags":[]},{"title":"Linux服务器防护加固策略(二)阻挡小型DDOS攻击，DDoS-Deflate的使用","slug":"3","date":"un11fin11","updated":"un00fin00","comments":true,"path":"post/3/","link":"","permalink":"https://www.yuyanlab.com/post/3/","excerpt":"自从配置了SSL以后，舍弃了CDN，服务器可以说实在裸奔，所以要进行必要的防护措施。首先防的是DDOS攻击，这些软件或脚本可以通过限制并发数/封IP达到抵挡DDOS攻击的目的注意：此方法只能应对小流量的DDOS，SF等其他站点还请去租高防服务器，毕竟软防不如硬防，只为应对一些无聊的人……这里推荐DDoS-Deflate这个软件，使用同样简单","text":"自从配置了SSL以后，舍弃了CDN，服务器可以说实在裸奔，所以要进行必要的防护措施。首先防的是DDOS攻击，这些软件或脚本可以通过限制并发数/封IP达到抵挡DDOS攻击的目的注意：此方法只能应对小流量的DDOS，SF等其他站点还请去租高防服务器，毕竟软防不如硬防，只为应对一些无聊的人……这里推荐DDoS-Deflate这个软件，使用同样简单文章为原创，转载请在鲜明位置注明出处 ①下载：1wget http://www.inetbase.com/scripts/ddos/install.sh（注意换个文件夹，最好新建） ②赋予权限：1chmod +x install.sh ③安装：1./install.sh ④配置（使用默认配置也行）12cd /usr/local/ddosnano ddos.conf 根据注释配置即可ip白名单同理 ：ignore.ip.list⑤卸载：官网下载卸载脚本http://www.inetbase.com/scripts/ddos/uninstall.sh参照①步骤⑥查看是否执行ddos status 如果未运行 ddos start 小结：网站安全不容忽视，虽有云锁之类的防护软件，但使用不是很方便，运用这些小东西去灵活部署服务器，将会安全而开心。","categories":[],"tags":[]}]}