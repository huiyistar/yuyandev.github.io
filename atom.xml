<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>蔓舞寻樱的博客</title>
  <icon>https://www.gravatar.com/avatar/7aaf8b5fd043f740455f0bad76dc5374</icon>
  <subtitle>みんなで実现の物语 - μ&#39;s</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.yuyanlab.com/"/>
  <updated>2017-11-12T15:53:01.658Z</updated>
  <id>https://www.yuyanlab.com/</id>
  
  <author>
    <name>hiroya</name>
    <email>sakura@alleysakura.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>使用React，GithubAPI，Hexo，Travis-CI构建一个属于自己的博客</title>
    <link href="https://www.yuyanlab.com/post/react-hexo-blog/"/>
    <id>https://www.yuyanlab.com/post/react-hexo-blog/</id>
    <published>2017-11-08T13:34:00.000Z</published>
    <updated>2017-11-12T15:53:01.658Z</updated>
    
    <content type="html"><![CDATA[<p>的确现在的博客就是基于这个思路打造的。纯粹的restful+单页应用的风格。</p><p>首先的Hexo部分，hexo本来是通过生成一个个目录的然后加入index.html实现的文章路径，得益于“hexo-generator-json-content”这个插件，它可以把所有文章信息，构造为一个json。这个json后面上传到github上便成为了最主要的api。</p><p>至于原来的目录，出于seo优化的需要，我们在<code>page.ejs</code>等模板上做一个重定向<code>/post/postname</code> -&gt;<code>/#!/post/postname</code></p><p>Travis-CI方面，主要是根据GihubAPI的特点，满足我们懒人的需要，只需要朝gitpage的一个分支上上传markdown，Travis-CI就会给我们自动部署发布到主分支上。我们hexo生成上传的东西也需要做些优化，毕竟，我们要的只是那个<code>content.json</code>和其他一些东西。</p><p>Github方面，不说了，就提供文件储存还有API。</p><p>关于React，接下来继续说</p><a id="more"></a><hr><p>React的路由，我规划了如下路由</p><ul><li><code>/article/:Id</code>我们不可能把所有文章和他们的节选全部放一个页面里，这样访问体验极差。所以我们需要个文章列表分页功能。</li><li><code>/post/:post</code>文章内容</li><li><code>/page/:staticPage</code>一些关于，友情链接等等的页面</li><li><code>/</code>首页就直接跳转至<code>/article/1</code></li></ul><p>样式你可以选择各种各样的前端框架，不过请注意不要选择是使用jQuery操作DOM的框架。</p><h5 id="article页面"><a href="#article页面" class="headerlink" title="article页面"></a>article页面</h5><p>由于React-Router4的传值操作体验极差，所以博主并没有使用它提供的api，而是使用了原生的方式来获取id值（PS：在web开发上博主非常建议使用React-Router2，RN可能还是4比较好）<br>在提取到id值后，我们统计一下文章数，并计算出5文章一页需要多少页面可以把文章塞完。然后将content.json遍历一遍，曲线救国按顺序再构造出当页的结构。最后存入state给render渲染</p><h5 id="post和staticPage"><a href="#post和staticPage" class="headerlink" title="post和staticPage"></a>post和staticPage</h5><p>理由同上，原生获取id，然后发起fetch请求抓取github的api，获得json和content数据，github的markdown比较特殊，进行了非标准的base64加密，我们需要多次转码，并使用正则替代来同时兼容hexo能读取的markdown<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">utf8_to_b64</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">window</span>.btoa(<span class="built_in">unescape</span>(<span class="built_in">encodeURIComponent</span>(str)));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">b64_to_utf8</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">decodeURIComponent</span>(<span class="built_in">escape</span>(<span class="built_in">window</span>.atob(str)));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">fetchAsyncPostMarkdown</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> response = <span class="keyword">await</span> fetch(<span class="string">`https://api.github.com/repos/<span class="subst">$&#123;GITHUBNAME&#125;</span>/<span class="subst">$&#123;GITHUBREPO&#125;</span>/contents/source/_posts/<span class="subst">$&#123;path&#125;</span>.md?ref=master`</span>);  </span><br><span class="line">  <span class="keyword">let</span> data = <span class="keyword">await</span> response.json();</span><br><span class="line">  <span class="keyword">return</span> data;</span><br><span class="line">&#125;</span><br><span class="line">fetchAsyncPostMarkdown()</span><br><span class="line">.then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">var</span> Content = marked(b64_to_utf8(utf8_to_b64(b64_to_utf8(data.content))).replace(<span class="regexp">/---\ntitle:/g</span>,<span class="string">'### '</span>).replace(<span class="regexp">/date:/g</span>,<span class="string">'\n##### '</span>))  </span><br><span class="line">;&#125;)</span><br><span class="line">.catch(<span class="function"><span class="params">reason</span> =&gt;</span> <span class="built_in">console</span>.log(reason.message))</span><br></pre></td></tr></table></figure></p><p>其他的也就加了些工具库。</p><p>感受就是，状态数据管理很重要，好好看文档orz</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;的确现在的博客就是基于这个思路打造的。纯粹的restful+单页应用的风格。&lt;/p&gt;
&lt;p&gt;首先的Hexo部分，hexo本来是通过生成一个个目录的然后加入index.html实现的文章路径，得益于“hexo-generator-json-content”这个插件，它可以把所有文章信息，构造为一个json。这个json后面上传到github上便成为了最主要的api。&lt;/p&gt;
&lt;p&gt;至于原来的目录，出于seo优化的需要，我们在&lt;code&gt;page.ejs&lt;/code&gt;等模板上做一个重定向&lt;code&gt;/post/postname&lt;/code&gt; -&amp;gt;&lt;code&gt;/#!/post/postname&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Travis-CI方面，主要是根据GihubAPI的特点，满足我们懒人的需要，只需要朝gitpage的一个分支上上传markdown，Travis-CI就会给我们自动部署发布到主分支上。我们hexo生成上传的东西也需要做些优化，毕竟，我们要的只是那个&lt;code&gt;content.json&lt;/code&gt;和其他一些东西。&lt;/p&gt;
&lt;p&gt;Github方面，不说了，就提供文件储存还有API。&lt;/p&gt;
&lt;p&gt;关于React，接下来继续说&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>好久没有写博客了，来叙叙最近吧</title>
    <link href="https://www.yuyanlab.com/post/newblog/"/>
    <id>https://www.yuyanlab.com/post/newblog/</id>
    <published>2017-11-08T06:41:00.000Z</published>
    <updated>2017-11-12T15:53:01.658Z</updated>
    
    <content type="html"><![CDATA[<p>最近踩了很多坑，然后用React 15，通过travis-ci来hexo生成一些json，结合github的api一起造了这个博客。<br>踩了很多的坑。以后慢慢在博客中叙述叙述记叙出来吧。</p><p>大学生活也是一言难尽，总之，我回来了<br><a id="more"></a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近踩了很多坑，然后用React 15，通过travis-ci来hexo生成一些json，结合github的api一起造了这个博客。&lt;br&gt;踩了很多的坑。以后慢慢在博客中叙述叙述记叙出来吧。&lt;/p&gt;
&lt;p&gt;大学生活也是一言难尽，总之，我回来了&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Nginx+FCGI编译安装+TCL/C++/shell的学习/安装调教</title>
    <link href="https://www.yuyanlab.com/post/fcgi/"/>
    <id>https://www.yuyanlab.com/post/fcgi/</id>
    <published>2017-07-01T15:32:15.000Z</published>
    <updated>2017-11-12T15:53:01.658Z</updated>
    
    <content type="html"><![CDATA[<p>FCGI虽然是上个世纪的东西，但是缺了还真不行。在FCGI的编译安装方面Google都无法找到相关笔记文档。在经历了一下午的折磨后，才安装上了。我觉得应该写成笔记，帮助更多人少走弯路。</p><p>FCGI存在与epel和Ubuntu等源里，因此，大多数设备都能无痛安装。</p><p>但由于我的是CentOS armv7版的操作系统，不可能使用epel源，由于FCGI缺乏维护，所以在编译过程中，走了很多弯路。</p><p>nginx的安装查看我的上一篇博客的nginx安装部分即可。</p><p>首先我们来搞清楚一下，CGI相关的原理，如何编写相关脚本，以及使用这套组合的意义。</p><h2 id=""><a href="#" class="headerlink" title=""></a><a id="more"></a></h2><h3 id="CGI"><a href="#CGI" class="headerlink" title="CGI"></a>CGI</h3><p>通用网关接口（Common Gateway Interface/CGI）是一种重要的互联网技术，可以让一个客户端，从网页浏览器向执行在网络服务器上的程序请求数据。CGI描述了服务器和请求处理程序之间传输数据的一种标准。CGI 独立于任何语言的，CGI 程序可以用任何脚本语言或者是完全独立编程语言实现，只要这个语言可以在这个系统上运行。（Wikipedia）<br>所以理论上，任何可以使用终端命令行运行的程序都能通过一定改动来支援cgi。</p><p>我们很少看到直接的cgi，那是因为更多的web服务器软件都使用了一种更先进的cgi技术-FastCGI。<br>注意，这里是FastCGI只是作为一个扩展依赖，相当于开放了接口，是一种被动型的，并不能直接操纵。另外安装时需要加上参数编译进去。</p><h5 id="安装FCGI"><a href="#安装FCGI" class="headerlink" title="安装FCGI"></a>安装FCGI</h5><p>快速通用网关接口（Fast Common Gateway Interface／FastCGI）是通用网关接口（CGI）的改进，描述了客户端和服务器程序之间传输数据的一种标准。FastCGI致力于减少Web服务器与CGI程式之间互动的开销，从而使服务器可以同时处理更多的Web请求。与为每个请求创建一个新的进程不同，FastCGI使用持续的进程来处理一连串的请求（Wikipedia）</p><p>请注意，这里的FCGI不同于perl-fcgi，php-cgi，这是一套完整的fcgi能够支援各种语言的FCGI及其cgi开发工具库。其对应的epel名称为fcgi-devel。</p><p>由于FCGI已经倒闭，所以你从各种博客上找到的教程叫你去官网下是不可能的。</p><p>但是，github上有份镜像下来的fastcgi官网镜像，尽管里面的源代码非常混乱，编译各种warning，但是好歹有了。这个一个是方便我们编写c/cpp的cgi程序，另外一个fcgiwrap也是依赖这个工具库的<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">yum install autoconf automake libtool</span><br><span class="line">wget https://github.com/FastCGI-Archives/FastCGI.com/raw/master/original_snapshot/fcgi-2.4.1-SNAP-0910052249.tar.gz</span><br><span class="line">tar xvfz fcgi-2.4.1-SNAP-0910052249.tar.gz</span><br><span class="line"><span class="built_in">cd</span> fcgi-2.4.1-SNAP-0910052249</span><br></pre></td></tr></table></figure></p><p>然后你需要修改<code>./include/fcgio.h</code>，在里面加入<code>#include &lt;cstdio&gt;</code>，这里是源代码的相关bug</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">./configure --prefix=/usr/<span class="built_in">local</span>/fcgi</span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure><h5 id="下面的内容非常重要，一定要软链头文件和动态库。博主就是坑在这里，一直去调ldconfig，发现不能正确启用"><a href="#下面的内容非常重要，一定要软链头文件和动态库。博主就是坑在这里，一直去调ldconfig，发现不能正确启用" class="headerlink" title="下面的内容非常重要，一定要软链头文件和动态库。博主就是坑在这里，一直去调ldconfig，发现不能正确启用"></a>下面的内容非常重要，一定要软链头文件和动态库。博主就是坑在这里，一直去调ldconfig，发现不能正确启用</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ln -s /usr/<span class="built_in">local</span>/fcgi/lib/libfcgi.so.0 /usr/lib/</span><br><span class="line">ln -s /usr/<span class="built_in">local</span>/fcgi/lib/libfcgi.so /usr/lib/</span><br><span class="line">ln -s /usr/<span class="built_in">local</span>/fcgi/lib/libfcgi.so.0.0.0 /usr/lib/</span><br><span class="line">ln -s /usr/<span class="built_in">local</span>/fcgi/include/*.h /usr/include/</span><br></pre></td></tr></table></figure><p>如果你需要c++相关的编译，也需要连接libfcgi++.so相关。</p><h5 id="安装FCGI相关扩展"><a href="#安装FCGI相关扩展" class="headerlink" title="安装FCGI相关扩展"></a>安装FCGI相关扩展</h5><p>为了能支持大部分脚本，我们需要安装fcgiwrap这个库。这个库安装依赖上面的FCGI开发套件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/gnosek/fcgiwrap.git</span><br><span class="line">cd fcgiwrap</span><br><span class="line">autoreconf -i</span><br><span class="line">./configure</span><br><span class="line">make</span><br><span class="line">make install</span><br><span class="line">ln -s fcgiwrap /usr/local/bin/</span><br></pre></td></tr></table></figure></p><p>为了方便 操纵fcgiwrap，我们建立fcgiwrap的管理启动脚本<code>nano /etc/init.d/fcgiwrap</code><br><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/perl</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> strict;</span><br><span class="line"><span class="keyword">use</span> warnings <span class="string">FATAL =&gt;</span> <span class="string">qw( all )</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> IO::Socket::UNIX;</span><br><span class="line"></span><br><span class="line"><span class="keyword">my</span> $bin_path = <span class="string">'/usr/local/bin/fcgiwrap'</span>;</span><br><span class="line"><span class="keyword">my</span> $socket_path = $ARGV[<span class="number">0</span>] || <span class="string">'/tmp/cgi.sock'</span>;</span><br><span class="line"><span class="keyword">my</span> $num_children = $ARGV[<span class="number">1</span>] || <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">close</span> STDIN;</span><br><span class="line"></span><br><span class="line"><span class="keyword">unlink</span> $socket_path;</span><br><span class="line"><span class="keyword">my</span> $socket = IO::Socket::UNIX-&gt;new(</span><br><span class="line">    <span class="string">Local =&gt;</span> $socket_path,</span><br><span class="line">    <span class="string">Listen =&gt;</span> <span class="number">100</span>,</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">die</span> <span class="string">"Cannot create socket at $socket_path: $!\n"</span> <span class="keyword">unless</span> $socket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="number">1</span> .. $num_children) &#123;</span><br><span class="line">    <span class="keyword">my</span> $pid = <span class="keyword">fork</span>;</span><br><span class="line">    <span class="keyword">die</span> <span class="string">"Cannot fork: $!"</span> <span class="keyword">unless</span> <span class="keyword">defined</span> $pid;</span><br><span class="line">    <span class="keyword">next</span> <span class="keyword">if</span> $pid;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">exec</span> $bin_path;</span><br><span class="line">    <span class="keyword">die</span> <span class="string">"Failed to exec $bin_path: $!\n"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h5 id="安装FCGI管理器"><a href="#安装FCGI管理器" class="headerlink" title="安装FCGI管理器"></a>安装FCGI管理器</h5><p>在之前我们说了，nginx等软件知识被动接受FastCGI接口，所以，我们需要spawn-fcgi这个进程管理器<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">wget http://download.lighttpd.net/spawn-fcgi/releases-1.6.x/spawn-fcgi-1.6.4.tar.gz</span><br><span class="line">tar -zxvf spawn-fcgi-1.6.4.tar.gz</span><br><span class="line">cd spawn-fcgi-1.6.4</span><br><span class="line">./configure</span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure></p><p>执行<code>spawn-fcgi --help</code>验证安装情况，具体如何用过会儿再讲。</p><hr><h3 id="CGI程序的编写，这里有几个不同语言的示例。"><a href="#CGI程序的编写，这里有几个不同语言的示例。" class="headerlink" title="CGI程序的编写，这里有几个不同语言的示例。"></a>CGI程序的编写，这里有几个不同语言的示例。</h3><p>建议创建<code>/var/www/cgi/cgi-bin</code>目录，把写好的cgi脚本都放里面。<br>另外赋予相关权限<code>chown -R nginx:nginx /var/www/cgi-bin</code></p><h5 id="tcl语言"><a href="#tcl语言" class="headerlink" title="tcl语言"></a>tcl语言</h5><p>Tcl（发音tickle）是一种脚本语言。由John Ousterhout创建。TCL经常被用于快速原型开发 RAD、脚本编程、GUI编程和测试等方面。（Wikipedia）</p><p>这是测试的最好一种语言了，我们创建<code>test-tcl.cgi</code><br><figure class="highlight tcl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/tclsh</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">puts</span>  <span class="string">"Content-type: text/html"</span></span><br><span class="line"><span class="keyword">puts</span> <span class="string">""</span></span><br><span class="line"><span class="keyword">puts</span>  <span class="string">"This is a tcl cgi test script"</span></span><br></pre></td></tr></table></figure></p><h5 id="bash脚本"><a href="#bash脚本" class="headerlink" title="bash脚本"></a>bash脚本</h5><p>我们创建<code>test-bash.cgi</code><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">"Content-type: text/html\n\n"</span>;</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"&lt;html&gt;"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"&lt;title&gt;"</span></span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">"cgi test\n"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"&lt;/title&gt;"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"&lt;body&gt;"</span></span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">"&lt;p&gt; This is a bash cgi test script&lt;/p&gt;"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"&lt;/body&gt;"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"&lt;/html&gt;"</span></span><br></pre></td></tr></table></figure></p><h5 id="c语言"><a href="#c语言" class="headerlink" title="c语言"></a>c语言</h5><p>我们创建 <code>test-c.cpp</code><br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcgi_stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (FCGI_Accept() &gt;= <span class="number">0</span>)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Content-type: text/html\r\n"</span></span><br><span class="line">        <span class="string">"\r\n"</span></span><br><span class="line">        <span class="string">"&lt;title&gt;FastCGI Hello!&lt;/title&gt;"</span></span><br><span class="line">        <span class="string">"&lt;h1&gt;FastCGI Hello!&lt;/h1&gt;"</span></span><br><span class="line">        <span class="string">"Request number %d running on host &lt;i&gt;%s&lt;/i&gt;\n"</span>,</span><br><span class="line">        ++count, getenv(<span class="string">"SERVER_NAME"</span>));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>然后<code>g++ test-c.cpp -o test-c.cgi –lfcgi</code>来编译你的c语言的cgi程序。</p><h5 id="perl语言测试"><a href="#perl语言测试" class="headerlink" title="perl语言测试"></a>perl语言测试</h5><p>我们创建 <code>test-perl.cgi</code><br><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/perl</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> <span class="string">"Content-type: text/html\n\n"</span>;</span><br><span class="line"><span class="keyword">print</span> <span class="string">"&lt;html&gt;&lt;head&gt;&lt;title&gt;cgi test&lt;/title&gt;&lt;/head&gt;\n"</span>;</span><br><span class="line"><span class="keyword">print</span> <span class="string">"&lt;body&gt;&lt;p&gt;This is a bash cgi test script&lt;p&gt;&lt;/body&gt;&lt;/html&gt;\n"</span>;</span><br></pre></td></tr></table></figure></p><hr><h3 id="启动cgi工具以及nginx相关配置"><a href="#启动cgi工具以及nginx相关配置" class="headerlink" title="启动cgi工具以及nginx相关配置"></a>启动cgi工具以及nginx相关配置</h3><p>使用spawn-fcgi来启动fcgiwrap。<br>当然，你也可以使用spawn-fcgi单独启动一个可执行的cgi程序<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#cgi交给fcgiwrap托管</span></span><br><span class="line">spawn-fcgi -f /usr/<span class="built_in">local</span>/sbin/fcgiwrap -p 5000</span><br><span class="line"><span class="comment">#单独启动单个cgi程序</span></span><br><span class="line">spawn-fcgi -a 127.0.0.1 -p 5000 -f /var/www/cgi/cgi-bin/<span class="built_in">test</span>-c.cgi</span><br></pre></td></tr></table></figure></p><p>在nginx的配置 比如，匹配所有cgi后缀<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">location</span> <span class="regexp">~ .*\.cgi$</span> &#123;</span><br><span class="line">  <span class="attribute">root</span> /var/www/cgi/;</span><br><span class="line">  <span class="attribute">fastcgi_pass</span> <span class="number">127.0.0.1:5000</span>;</span><br><span class="line">  <span class="attribute">fastcgi_index</span> index.cgi;</span><br><span class="line">  <span class="attribute">include</span> fastcgi.conf;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>又比如，cgi-bin文件夹交个cgi处理<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">location</span> /cgi-bin/ &#123;</span><br><span class="line">  <span class="attribute">root</span> /var/www/cgi/;</span><br><span class="line">  <span class="attribute">fastcgi_pass</span> <span class="number">127.0.0.1:5000</span>;</span><br><span class="line">  <span class="attribute">fastcgi_index</span> index.cgi;</span><br><span class="line">  <span class="attribute">include</span> fastcgi.conf;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这个样更适用于c和cpp编写的cgi应用</p><hr><hr><h3 id="为什么使用这套组合。"><a href="#为什么使用这套组合。" class="headerlink" title="为什么使用这套组合。"></a>为什么使用这套组合。</h3><p>首先，这次实验的设备是armv7单片机，所以才会编译得吐血。<br>尽管FastCGI开销不小，但是在单片机这样的使用的场景下，效率绝对是比nginx+mysql/sqlite+php/node.js的效率要高很多的，特别是我们使用bash或者c语言来作为cgi相应的话，效率非常高。<br>另外，我们如果操作GPIO针脚，使用c语言，无论是易用性还是效率性能都要大大高于python的。</p><p>但是，本套配置文件在cgi响应请求方面还是有些问题，估计是nginx配置的锅，我也会继续折腾研究的</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;FCGI虽然是上个世纪的东西，但是缺了还真不行。在FCGI的编译安装方面Google都无法找到相关笔记文档。在经历了一下午的折磨后，才安装上了。我觉得应该写成笔记，帮助更多人少走弯路。&lt;/p&gt;
&lt;p&gt;FCGI存在与epel和Ubuntu等源里，因此，大多数设备都能无痛安装。&lt;/p&gt;
&lt;p&gt;但由于我的是CentOS armv7版的操作系统，不可能使用epel源，由于FCGI缺乏维护，所以在编译过程中，走了很多弯路。&lt;/p&gt;
&lt;p&gt;nginx的安装查看我的上一篇博客的nginx安装部分即可。&lt;/p&gt;
&lt;p&gt;首先我们来搞清楚一下，CGI相关的原理，如何编写相关脚本，以及使用这套组合的意义。&lt;/p&gt;
&lt;h2 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Kali在树莓派上的调教笔记</title>
    <link href="https://www.yuyanlab.com/post/Kali-raspberry/"/>
    <id>https://www.yuyanlab.com/post/Kali-raspberry/</id>
    <published>2017-06-25T15:57:00.000Z</published>
    <updated>2017-11-12T15:53:01.658Z</updated>
    
    <content type="html"><![CDATA[<p>一个偶然的时刻，我发现某个地方的IP是开放80和443端口的，那如果不好好利用一下简直太可惜了。当然，人家可是良民，当然会遵守国家的法律法规啦，那废话就不多说了。</p><p>小插曲：好久不用raspbian了，刷好镜像通电后才知道raspbian已经在一年前就已经默认关闭了ssh，没ssh那玩个鬼。</p><p>索性放弃raspbian，那么目前有Ubuntu Mate，Kali OS，Arch Linux三个系统供我选择，Ubuntu Mate也是需要通过显示器设定，故放弃；Arch Linux arm安装需要用到linux的机子；所以选择了Kali OS。<br><a id="more"></a><br>这是Kali的安装指导页面<a href="https://docs.kali.org/introduction/download-official-kali-linux-images" target="_blank" rel="external">https://docs.kali.org/introduction/download-official-kali-linux-images</a>里面包括了自定义构建镜像的方法和已构建好的镜像的下载链接。<br>也可以直接从这个页面寻获下载链接<a href="https://www.offensive-security.com/kali-linux-arm-images/" target="_blank" rel="external">https://www.offensive-security.com/kali-linux-arm-images/</a></p><p>接下啦是刻录的方式，我的本子是OS X的系统，所以我写的是该系统的烧录方式</p><ol><li><p>下载</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget https://images.offensive-security.com/arm-images/kali-2017.01-rpi2.img.xz</span><br><span class="line">unxz kali-2017.01-rpi2.img.xz</span><br><span class="line">mv kali-2017.01-rpi2.img ~/</span><br></pre></td></tr></table></figure></li><li><p>打开OS X的自带的磁盘工具，将tf卡格式化成MS-DOS(FAT)格式的。</p></li><li>用<code>df -h</code>命令找到你的tf卡的挂在地址.</li><li>假设我的是<code>/dev/disk2s1</code>，就执行<code>diskutil unmount /dev/disk2s1</code>，以此类推。</li><li>执行<code>diskutil list</code>来找到tf卡，假设我返回来的是<code>/dev/disk2</code></li><li>使用dd命令来刻录<code>sudo dd bs=4m if=kali-2017.01-rpi2.img of=/dev/rdisk2</code>，注意of后指向的disk要加上r。刻录时间稍长，多等等。最后会打印record和transferred信息的。</li><li>最后<code>diskutil unmountDisk /dev/disk2</code>来推出设备，就可以插上树莓派了。</li></ol><p>这时，把树莓派接上网线。登入你的路由器控制面板。有以下几件事需要做</p><ol><li>打开客户端列表，查看主机名为kali设备的内网IP地址和MAC地址</li><li>打开保留列表，将记录下来的内网IP和MAC地址绑定</li><li>打开端口转发列表，将80和443或者其他端口转发至内网IP，协议默认即可，也可指定。</li><li>如果路由器自带ddns服务的话，也可以设定。</li></ol><p>好了，这个时候，我们可以登入Kali了，官方打包的系统，默认使用root用户。密码toor。登入后修改密码。</p><p>第一步先换源，树莓派版本的Kali是基于kali-rolling构建的，所以我们在修改软件源时要务必注意和检查<br>比如清华tuna源，在<code>https://mirrors.tuna.tsinghua.edu.cn/kali/dists/</code>里有<code>kali-rolling</code>所以理论上是可以用这个源的（当然的确是可以用的）<br>编辑镜像源列表<code>nano /etc/apt/sources.list</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">deb http://mirrors.tuna.tsinghua.edu.cn/kali kali-rolling main non-free contrib</span><br><span class="line">deb-src http://mirrors.tuna.tsinghua.edu.cn/kali kali-rolling main non-free contrib</span><br><span class="line"></span><br><span class="line">deb http://http.kali.org/kali kali-rolling main non-free contrib</span><br><span class="line">deb-src http://http.kali.org/kali kali-rolling main non-free contrib</span><br></pre></td></tr></table></figure></p><p>刷新一下<code>apt-get update</code></p><p>接下来是安装nginx的部分，由于对树莓派操纵数据库的阴影，(可以查看本博客最早的那些文章)所以不打算安装数据库，我不会写php，所以也没必要安装php。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">apt-get install -y unzip curl build-essential make gcc libpcre3 libpcre3-dev libpcre++-dev zlib1g-dev libbz2-dev libxslt1-dev libxml2-dev libgd2-xpm-dev libgeoip-dev libgoogle-perftools-dev libperl-dev libssl-dev</span><br><span class="line">wget https://www.openssl.org/<span class="built_in">source</span>/openssl-1.0.2l.tar.gz</span><br><span class="line">wget http://nginx.org/download/nginx-1.12.0.tar.gz</span><br><span class="line">tar -zxvf openssl-1.0.2l.tar.gz</span><br><span class="line">tar -zxvf nginx-1.12.0.tar.gz</span><br><span class="line"><span class="built_in">cd</span> nginx-1.12.0</span><br><span class="line"></span><br><span class="line">./configure \</span><br><span class="line">--prefix=/etc/nginx                                                \</span><br><span class="line">--sbin-path=/usr/sbin/nginx                                        \</span><br><span class="line">--conf-path=/etc/nginx/nginx.conf                                  \</span><br><span class="line">--error-log-path=/var/<span class="built_in">log</span>/nginx/error.log                          \</span><br><span class="line">--http-log-path=/var/<span class="built_in">log</span>/nginx/access.log                          \</span><br><span class="line">--pid-path=/var/run/nginx.pid                                      \</span><br><span class="line">--lock-path=/var/run/nginx.lock                                    \</span><br><span class="line">--http-client-body-temp-path=/var/cache/nginx/client_temp          \</span><br><span class="line">--http-proxy-temp-path=/var/cache/nginx/proxy_temp                 \</span><br><span class="line">--http-fastcgi-temp-path=/var/cache/nginx/fastcgi_temp             \</span><br><span class="line">--http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp                 \</span><br><span class="line">--http-scgi-temp-path=/var/cache/nginx/scgi_temp                   \</span><br><span class="line">--user=nginx                                                       \</span><br><span class="line">--group=nginx                                                      \</span><br><span class="line">--with-openssl=../openssl-1.0.2l                                   \</span><br><span class="line">--with-http_ssl_module                                             \</span><br><span class="line">--with-http_realip_module                                          \</span><br><span class="line">--with-http_addition_module                                        \</span><br><span class="line">--with-http_sub_module                                             \</span><br><span class="line">--with-http_dav_module                                             \</span><br><span class="line">--with-http_flv_module                                             \</span><br><span class="line">--with-http_mp4_module                                             \</span><br><span class="line">--with-http_gunzip_module                                          \</span><br><span class="line">--with-http_gzip_static_module                                     \</span><br><span class="line">--with-http_random_index_module                                    \</span><br><span class="line">--with-http_secure_link_module                                     \</span><br><span class="line">--with-http_stub_status_module                                     \</span><br><span class="line">--with-http_auth_request_module                                    \</span><br><span class="line">--with-file-aio                                                    \</span><br><span class="line">--with-http_v2_module                                              \</span><br><span class="line">--with-threads                                                     \</span><br><span class="line">--with-stream                                                      \</span><br><span class="line">--with-stream_ssl_module                                           \</span><br><span class="line">--with-http_slice_module</span><br><span class="line"></span><br><span class="line">make &amp;&amp; make install</span><br><span class="line">useradd -r nginx</span><br><span class="line">mkdir /var/cache/nginx</span><br><span class="line">touch /var/cache/nginx/client_temp</span><br></pre></td></tr></table></figure><p>这时我们再创建一个systemctl启动脚本<code>nano /lib/systemd/system/nginx.service</code><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=The NGINX HTTP and reverse proxy server</span><br><span class="line">After=syslog.target network.target remote-fs.target nss-lookup.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=forking</span><br><span class="line">PIDFile=/var/run/nginx.pid</span><br><span class="line">ExecStartPre=/usr/sbin/nginx -t</span><br><span class="line">ExecStart=/usr/sbin/nginx</span><br><span class="line">ExecReload=/bin/<span class="built_in">kill</span> -s HUP <span class="variable">$MAINPID</span></span><br><span class="line">ExecStop=/bin/<span class="built_in">kill</span> -s QUIT <span class="variable">$MAINPID</span></span><br><span class="line">PrivateTmp=<span class="literal">true</span></span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure></p><p>就可以启动<code>systemctl start nginx</code></p><p>接下来，我们去/etc/nginx里编辑脚本就可以啦,博客之前的文章也有。node还没有装，不过后续可能会更新吧。<br><img src="/img/kalirasp.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一个偶然的时刻，我发现某个地方的IP是开放80和443端口的，那如果不好好利用一下简直太可惜了。当然，人家可是良民，当然会遵守国家的法律法规啦，那废话就不多说了。&lt;/p&gt;
&lt;p&gt;小插曲：好久不用raspbian了，刷好镜像通电后才知道raspbian已经在一年前就已经默认关闭了ssh，没ssh那玩个鬼。&lt;/p&gt;
&lt;p&gt;索性放弃raspbian，那么目前有Ubuntu Mate，Kali OS，Arch Linux三个系统供我选择，Ubuntu Mate也是需要通过显示器设定，故放弃；Arch Linux arm安装需要用到linux的机子；所以选择了Kali OS。&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>HBUT 2nd ACM Contest</title>
    <link href="https://www.yuyanlab.com/post/HBUT-2ACM/"/>
    <id>https://www.yuyanlab.com/post/HBUT-2ACM/</id>
    <published>2017-05-28T01:32:15.000Z</published>
    <updated>2017-11-12T15:53:01.658Z</updated>
    
    <content type="html"><![CDATA[<p>恩，菜鸡和大佬之间的差距不是一天两天能追上的，当然思路正确写不出来是不可原谅的。。。。。。总之，很丢人orz</p><p>虽然都是大部分是水题，但是还是把这部分分享出来吧w</p><p>拿自己的和标程对比，人家的就是写的就是清爽漂亮，哎。。。</p><a id="more"></a><h3 id="Problem-A"><a href="#Problem-A" class="headerlink" title="Problem A:"></a>Problem A:</h3><p>(1s/32768k)</p><p>Lucyma(Lucy 的妈妈)最近很着急，因为Lucy不喜欢吃苹果，但俗话说“每天一苹果，医生远离我”，Lucyma很像让Lucy多吃一点苹果，那怎么办呢？于是Lucyma每天都会按照顺序把水果放到果盘里，如果果盘装满，Lucyma就会将最先放的水果拿出来，以不能浪费粮食的名义，让Lucy吃掉。现在Lucyma一共有n个水果，她想知道这种方法能让lucy最多吃掉几个苹果，你能告诉Lucyma么？</p><h4 id="输入描述："><a href="#输入描述：" class="headerlink" title="输入描述："></a>输入描述：</h4><p>第一行是一个整数T，代表数据组数。(0&lt;T&lt;=20)<br>每组输入有两行，第一行是两个整数n，m分别代表水果的个数和果盘的容量，用一个空格隔开(0&lt;n,m&lt;=100000)<br>第二行是一串长度为n的字符串，都是小写字母，其中每个数字都代表一种水果，a代表苹果。</p><h4 id="输出描述："><a href="#输出描述：" class="headerlink" title="输出描述："></a>输出描述：</h4><p>对于每组数据，输出一行，一个整数m，代表lucy最多吃掉苹果的个数。</p><h5 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">2</span><br><span class="line">3 5</span><br><span class="line">aab</span><br><span class="line">5 3</span><br><span class="line">abasd</span><br></pre></td></tr></table></figure><h5 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">0</span><br><span class="line">2</span><br></pre></td></tr></table></figure><h5 id="AC-Code"><a href="#AC-Code" class="headerlink" title="AC Code"></a>AC Code</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">100005</span>;</span><br><span class="line"><span class="keyword">char</span> s[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> n,m;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;n,&amp;m);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>,s);</span><br><span class="line">        <span class="keyword">int</span> num=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(m&gt;=n) <span class="built_in">printf</span>(<span class="string">"0\n"</span>);</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(s[i]==<span class="string">'a'</span>)</span><br><span class="line">                    num++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(num&gt;=(n-m)) <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,n-m);</span><br><span class="line">            <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,num);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Problem-B"><a href="#Problem-B" class="headerlink" title="Problem B:"></a>Problem B:</h3><p>(1s/32768k)</p><p>Lucy最近迷上了看奥运会，她对运动员不抛弃不放弃，以及追求更高，更快，更强的奥运会精神深深折服。Jason也是个奥运迷，有一天，lucy和jason讨论奥运会举办的时间，lucy认为奥运会是每四年举办一次，jason认为奥运会都是在闰年举办的。lucy知道jason的想法是错的，你能帮助lucy么？（第一界奥运会举办时间是在1896年）</p><h4 id="输入描述：-1"><a href="#输入描述：-1" class="headerlink" title="输入描述："></a>输入描述：</h4><p>输入第一行是一个整数T，代表数据组数。(0&lt;T&lt;=20)<br>每组第一行是一个N，代表年份(0&lt;n&lt;2017)</p><h4 id="输出描述：-1"><a href="#输出描述：-1" class="headerlink" title="输出描述："></a>输出描述：</h4><p>每组输出两行，第一行输出是否为奥运会举办的年份，如果是，输出”YES”,否则输出”NO”。第二行输出是否为闰年，如果是，输出”YES”，否则输出”NO”；</p><h5 id="Sample-Input-1"><a href="#Sample-Input-1" class="headerlink" title="Sample Input"></a>Sample Input</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">1900</span><br></pre></td></tr></table></figure><h5 id="Sample-Output-1"><a href="#Sample-Output-1" class="headerlink" title="Sample Output"></a>Sample Output</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">YES</span><br><span class="line">NO</span><br></pre></td></tr></table></figure><h5 id="AC-Code-1"><a href="#AC-Code-1" class="headerlink" title="AC Code"></a>AC Code</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ay</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n%<span class="number">4</span>==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">yn</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n%<span class="number">100</span>==<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(n%<span class="number">400</span>==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(n%<span class="number">4</span>==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> n;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">        <span class="keyword">if</span>(ay(n)&amp;&amp;n&gt;=<span class="number">1896</span>) <span class="built_in">printf</span>(<span class="string">"YES\n"</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"NO\n"</span>);</span><br><span class="line">        <span class="keyword">if</span>(yn(n)) <span class="built_in">printf</span>(<span class="string">"YES\n"</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"NO\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Problem-C"><a href="#Problem-C" class="headerlink" title="Problem C:"></a>Problem C:</h3><p>(1s/32768k)</p><p>Lucy和jason最近刚学了三角形的基本性质，lucy觉得自己学的比jason好，jason不服气了，想考一考lucy，看谁学得更好。于是jason捡来了很多小木棍，问其中能不能找到三根木棍可以组成一个三角形。其实偷偷告诉你lucy学得并不好，但是不能被jason发现了，你能编写个程序来帮lucy回答么？</p><h4 id="输入描述：-2"><a href="#输入描述：-2" class="headerlink" title="输入描述："></a>输入描述：</h4><p>第一行是一个整数T，代表数据数组。(0&lt;T&lt;=20)<br>每组数据有两行，第一行数据是一个整数n，代表木棍的数量。第二行是n个整数，i代表每个木棍的长度。(3&lt;=n&lt;100,0&lt;i&lt;100000)</p><h4 id="输出描述：-2"><a href="#输出描述：-2" class="headerlink" title="输出描述："></a>输出描述：</h4><p>对于每组数据，输出一行，如果有三根木棍可以组成一个三角形，输出”YES”,否则输出”NO”。</p><h5 id="Sample-Input-2"><a href="#Sample-Input-2" class="headerlink" title="Sample Input"></a>Sample Input</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line">3</span><br><span class="line">1 2 3</span><br><span class="line">4</span><br><span class="line">1 2 3 4</span><br><span class="line">5</span><br><span class="line">1 2 3 4 5</span><br></pre></td></tr></table></figure><h5 id="Sample-Output-2"><a href="#Sample-Output-2" class="headerlink" title="Sample Output"></a>Sample Output</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">NO</span><br><span class="line">YES</span><br><span class="line">YES</span><br></pre></td></tr></table></figure><h5 id="AC-Code-2"><a href="#AC-Code-2" class="headerlink" title="AC Code"></a>AC Code</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">105</span>;</span><br><span class="line"><span class="keyword">int</span> a[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">memset</span>(a,<span class="number">0</span>,<span class="keyword">sizeof</span>(a));</span><br><span class="line">        <span class="keyword">int</span> n;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">        sort(a,a+n);</span><br><span class="line">        <span class="keyword">int</span> flag=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;n;j++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k=j+<span class="number">1</span>;k&lt;n;k++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>((a[i]+a[j])&lt;=a[k]) <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">if</span>(a[i]&lt;=(a[k]-a[j])) <span class="keyword">continue</span>;</span><br><span class="line">                flag=<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(flag) <span class="built_in">printf</span>(<span class="string">"YES\n"</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"NO\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Problem-D"><a href="#Problem-D" class="headerlink" title="Problem D:"></a>Problem D:</h3><p>(1s/32768k)</p><p>一天，lucy和jason被传送到了一个从未捡到过的地方，她们唯一要做的事情就是努力活下去。她们惊喜的发现附近有许多可加工的食物。一共有n个食物，使用这些食物可以增加她们的饱和度Yi，但是令人心塞的是，每一种食物都有它相应的时间Xi。如果加工时间未达到，增加的饱食度与它可以增加的最大饱食度的比例和它的实际加工时间占需要加工时间的比例一致。例如 胡萝卜本来可以增加饱食度10，需要加工的时间为2，如果加工时间为1，就只能增加饱食度5了。而且她们的时间是宝贵的，只能有k时间用来加工食物，请问她们加工这些食物之后能增加的最大的饱食度是多少呢？</p><h4 id="输入描述：-3"><a href="#输入描述：-3" class="headerlink" title="输入描述："></a>输入描述：</h4><p>第一个数字为T，表示样例总数。(0&lt;T&lt;=100)<br>每个样例的第一行输入为两个整数n和k。(0&lt;n&lt;=1000,0&lt;k&lt;=1000)<br>每个样例第二行为n个整数，第i个数字表示第i种食物的加工时间Xi。(0&lt;Xi&lt;=100)<br>每个样例的第三行为n个整数，第i个数字表示第i种食物可以增加的最大饱食度Yi(0&lt;Yi&lt;100)</p><h4 id="输出描述：-3"><a href="#输出描述：-3" class="headerlink" title="输出描述："></a>输出描述：</h4><p>每个样例输出一个数字。每个数字占一行，表示lucy和jason最多能增加的饱食度，保留两位小数。</p><h5 id="Sample-Input-3"><a href="#Sample-Input-3" class="headerlink" title="Sample Input"></a>Sample Input</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">3 2</span><br><span class="line">1 1 2</span><br><span class="line">10 10 5</span><br></pre></td></tr></table></figure><h5 id="Sample-Output-3"><a href="#Sample-Output-3" class="headerlink" title="Sample Output"></a>Sample Output</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">20.00</span><br></pre></td></tr></table></figure><h5 id="AC-Code-3"><a href="#AC-Code-3" class="headerlink" title="AC Code"></a>AC Code</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1005</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">food</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> ti,d;</span><br><span class="line">    food(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span><br><span class="line">    &#123;   ti = a; d = b;  &#125;</span><br><span class="line">    food()&#123;&#125;</span><br><span class="line">&#125;data[maxn];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(food a, food b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> x = (<span class="keyword">double</span>)a.d/a.ti,y = (<span class="keyword">double</span>)b.d/b.ti;</span><br><span class="line">    <span class="keyword">return</span> x &gt; y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> kase;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">datamake</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    srand(time(<span class="number">0</span>));</span><br><span class="line">    kase = <span class="number">100</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,kase);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(kase--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> n = rand()%<span class="number">1000</span> + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> k = rand()%<span class="number">1000</span> + <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>,n,k);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n ; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> casei = rand()%<span class="number">100</span>+<span class="number">1</span>;</span><br><span class="line">            i == <span class="number">0</span> ? <span class="built_in">printf</span>(<span class="string">"%d"</span>,casei) : <span class="built_in">printf</span>(<span class="string">" %d"</span>,casei);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n ; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> casei = rand()%<span class="number">100</span>+<span class="number">1</span>;</span><br><span class="line">            i == <span class="number">0</span> ? <span class="built_in">printf</span>(<span class="string">"%d"</span>,casei) : <span class="built_in">printf</span>(<span class="string">" %d"</span>,casei);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,k;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;kase);</span><br><span class="line">    <span class="keyword">while</span>(kase--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;n,&amp;k);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;data[i].ti);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n ; i++)</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;data[i].d);</span><br><span class="line">        sort(data,data+n,cmp);</span><br><span class="line">        <span class="keyword">double</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> use = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n ; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(use + data[i].ti &lt;= k)</span><br><span class="line">            &#123;</span><br><span class="line">                ans += data[i].d;</span><br><span class="line">                use += data[i].ti;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(use &lt; k)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">double</span> x = (<span class="keyword">double</span>)(k-use)/data[i].ti;</span><br><span class="line">                    ans += (<span class="keyword">double</span>)x*data[i].d;</span><br><span class="line">                    use = k;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%.2f\n"</span>,ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Problem-E-简直欺负我不玩阴阳师"><a href="#Problem-E-简直欺负我不玩阴阳师" class="headerlink" title="Problem E: (简直欺负我不玩阴阳师)"></a>Problem E: (<del>简直欺负我不玩阴阳师</del>)</h3><p>(1s/32768k)</p><p>到五一假期的时候阴阳师又推出了这一活动，一张蓝色卡可以抽一次奖（每次用蓝色卡就会得到一点积分，满足10点积分额外送一张蓝色卡）抽奖是一个吸欧气的过程，每抽520次就能抽到一个ssr式神。ssr式神一共有10种，请问抽到相同ssr式神的概率有多少。</p><h4 id="输入描述"><a href="#输入描述" class="headerlink" title="输入描述"></a>输入描述</h4><p>第一行是一个整数T，表示数据组数，(1&lt;=T&lt;=10000)<br>每组输入一个整数n，表示初始蓝色卡个数。(0&lt;n&lt;=1000000000)</p><h4 id="输出描述"><a href="#输出描述" class="headerlink" title="输出描述"></a>输出描述</h4><p>输出抽到相同式神的概率。（算得的结果小数点保留6位，概率的最大值为1）</p><h5 id="Sample-Input-4"><a href="#Sample-Input-4" class="headerlink" title="Sample Input"></a>Sample Input</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">2</span><br><span class="line">123</span><br><span class="line">2560</span><br></pre></td></tr></table></figure><h5 id="Sample-Output-4"><a href="#Sample-Output-4" class="headerlink" title="Sample Output"></a>Sample Output</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">0.000000</span><br><span class="line">0.697600</span><br></pre></td></tr></table></figure><h5 id="AC-Code-4"><a href="#AC-Code-4" class="headerlink" title="AC Code"></a>AC Code</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">double</span> fact[<span class="number">13</span>], cnt[<span class="number">13</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">    fact[<span class="number">0</span>] = cnt[<span class="number">0</span>] = <span class="number">1.0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++)&#123;</span><br><span class="line">        fact[i] = fact[i<span class="number">-1</span>] * i;</span><br><span class="line">        cnt[i] = cnt[i<span class="number">-1</span>] * <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    init();</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="keyword">int</span> n;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">0</span>, ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(n)&#123;</span><br><span class="line">            ans += n;</span><br><span class="line">            left += n;</span><br><span class="line">            n = left/<span class="number">10</span>;</span><br><span class="line">            left %= <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ans /= <span class="number">520</span>;</span><br><span class="line">     <span class="keyword">if</span>(ans &gt; <span class="number">10</span>) <span class="built_in">printf</span>(<span class="string">"1.000000\n"</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(ans == <span class="number">10</span>) <span class="built_in">printf</span>(<span class="string">"%.6lf\n"</span>, <span class="number">1.0</span>-fact[<span class="number">9</span>]/cnt[<span class="number">9</span>]);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%.6lf\n"</span>, <span class="number">1.0</span>-fact[<span class="number">10</span>]/fact[<span class="number">10</span>-ans]/cnt[ans]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Problem-F-amp-amp-Problem-G-amp-amp-Problem-H"><a href="#Problem-F-amp-amp-Problem-G-amp-amp-Problem-H" class="headerlink" title="Problem F &amp;&amp; Problem G &amp;&amp; Problem H:"></a>Problem F &amp;&amp; Problem G &amp;&amp; Problem H:</h4><p>略（看不懂）</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;恩，菜鸡和大佬之间的差距不是一天两天能追上的，当然思路正确写不出来是不可原谅的。。。。。。总之，很丢人orz&lt;/p&gt;
&lt;p&gt;虽然都是大部分是水题，但是还是把这部分分享出来吧w&lt;/p&gt;
&lt;p&gt;拿自己的和标程对比，人家的就是写的就是清爽漂亮，哎。。。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>React与Express项目前后端一体化实战</title>
    <link href="https://www.yuyanlab.com/post/react-express/"/>
    <id>https://www.yuyanlab.com/post/react-express/</id>
    <published>2017-05-11T06:03:00.000Z</published>
    <updated>2017-11-12T15:53:01.658Z</updated>
    
    <content type="html"><![CDATA[<p>在之前的造轮子的过程中，前后端分离开来写实在蛋疼，所以最近决定研究并折腾一下前后端工程一体化。</p><p>在这样的实时的环境中，最重要的是做好前后端之间的协调作用，说白了，也就是路径规划问题与热刷新问题。</p><p>在我的项目中，我选择开发和生产的环境的加载代码制作两份，只有模板，中间件什么的代码的通用。(网上推崇使用env变量来加载热更新组件，但是本人并不推崇全部使用env)</p><p>主要就是分析几项内容，除了工程的路径规划，一是开发代码(app.js)，二是生产代码(server.js)，最后还有模板引擎的调整</p><a id="more"></a><p>首先是路径规划问题，两个甚至更多工程的合并，我们必须得把路径规划好</p><p>举个栗子（窝的）我选择把express脚手架生成的大部分文件放到server文件夹里，外面只留启动文件（相信熟悉express的同学一眼就能看出），前端react的代码放置到client里。启动代码在bin里<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── app.js</span><br><span class="line">├── bin</span><br><span class="line">│   ├── dev.js</span><br><span class="line">│   └── server.js</span><br><span class="line">├── client</span><br><span class="line">│   ├── index.js</span><br><span class="line">│   └── public</span><br><span class="line">├── node_modules</span><br><span class="line">├── package.json</span><br><span class="line">├── server</span><br><span class="line">│   ├── info</span><br><span class="line">│   ├── public</span><br><span class="line">│   ├── routes</span><br><span class="line">│   └── views</span><br><span class="line">├── server.js</span><br><span class="line">├── webpack.dev.config.js</span><br><span class="line">└── webpack.production.config.js</span><br></pre></td></tr></table></figure></p><p>启动脚本<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">"scripts": &#123;</span><br><span class="line">    "start": "cross-env NODE_ENV=production node ./bin/server.js",</span><br><span class="line">    "dev": "cross-env NODE_ENV=dev node ./bin/dev.js",</span><br><span class="line">    "bulid": "NODE_ENV=production webpack -p --config webpack.production.config.js"</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><h3 id="开发代码"><a href="#开发代码" class="headerlink" title="开发代码"></a>开发代码</h3><p>在开发中，我们需要调用webpackDevMiddleware和webpackHotMiddleware两套东西，当然，为了不发生找不到组件的尴尬情况，我们还是把大部分依赖装上吧,同样生产版本也需要用到一些组件。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev chunk-manifest-webpack-plugin cross-env html-webpack-plugin webpack-chunk-hash webpack-dev-middleware webpack-dev-server webpack-hot-middleware webpack-manifest-plugin</span><br></pre></td></tr></table></figure></p><p>在开发代码中，我们先使用cross-env设为dev，然后我们在开发版本的启动入口js里加入</p><p> 注意 ：需要在app定义后就要引入</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置环境变量</span></span><br><span class="line">app.locals.env = process.env.NODE_ENV || <span class="string">'dev'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 热加载功能导入</span></span><br><span class="line"><span class="keyword">var</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>),</span><br><span class="line">    webpackDevMiddleware = <span class="built_in">require</span>(<span class="string">'webpack-dev-middleware'</span>),</span><br><span class="line">    webpackHotMiddleware = <span class="built_in">require</span>(<span class="string">'webpack-hot-middleware'</span>),</span><br><span class="line">    webpackDevConfig = <span class="built_in">require</span>(<span class="string">'./webpack.dev.config.js'</span>); <span class="comment">// 你自己创建的适用于开发版本的webpack配置。具体写法之后会说明</span></span><br><span class="line"><span class="keyword">var</span> compiler = webpack(webpackDevConfig);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 热加载功能挂载部分,里面的配置来自</span></span><br><span class="line">app.use(webpackDevMiddleware(compiler, &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// public path should be the same with webpack config</span></span><br><span class="line">    publicPath: webpackDevConfig.output.publicPath,</span><br><span class="line">    noInfo: <span class="literal">true</span>,</span><br><span class="line">    stats: &#123;</span><br><span class="line">        colors: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;));</span><br><span class="line"></span><br><span class="line">app.use(webpackHotMiddleware(compiler));</span><br></pre></td></tr></table></figure><p>在最后module.exports前加入重启相关代码。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"><span class="keyword">var</span> reload = <span class="built_in">require</span>(<span class="string">'reload'</span>);</span><br><span class="line"><span class="keyword">var</span> server = http.createServer(app);</span><br><span class="line">reload(server, app);</span><br></pre></td></tr></table></figure></p><p><del>我很担心这会增加很多占用</del></p><p>这样，在express里的内容就完了,模板引擎的调整我们放到最后讲。</p><p>接下来我们讲讲webpack.dev.config.js开发配置的问题,直接贴23333333。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>);</span><br><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">var</span> node_modules_dir = path.resolve(__dirname, <span class="string">'node_modules'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> publicPath = <span class="string">'http://127.0.0.1:3000/'</span>;</span><br><span class="line"><span class="keyword">var</span> hotMiddlewareScript = <span class="string">'webpack-hot-middleware/client?reload=true'</span>; <span class="comment">//加载热跟新中间件</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> config = &#123;</span><br><span class="line">  entry: [ hotMiddlewareScript, <span class="string">'./client/index.js'</span>], <span class="comment">//使用热更新功能</span></span><br><span class="line">  output: &#123;</span><br><span class="line">    path: path.resolve(__dirname, <span class="string">'./server/public/static/js/'</span>),</span><br><span class="line">    filename: <span class="string">'bundle.js'</span>,</span><br><span class="line">    publicPath: publicPath</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    loaders: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">        exclude: <span class="regexp">/node_modules/</span>,</span><br><span class="line">        loader: <span class="string">'babel-loader?presets[]=es2015&amp;presets[]=react'</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">        exclude: <span class="regexp">/node_modules/</span>,</span><br><span class="line">        use: [<span class="string">'style-loader'</span>,<span class="string">'css-loader'</span> ]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">/* 创建热更新热加载组件 */</span></span><br><span class="line">  plugins: [</span><br><span class="line">        <span class="comment">// new webpack.optimize.OccurenceOrderPlugin(), //用webpack1.0版本时才需要</span></span><br><span class="line">        <span class="keyword">new</span> webpack.HotModuleReplacementPlugin(),</span><br><span class="line">        <span class="keyword">new</span> webpack.NoEmitOnErrorsPlugin()</span><br><span class="line">    ]</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = config;</span><br></pre></td></tr></table></figure><p>这时候，大部分已经完成了，如果你急着试试，可以看文章最后有关模板引擎的内容，就可以启动你的开发版本的app.js，功能都得到了保留，webpack打包信息和express的信息都会console出来。</p><hr><h3 id="生产代码"><a href="#生产代码" class="headerlink" title="生产代码"></a>生产代码</h3><p>生产代码的express入口不需要怎么改动，只需设置下环境变量即可<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.locals.env = process.env.NODE_ENV || <span class="string">'production'</span>;</span><br></pre></td></tr></table></figure></p><p>重要的是webpack的配置文件，我在这里使用的是 webpack.production.config.js</p><p>在这里，最关键的一点是，如何把打包出来的带hash值的js的文件名传进后端模板中，这时我们需要webpack-manifest-plugin这个东西，</p><p>网上使用的很多推荐直接用inlineManifest去载入进ejs，但实际上非常不符合需求，webpack需要随时开启着，也不好用。直接贴代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">var</span> webpack = <span class="built_in">require</span>(<span class="string">"webpack"</span>);</span><br><span class="line"><span class="keyword">var</span> node_modules_dir = path.resolve(__dirname, <span class="string">'node_modules'</span>);</span><br><span class="line"><span class="keyword">var</span> ManifestPlugin = <span class="built_in">require</span>(<span class="string">'webpack-manifest-plugin'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> config = &#123;</span><br><span class="line">  entry: &#123;</span><br><span class="line">    main: path.resolve(__dirname, <span class="string">'client/index.js'</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  output: &#123;</span><br><span class="line">    path: path.resolve(__dirname, <span class="string">'server/public/static/js'</span>),</span><br><span class="line">    filename: <span class="string">'[name].[chunkhash:16].js'</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    loaders: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">        exclude: <span class="regexp">/node_modules/</span>,</span><br><span class="line">        loader: <span class="string">'babel-loader?presets[]=es2015&amp;presets[]=react'</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.css$/</span>, <span class="comment">// Only .css files</span></span><br><span class="line">        exclude: <span class="regexp">/node_modules/</span>,</span><br><span class="line">        use: [<span class="string">'style-loader'</span>,<span class="string">'css-loader'</span> ]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins:[</span><br><span class="line">    <span class="keyword">new</span> ManifestPlugin(&#123;</span><br><span class="line">      fileName: <span class="string">'my-manifest.json'</span></span><br><span class="line">    &#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = config;</span><br></pre></td></tr></table></figure><p>这里会在打包出的js同目录下生成一个json，记录了文件名。</p><p>所以这时候，我们就可以去express中间件里写功能去提取文件名，<del>这里我遇到了非常大的坑，虽然解决了，但都不好意思说出来</del>，然后呢，用了非常粗暴的方法…</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mymanifest = <span class="built_in">require</span>(<span class="string">"../public/static/js/my-manifest"</span>);</span><br><span class="line"><span class="keyword">var</span> exportFileName = mymanifest[<span class="string">"main.js"</span>];</span><br><span class="line"><span class="keyword">var</span> filestring = <span class="string">'&lt;script src="/static/js/'</span> + exportFileName + <span class="string">'"&gt;&lt;/script&gt;'</span></span><br></pre></td></tr></table></figure><p>中间件改造完成，可以直接render进模板了</p><hr><h3 id="模板部分"><a href="#模板部分" class="headerlink" title="模板部分"></a>模板部分</h3><p>简单粗暴orz<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">%</span> <span class="attr">if</span> (<span class="attr">env</span> !== <span class="string">"production"</span> ) &#123; %&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"/bundle.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%</span> &#125; <span class="attr">else</span> &#123; %&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">%-</span> <span class="attr">jsfile</span> %&gt;</span> <span class="comment">&lt;!-- jsfile是从render传过来的值“-”是为了防止被转译 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%</span> &#125; %&gt;</span></span><br></pre></td></tr></table></figure></p><p>这时候，run一下build，webpack打包出东西，再start，就是标准生产的服务状态</p><hr><h4 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h4><p><a href="http://acgtofe.com/posts/2016/02/full-live-reload-for-express-with-webpack" target="_blank" rel="external">http://acgtofe.com/posts/2016/02/full-live-reload-for-express-with-webpack</a><br><a href="https://doc.webpack-china.org/guides/caching/" target="_blank" rel="external">https://doc.webpack-china.org/guides/caching/</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在之前的造轮子的过程中，前后端分离开来写实在蛋疼，所以最近决定研究并折腾一下前后端工程一体化。&lt;/p&gt;
&lt;p&gt;在这样的实时的环境中，最重要的是做好前后端之间的协调作用，说白了，也就是路径规划问题与热刷新问题。&lt;/p&gt;
&lt;p&gt;在我的项目中，我选择开发和生产的环境的加载代码制作两份，只有模板，中间件什么的代码的通用。(网上推崇使用env变量来加载热更新组件，但是本人并不推崇全部使用env)&lt;/p&gt;
&lt;p&gt;主要就是分析几项内容，除了工程的路径规划，一是开发代码(app.js)，二是生产代码(server.js)，最后还有模板引擎的调整&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>一个非常好用的npm包管理工具npm-check</title>
    <link href="https://www.yuyanlab.com/post/npm-check/"/>
    <id>https://www.yuyanlab.com/post/npm-check/</id>
    <published>2017-04-16T07:57:00.000Z</published>
    <updated>2017-11-12T15:53:01.658Z</updated>
    
    <content type="html"><![CDATA[<p>很多做node.js开发的小伙伴呢都遇到这样一个问题：我全局安装的脚手架，如何升级。或者，我某个项目里，很多组件都大幅更新了，增加了很多好用的新特性，我该如何去升级我所想升级的组件呢。常规使用的npm update呢，又不是很好用。偶然发现了这个好用的工具，分享给大家。</p><p>首先安装 <code>sudo npm install npm-check -g</code></p><p>然后，你就可以在该项目执行<code>npm-check</code>即可查看该项目下的依赖情况和新版的依赖情况，emoji表情意外萌呢~</p><p>它还会检测你在工程里import进的依赖，没有用到的依赖还会提示你去移除它。提示非常丰富。</p><p>// 分割线，首页不放图o(<em>////▽////</em>)q<br><a id="more"></a></p><p><img src="/img/npm-check-2.png" alt=""></p><p>如需升级工程下的依赖的话，在工程目录下执行<code>npm-check -u</code>，即可检查出可以升级的组件，空格选择，回车开始升级</p><p><img src="/img/npm-check-1.png" alt=""></p><p>如果是升级诸如脚手架之类的全局组件，执行<code>sudo npm-check -u -g</code>，使用同理。</p><p>主要用法就这两个，其他用法使用<code>npm-check --help</code>查看即可。</p><p>恩，就酱紫~</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;很多做node.js开发的小伙伴呢都遇到这样一个问题：我全局安装的脚手架，如何升级。或者，我某个项目里，很多组件都大幅更新了，增加了很多好用的新特性，我该如何去升级我所想升级的组件呢。常规使用的npm update呢，又不是很好用。偶然发现了这个好用的工具，分享给大家。&lt;/p&gt;
&lt;p&gt;首先安装 &lt;code&gt;sudo npm install npm-check -g&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;然后，你就可以在该项目执行&lt;code&gt;npm-check&lt;/code&gt;即可查看该项目下的依赖情况和新版的依赖情况，emoji表情意外萌呢~&lt;/p&gt;
&lt;p&gt;它还会检测你在工程里import进的依赖，没有用到的依赖还会提示你去移除它。提示非常丰富。&lt;/p&gt;
&lt;p&gt;// 分割线，首页不放图o(&lt;em&gt;////▽////&lt;/em&gt;)q&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>在墙内部署docker镜像的正确姿势</title>
    <link href="https://www.yuyanlab.com/post/docker_cn/"/>
    <id>https://www.yuyanlab.com/post/docker_cn/</id>
    <published>2017-03-21T14:22:00.000Z</published>
    <updated>2017-11-12T15:53:01.658Z</updated>
    
    <content type="html"><![CDATA[<h4 id="说换镜像什么的都是扯淡，根本无法好好使用。"><a href="#说换镜像什么的都是扯淡，根本无法好好使用。" class="headerlink" title="说换镜像什么的都是扯淡，根本无法好好使用。"></a>说换镜像什么的都是扯淡，根本无法好好使用。</h4><p>本文将会告诉你在墙内部署docker应用的正确姿势。</p><h4 id="本文基于Ubuntu-16-04测试环境，大部分具有systemctl的系统都同样可行，适用于物理服务器和云服务器。"><a href="#本文基于Ubuntu-16-04测试环境，大部分具有systemctl的系统都同样可行，适用于物理服务器和云服务器。" class="headerlink" title="本文基于Ubuntu 16.04测试环境，大部分具有systemctl的系统都同样可行，适用于物理服务器和云服务器。"></a>本文基于Ubuntu 16.04测试环境，大部分具有systemctl的系统都同样可行，适用于物理服务器和云服务器。</h4><p>如果你的环境是aliyun ecs请前往<code>/etc/apt/source.list</code>里把所有mirrors.aliyuncs.com的镜像注释掉！</p><p>检查内核是否需要升级 <code>uname -a</code>查看，大于3.16即可。如果小于3.16，可以按照这篇教程换掉你的内核并提升你的服务器性能: <a href="https://emiria.io/post/TCP-BBR/" target="_blank" rel="external">https://emiria.io/post/TCP-BBR/</a></p><h4 id="接下来是具体步骤。"><a href="#接下来是具体步骤。" class="headerlink" title="接下来是具体步骤。"></a>接下来是具体步骤。</h4><a id="more"></a><p>首先 <code>apt-get update</code></p><p>安装screen：<code>apt-get install screen</code><br>建立一个screen窗口：<code>screen -S installDocker</code></p><p>然后，安装配置shadowsocks（没代理玩个鬼）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">apt-get install python</span><br><span class="line">apt-get install python-pip</span><br><span class="line">pip install shadowsocks</span><br></pre></td></tr></table></figure></p><p>在Ubuntu1604上，可能安装ss会报错：<code>locale.Error: unsupported locale setting</code><br>输入<code>export LC_ALL=C</code>即可。</p><p>在方便的位置建立一个 ss.json并在里面根据实际情况填入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;server&quot;: &quot;11.22.33.44&quot;,</span><br><span class="line">  &quot;server_port&quot;: 40002,</span><br><span class="line">  &quot;local_port&quot;: 1080,</span><br><span class="line">  &quot;password&quot;: &quot;123123123&quot;,</span><br><span class="line">  &quot;timeout&quot;: 600,</span><br><span class="line">  &quot;method&quot;: &quot;aes-256-cfb&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>启动shadowssocks<br><code>sslocal -c ss.json -d start</code><br>PS：如果机器重启后需要重新执行</p><p>我们需要一个工具来吧socks5代理转换为http代理&gt;&gt; polipo<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install polipo</span><br></pre></td></tr></table></figure></p><p>修改<code>/etc/polipo/config</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">logSyslog = true</span><br><span class="line">logFile = /var/log/polipo/polipo.log</span><br><span class="line">proxyAddress = &quot;0.0.0.0&quot;</span><br><span class="line">socksParentProxy = &quot;127.0.0.1:1080&quot;</span><br><span class="line">socksProxyType = socks5</span><br><span class="line">chunkHighMark = 50331648</span><br><span class="line">objectHighMark = 16384</span><br><span class="line">serverMaxSlots = 64</span><br><span class="line">serverSlots = 16</span><br><span class="line">serverSlots1 = 32</span><br></pre></td></tr></table></figure></p><p>重启polipo：<code>/etc/init.d/polipo restart</code></p><p>配置代理<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export http_proxy=&quot;http://127.0.0.1:8123/&quot;</span><br><span class="line">export https_proxy=&quot;http://127.0.0.1:8123/&quot;</span><br></pre></td></tr></table></figure></p><h3 id="注意：此方法只在当前tty下有效，重启或开启新的tty或者screen窗口后需要重新执行export配置，关闭unset-http-proxy。"><a href="#注意：此方法只在当前tty下有效，重启或开启新的tty或者screen窗口后需要重新执行export配置，关闭unset-http-proxy。" class="headerlink" title="注意：此方法只在当前tty下有效，重启或开启新的tty或者screen窗口后需要重新执行export配置，关闭unset http_proxy。"></a>注意：此方法只在当前tty下有效，重启或开启新的tty或者screen窗口后需要重新执行export配置，关闭<code>unset http_proxy</code>。</h3><p>你可以使用 <code>curl myip.ipip.net</code>命令来校验代理是否开启成功。</p><p>这时，你可以愉悦的在全局代理下安装docker了<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -qO- https://get.docker.io/ | sh</span><br></pre></td></tr></table></figure></p><h4 id="关于docker的http代理"><a href="#关于docker的http代理" class="headerlink" title="关于docker的http代理"></a>关于docker的http代理</h4><p>以下docker代理的配置文件摘自docker官网，亲测可行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /etc/systemd/system/docker.service.d</span><br></pre></td></tr></table></figure><p>在<code>/etc/systemd/system/docker.service.d/http-proxy.conf</code>中写入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[Service]</span><br><span class="line">Environment=&quot;HTTP_PROXY=http://127.0.0.1:8123/&quot;</span><br></pre></td></tr></table></figure></p><p>然后<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure></p><p>使用<code>systemctl show --property=Environment docker</code>来查看是否写入成功。</p><p>到此为止，应付大部分docker容器应该是够了！</p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;说换镜像什么的都是扯淡，根本无法好好使用。&quot;&gt;&lt;a href=&quot;#说换镜像什么的都是扯淡，根本无法好好使用。&quot; class=&quot;headerlink&quot; title=&quot;说换镜像什么的都是扯淡，根本无法好好使用。&quot;&gt;&lt;/a&gt;说换镜像什么的都是扯淡，根本无法好好使用。&lt;/h4&gt;&lt;p&gt;本文将会告诉你在墙内部署docker应用的正确姿势。&lt;/p&gt;
&lt;h4 id=&quot;本文基于Ubuntu-16-04测试环境，大部分具有systemctl的系统都同样可行，适用于物理服务器和云服务器。&quot;&gt;&lt;a href=&quot;#本文基于Ubuntu-16-04测试环境，大部分具有systemctl的系统都同样可行，适用于物理服务器和云服务器。&quot; class=&quot;headerlink&quot; title=&quot;本文基于Ubuntu 16.04测试环境，大部分具有systemctl的系统都同样可行，适用于物理服务器和云服务器。&quot;&gt;&lt;/a&gt;本文基于Ubuntu 16.04测试环境，大部分具有systemctl的系统都同样可行，适用于物理服务器和云服务器。&lt;/h4&gt;&lt;p&gt;如果你的环境是aliyun ecs请前往&lt;code&gt;/etc/apt/source.list&lt;/code&gt;里把所有mirrors.aliyuncs.com的镜像注释掉！&lt;/p&gt;
&lt;p&gt;检查内核是否需要升级 &lt;code&gt;uname -a&lt;/code&gt;查看，大于3.16即可。如果小于3.16，可以按照这篇教程换掉你的内核并提升你的服务器性能: &lt;a href=&quot;https://emiria.io/post/TCP-BBR/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://emiria.io/post/TCP-BBR/&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;接下来是具体步骤。&quot;&gt;&lt;a href=&quot;#接下来是具体步骤。&quot; class=&quot;headerlink&quot; title=&quot;接下来是具体步骤。&quot;&gt;&lt;/a&gt;接下来是具体步骤。&lt;/h4&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Dell R410服务器踩坑总结</title>
    <link href="https://www.yuyanlab.com/post/DellR410-BIOS/"/>
    <id>https://www.yuyanlab.com/post/DellR410-BIOS/</id>
    <published>2017-03-03T15:10:00.000Z</published>
    <updated>2017-11-12T15:53:01.658Z</updated>
    
    <content type="html"><![CDATA[<p>翘了大学语文课去机房上架服务器被语文老师抓到，这种事情一定是终生难忘的（哭）。</p><p>好了，以下来介绍所踩的坑。</p><p>某202.xxx.xxx.xxx/28的ip是我们社团的服务器所使用，但由于年久失修，宕了只有一台了orz，于是fix的这个任务就落到了我的头上了orz。</p><p>由于是接手的，只留下了一个记录了密码和用户名什么的文档来，只能靠自己摸索，架构是多台Apache+php环境组成的集群和一台数据库服务器组成，具体配置无法测试（基本的命令都缺失，有必要全部重做系统了），内网带宽实测100mbps。但数据库服务器的raid早已坏掉，各种丢数据，唯一剩下来的一台也不敢动，于是，只能贡献出我自己的R410了。</p><p>R410的网卡是博通一种服务器网卡，很可惜Debian初始并不带网卡驱动，需要后续在没网的情况下手动安装，故舍弃Debian。Ubuntu 16.04.2 LTS在写入系统时又发生失败。centos才是最适合R410的系统orz。</p><p>R410集成了非常强大的BIOS和远控卡，然而正是强大，导致了使用不是很方便，个人非常不推荐使用UEFI引导，而且也非常不好用。<br>在不小心按了F10进入了UEFI后，你将会经历漫长的等待，看着<code>Initializing UEFI,Please wait...</code>(&gt;=1hr)，而且极有可能加载失败。所以我们要做的就是，关闭电源，再开启电源，加载完BIOS后迅速按下Ctrl 和E键，进入菜单，进入System Services选项菜单里并把它关掉。保存退出，继续加载bios的过程中再去F11里选择u盘启动。</p><p>安装完centos后有个非常恶心的阅读协议，这个只能Good luck了。在实际上架服务器中，我们不可能使用DHCP协议获取ip，只能手动配置ip，在参考另外一台服务器的配置文件后顺利完成了ip的配置，其实图形化界面下的centos配置防火墙很容易23333333</p><p>PS：机房老师中途进来看到raid的配置和机器上4个盘位只插了一块盘有点想笑，我能怎么办，我也没钱买硬盘哇(╯‵□′)╯︵┻━┻</p><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;翘了大学语文课去机房上架服务器被语文老师抓到，这种事情一定是终生难忘的（哭）。&lt;/p&gt;
&lt;p&gt;好了，以下来介绍所踩的坑。&lt;/p&gt;
&lt;p&gt;某202.xxx.xxx.xxx/28的ip是我们社团的服务器所使用，但由于年久失修，宕了只有一台了orz，于是fix的这个任务就落到了我的头上了orz。&lt;/p&gt;
&lt;p&gt;由于是接手的，只留下了一个记录了密码和用户名什么的文档来，只能靠自己摸索，架构是多台Apache+php环境组成的集群和一台数据库服务器组成，具体配置无法测试（基本的命令都缺失，有必要全部重做系统了），内网带宽实测100mbps。但数据库服务器的raid早已坏掉，各种丢数据，唯一剩下来的一台也不敢动，于是，只能贡献出我自己的R410了。&lt;/p&gt;
&lt;p&gt;R410的网卡是博通一种服务器网卡，很可惜Debian初始并不带网卡驱动，需要后续在没网的情况下手动安装，故舍弃Debian。Ubuntu 16.04.2 LTS在写入系统时又发生失败。centos才是最适合R410的系统orz。&lt;/p&gt;
&lt;p&gt;R410集成了非常强大的BIOS和远控卡，然而正是强大，导致了使用不是很方便，个人非常不推荐使用UEFI引导，而且也非常不好用。&lt;br&gt;在不小心按了F10进入了UEFI后，你将会经历漫长的等待，看着&lt;code&gt;Initializing UEFI,Please wait...&lt;/code&gt;(&amp;gt;=1hr)，而且极有可能加载失败。所以我们要做的就是，关闭电源，再开启电源，加载完BIOS后迅速按下Ctrl 和E键，进入菜单，进入System Services选项菜单里并把它关掉。保存退出，继续加载bios的过程中再去F11里选择u盘启动。&lt;/p&gt;
&lt;p&gt;安装完centos后有个非常恶心的阅读协议，这个只能Good luck了。在实际上架服务器中，我们不可能使用DHCP协议获取ip，只能手动配置ip，在参考另外一台服务器的配置文件后顺利完成了ip的配置，其实图形化界面下的centos配置防火墙很容易23333333&lt;/p&gt;
&lt;p&gt;PS：机房老师中途进来看到raid的配置和机器上4个盘位只插了一块盘有点想笑，我能怎么办，我也没钱买硬盘哇(╯‵□′)╯︵┻━┻&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Omega2Plus上手体验</title>
    <link href="https://www.yuyanlab.com/post/Omega2-Getstart/"/>
    <id>https://www.yuyanlab.com/post/Omega2-Getstart/</id>
    <published>2017-02-10T19:24:00.000Z</published>
    <updated>2017-11-12T15:53:01.658Z</updated>
    
    <content type="html"><![CDATA[<p>好吧，我相信这是国内首发上手测评 #(手动滑稽)</p><p>Omega2是onion公司搞出的一款超迷你的IOT设备，体积非常迷你，12月参与的众筹，春节后收到的东西（顺丰发货好评）。</p><p>这款东西最大的特色是小而丰富，而且价格便宜，标准版5$，Plus版是9$，我参与的呢是plus版。</p><p>先来几张低清有码</p><p><img src="/img/Omega2-1.JPG" alt=""></p><a id="more"></a><p><img src="/img/Omega2-2.JPG" alt=""><br><img src="/img/Omega2-3.JPG" alt=""><br><img src="/img/Omega2-4.jpg" alt=""></p><p>这plus拥有一颗580MHz的处理器128MB的内存，32MB的储存，但支持TF卡，自带wifi。</p><p>官方推出了类似积木的dock扩展，然而价格较贵，不推荐。<br>15个脚的GPIO接口，可以各种折腾，官方提供了接口图。<br><img src="/img/Omega2GPIO.png" alt=""></p><p>图片源自onion</p><p>我怎么可能老老实实买dock拓展呢哈哈哈）但是针脚不兼容面包板，注意不要硬怼，正确的姿势应该使用杜邦线，把供电的3.3和GND接入到供电板上（某宝很便宜），这时，可以给板子加电了。加电之后，Omega2会自己建立个wifi，然后用自己的电脑连上这个wifi就可以初始化你的onion。</p><p>支持的编程语言也非常多，C艹，ruby，nodejs，php，python（理论上c也可以）orz</p><p>至于该怎么做，官方文档写的非常清楚，非常适合小白入门，非常友好，链接-&gt; <a href="https://docs.onion.io" target="_blank" rel="external">https://docs.onion.io</a> (英文版)</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;好吧，我相信这是国内首发上手测评 #(手动滑稽)&lt;/p&gt;
&lt;p&gt;Omega2是onion公司搞出的一款超迷你的IOT设备，体积非常迷你，12月参与的众筹，春节后收到的东西（顺丰发货好评）。&lt;/p&gt;
&lt;p&gt;这款东西最大的特色是小而丰富，而且价格便宜，标准版5$，Plus版是9$，我参与的呢是plus版。&lt;/p&gt;
&lt;p&gt;先来几张低清有码&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/Omega2-1.JPG&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>React.js折腾小计</title>
    <link href="https://www.yuyanlab.com/post/first-learning-react-experience/"/>
    <id>https://www.yuyanlab.com/post/first-learning-react-experience/</id>
    <published>2017-02-08T07:57:00.000Z</published>
    <updated>2017-11-12T15:53:01.658Z</updated>
    
    <content type="html"><![CDATA[<p>我不会告诉你这篇文章是折腾了ng1，vue，react三大框架之后才写的QvQ</p><p>好了废话不多说了，为什么我会跳入这个坑，最早是因为在express框架中，注册表单在用户填写后得通过post请求传回到后端再写入数据库，然而又不想碰jQuery这个东西，所以想到了用目前流行想这些框架。</p><p>一开始是用ng1，然后根据phonecat的教程构建出了应用，然而也用了原始的方法，一个angular.js一个angular-router.js再加一个app.js实现的。<br>当然这样被 <a href="http://blog.zhangrgk.ninja" target="_blank" rel="external">锐神</a>等dalao吐槽了，于是乎尝试锐神他们较为推荐的vue来构建，但是vue虽然轻量，但是在模板实现上，以及子父绑定上并不友好，并且vue的社区支持并不友好，对于新手来学习上手并不友好，没有手把手的案例来教你做应用，即使，vue推出了vue-cli这个东西，然而，由于太多报错不知道如何解决，故放弃，最后采用了react实现了项目，并熟悉了webpack打包模式。</p><p>这个项目呢，是一个不依托后端程序的单页应用，（导航站），为什么不直接写死html呢，废话！当然是为了便于维护(╯‵□′)╯︵┻━┻，同时也是为了后期升级做打算，因为，未来打算做成一个综合门户，页眉页脚直接写死html，到content里在调用react形成app，content目前只是通过几个路由，每个路由下get一个json，列出导航条目，后期的话，把菜单导航升级成二级的，就可以调用比如论坛等的api实现一个综合门户。</p><p>react的hash路由系统默认会抛出一个 “? k=xxxxx”的东西，google一圈，so上有大佬解释说这是为了方便判断什么时候点的某个链接，也有相应的隐藏的解决方案。<br>但是窝不打算隐藏，url嘛，总要带些 &amp;?_ 什么的才有逼格嘛2333333。</p><p>webpack打包模式非常赞，尽管他给我打包出个32k行的js…，但webpack用得不是特别熟悉的情况下，不要乱import进css。（包括我<em>(:з」∠)</em> ）</p><p>react目前才学习了冰山一角，开学后继续学习，该应用也很快将会上线，下一篇博文会写一下该应用的实现ovo。</p><p>PS：jsx的写法实在太赞了！另外webpack -p后不要在编辑器里乱点编译好的js（。别问我为什么Orz）</p><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我不会告诉你这篇文章是折腾了ng1，vue，react三大框架之后才写的QvQ&lt;/p&gt;
&lt;p&gt;好了废话不多说了，为什么我会跳入这个坑，最早是因为在express框架中，注册表单在用户填写后得通过post请求传回到后端再写入数据库，然而又不想碰jQuery这个东西，所以想到了用目前流行想这些框架。&lt;/p&gt;
&lt;p&gt;一开始是用ng1，然后根据phonecat的教程构建出了应用，然而也用了原始的方法，一个angular.js一个angular-router.js再加一个app.js实现的。&lt;br&gt;当然这样被 &lt;a href=&quot;http://blog.zhangrgk.ninja&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;锐神&lt;/a&gt;等dalao吐槽了，于是乎尝试锐神他们较为推荐的vue来构建，但是vue虽然轻量，但是在模板实现上，以及子父绑定上并不友好，并且vue的社区支持并不友好，对于新手来学习上手并不友好，没有手把手的案例来教你做应用，即使，vue推出了vue-cli这个东西，然而，由于太多报错不知道如何解决，故放弃，最后采用了react实现了项目，并熟悉了webpack打包模式。&lt;/p&gt;
&lt;p&gt;这个项目呢，是一个不依托后端程序的单页应用，（导航站），为什么不直接写死html呢，废话！当然是为了便于维护(╯‵□′)╯︵┻━┻，同时也是为了后期升级做打算，因为，未来打算做成一个综合门户，页眉页脚直接写死html，到content里在调用react形成app，content目前只是通过几个路由，每个路由下get一个json，列出导航条目，后期的话，把菜单导航升级成二级的，就可以调用比如论坛等的api实现一个综合门户。&lt;/p&gt;
&lt;p&gt;react的hash路由系统默认会抛出一个 “? k=xxxxx”的东西，google一圈，so上有大佬解释说这是为了方便判断什么时候点的某个链接，也有相应的隐藏的解决方案。&lt;br&gt;但是窝不打算隐藏，url嘛，总要带些 &amp;amp;?_ 什么的才有逼格嘛2333333。&lt;/p&gt;
&lt;p&gt;webpack打包模式非常赞，尽管他给我打包出个32k行的js…，但webpack用得不是特别熟悉的情况下，不要乱import进css。（包括我&lt;em&gt;(:з」∠)&lt;/em&gt; ）&lt;/p&gt;
&lt;p&gt;react目前才学习了冰山一角，开学后继续学习，该应用也很快将会上线，下一篇博文会写一下该应用的实现ovo。&lt;/p&gt;
&lt;p&gt;PS：jsx的写法实在太赞了！另外webpack -p后不要在编辑器里乱点编译好的js（。别问我为什么Orz）&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>你好2017</title>
    <link href="https://www.yuyanlab.com/post/WelcomeTo2017/"/>
    <id>https://www.yuyanlab.com/post/WelcomeTo2017/</id>
    <published>2016-12-31T16:00:00.000Z</published>
    <updated>2017-11-12T15:53:01.658Z</updated>
    
    <content type="html"><![CDATA[<p>欢迎2017的到来，祝大家新年快乐o(* ≧▽≦)ツ</p><p>在2016这段时间里，我没什么拿得出手的东西，博客更新慢了许多，主要还是没有多少时间来折腾。<br>花了大量时间应付高数和英语，却没取得什么成绩，险些挂科，花在计算机上的时间也不多，除了学习到了很多c语言的知识外，也学了一些nodejs，尝试使用express框架写了些东西，也学到了一些关于jQuery的知识，但离生产还差得很远很远，感觉有些迷茫。<br>当然，我也结识一些dalao朋友，通过交流讨论学到了很多。</p><p>2017，一起加油吧！<br><a id="more"></a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;欢迎2017的到来，祝大家新年快乐o(* ≧▽≦)ツ&lt;/p&gt;
&lt;p&gt;在2016这段时间里，我没什么拿得出手的东西，博客更新慢了许多，主要还是没有多少时间来折腾。&lt;br&gt;花了大量时间应付高数和英语，却没取得什么成绩，险些挂科，花在计算机上的时间也不多，除了学习到了很多c语言的知识外，也学了一些nodejs，尝试使用express框架写了些东西，也学到了一些关于jQuery的知识，但离生产还差得很远很远，感觉有些迷茫。&lt;br&gt;当然，我也结识一些dalao朋友，通过交流讨论学到了很多。&lt;/p&gt;
&lt;p&gt;2017，一起加油吧！&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Centos安装Munin服务器监控系统</title>
    <link href="https://www.yuyanlab.com/post/Munin-setup/"/>
    <id>https://www.yuyanlab.com/post/Munin-setup/</id>
    <published>2016-12-31T14:34:00.000Z</published>
    <updated>2017-11-12T15:53:01.658Z</updated>
    
    <content type="html"><![CDATA[<p>为什么窝选择Munin系统，原因很简单，安全，轻量快速，可分析性强。</p><p>其实很多开源镜像站和一些老网站都采用这个系统，历史悠久，占用小，各种强悍的图表</p><p>Munin分为监控机软件(munin)和被监控机软件(munin-node),两个，其中一台机器上必须都安装（作为监控机）其余机器安装munin-node即可</p><p>安装非常简单。munin基于Perl，我们应该先装好perl全家桶。由于rrdtool在epel源里才有，所以我们应该提前设置epel源。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install munin munin-common munin-node rrdtool</span><br></pre></td></tr></table></figure></p><p>这是两个非常重要的配置文件位置，关于如何增加节点在配置文件里都有配置说明和例子<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/etc/munin/munin.conf  #主监控机配置</span><br><span class="line">/etc/munin/munin-node.conf  #节点机器配置</span><br></pre></td></tr></table></figure></p><p>有关nginx访问也很简单，munin安装好后，默认已经生成在<code>/var/www/html/munin/</code>下，我们只需把网站配置文件的location指向这个目录即可</p><p>munin默认记录监控日志，并自动压缩储存在<code>/var/log/munin</code>下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service munin-node start</span><br></pre></td></tr></table></figure><p>我在使用中发现一个巨大问题，就是网页不会刷新，于是尝试手动刷新<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/bin/munin-cron</span><br></pre></td></tr></table></figure></p><p>但是返回这个错误<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">This program will easily break if you run it as root as you are</span><br><span class="line">trying now.  Please run it as user &apos;nobody&apos;.  The correct &apos;su&apos; command</span><br><span class="line">on many systems is &apos;su - munin --shell=/bin/bash&apos;</span><br><span class="line">Aborting.</span><br></pre></td></tr></table></figure></p><p>OK,我们切换到munin用户，当再次执行的时候，又报错<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[ERROR] Could not copy contents from /etc/munin/static/ to /[path to static file] at /usr/share/perl5/vendor_perl/Munin/Master/HTMLOld.pm line 716.</span><br></pre></td></tr></table></figure></p><p>Google一圈，找到解决方案<a href="http://serverfault.com/questions/605226/munin-cron-unable-to-copy-contents" target="_blank" rel="external">http://serverfault.com/questions/605226/munin-cron-unable-to-copy-contents</a><br>明显是epel源那堆打包的工程师粗心好不好orz，好在可以结决了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">su - munin --shell=/bin/bash  #切换到munin用户</span><br><span class="line">chown -R munin:munin  /var/www/html/munin  #更改权限</span><br><span class="line">exit #返回root用户</span><br></pre></td></tr></table></figure><p>等五分钟你就可以看到正常刷新了</p><p>默认监听端口4949，多机集群别忘了放行端口。<br><a id="more"></a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;为什么窝选择Munin系统，原因很简单，安全，轻量快速，可分析性强。&lt;/p&gt;
&lt;p&gt;其实很多开源镜像站和一些老网站都采用这个系统，历史悠久，占用小，各种强悍的图表&lt;/p&gt;
&lt;p&gt;Munin分为监控机软件(munin)和被监控机软件(munin-node),两个，其中一台机器上必须都安装（作为监控机）其余机器安装munin-node即可&lt;/p&gt;
&lt;p&gt;安装非常简单。munin基于Perl，我们应该先装好perl全家桶。由于rrdtool在epel源里才有，所以我们应该提前设置epel源。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;yum install munin munin-common munin-node rrdtool&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这是两个非常重要的配置文件位置，关于如何增加节点在配置文件里都有配置说明和例子&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;/etc/munin/munin.conf  #主监控机配置&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/etc/munin/munin-node.conf  #节点机器配置&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;有关nginx访问也很简单，munin安装好后，默认已经生成在&lt;code&gt;/var/www/html/munin/&lt;/code&gt;下，我们只需把网站配置文件的location指向这个目录即可&lt;/p&gt;
&lt;p&gt;munin默认记录监控日志，并自动压缩储存在&lt;code&gt;/var/log/munin&lt;/code&gt;下&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;service munin-node start&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;我在使用中发现一个巨大问题，就是网页不会刷新，于是尝试手动刷新&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;/usr/bin/munin-cron&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;但是返回这个错误&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;This program will easily break if you run it as root as you are&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;trying now.  Please run it as user &amp;apos;nobody&amp;apos;.  The correct &amp;apos;su&amp;apos; command&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;on many systems is &amp;apos;su - munin --shell=/bin/bash&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Aborting.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;OK,我们切换到munin用户，当再次执行的时候，又报错&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[ERROR] Could not copy contents from /etc/munin/static/ to /[path to static file] at /usr/share/perl5/vendor_perl/Munin/Master/HTMLOld.pm line 716.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Google一圈，找到解决方案&lt;a href=&quot;http://serverfault.com/questions/605226/munin-cron-unable-to-copy-contents&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://serverfault.com/questions/605226/munin-cron-unable-to-copy-contents&lt;/a&gt;&lt;br&gt;明显是epel源那堆打包的工程师粗心好不好orz，好在可以结决了&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;su - munin --shell=/bin/bash  #切换到munin用户&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;chown -R munin:munin  /var/www/html/munin  #更改权限&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;exit #返回root用户&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;等五分钟你就可以看到正常刷新了&lt;/p&gt;
&lt;p&gt;默认监听端口4949，多机集群别忘了放行端口。&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>关于阿里云糟糕的工单服务</title>
    <link href="https://www.yuyanlab.com/post/Aliyun-Bad-Work-Order/"/>
    <id>https://www.yuyanlab.com/post/Aliyun-Bad-Work-Order/</id>
    <published>2016-12-30T13:36:00.000Z</published>
    <updated>2017-11-12T15:53:01.658Z</updated>
    
    <content type="html"><![CDATA[<p>本文除了暴露了一些阿里云的问题外，有些个人的情绪，故折叠。</p><a id="more"></a><p>关于阿里云糟糕的工单的服务，让我怀疑他们售后工程师的linux运维水平。</p><p>原本我对阿里云的印象非常好，在之前使用阿里云的各种服务都给了我非常好的体验，直到这次才发现糟糕的一面。</p><p>具体问题详见对话<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">我：ecs只有22端口可以访问，服务器上防火墙已经关了（debian8 iptables），但浏览器显示访问被拒绝，</span><br><span class="line">    Nginx监听端口正常（非80端口，用的是5000和7000），在云服务器上telnet localhost 7000是正常的，</span><br><span class="line">    但我这里的计算机telnet到ecs显示被拒，阿里云ecs内网组策略全部放行，如何处理？</span><br><span class="line"></span><br><span class="line">工程师：我这测试7000端口是不通的，22端口正常，建议您提供一下端口监听的截图，我这核实一下，谢谢</span><br></pre></td></tr></table></figure></p><p>于是我把截图抛过去了<br><img src="/img/aliyunwo.png" alt=""><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">工程师：您好，查看端口是正常监听的，这个是不需要设置什么的，建议您提供服务器的ip地址和远程账号密码、端口，以便我们来登录检查，</span><br><span class="line">       问题处理后请您及时更改密码。注意：不需要提供登录阿里云控制台的帐号和密码。</span><br><span class="line">       我这登录核实一下，谢谢</span><br></pre></td></tr></table></figure></p><p>OK没问题，你自家的东西你们很清楚，我上面也没什么，就编译了一个nginx而已，我把密码就发过去了<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">工程师：看您的主机内部还存在防火墙设置配置的，我这边是否可以为您尝试关闭下，或者是您自行关闭下然后在查看下</span><br></pre></td></tr></table></figure></p><p>我告诉他，随你怎么折腾，能用就行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">工程师：目前我们测试/etc/init.d/iptables和service以及systemctl都无法关闭您的防火墙，</span><br><span class="line">您是否如何安装的防火墙，建议您远程后关闭下您的防火墙重新测试核实下</span><br></pre></td></tr></table></figure></p><p>这时我心中：excuse me？？？没看到关闭防火墙时都显示了failed 防火墙未加载么，明明都没开你跟我说关不掉？？？<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">我：    防火墙压根就是关闭的，系统也是用你们的初始镜像debian8的，</span><br><span class="line">        并且也只是安装了nginx+mysql+php的环境，没有对防火墙什么的做过更改，我尝试卸掉iptables，并且成功了。</span><br><span class="line">        重启进入系统后，用python建立了个简单的http服务，但是这回不是拒绝了访问，是响应时间过长，</span><br><span class="line">        我不清楚你们的debian是不是做了什么黑科技魔改？</span><br><span class="line"></span><br><span class="line">工程师：  您好，阿里云提供的都是纯净的镜像，没有任何限制，我方测试您的服务器5000和7000端口都未监听，请您核实</span><br></pre></td></tr></table></figure></p><p>我差点说，不想解决问题就明说，没必要这么玩套路，靠你还不如靠我自己。！！(╯°□°）╯︵┻━┻</p><p>按照我个人的分析，要么是它母鸡的防火墙问题，要么它提供的debian镜像有问题，<br>于是我改用centos，和debian7，均正常，换回debian8，还是老问题，所以问题在于它所谓的“纯净的debian8系统”</p><p>呵呵呵</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文除了暴露了一些阿里云的问题外，有些个人的情绪，故折叠。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>TCP-BBR拥塞控制技术的简单分析及使用</title>
    <link href="https://www.yuyanlab.com/post/TCP-BBR/"/>
    <id>https://www.yuyanlab.com/post/TCP-BBR/</id>
    <published>2016-12-16T04:45:00.000Z</published>
    <updated>2017-11-12T15:53:01.658Z</updated>
    
    <content type="html"><![CDATA[<p>TCP-BBR技术是Google实现的一项技术，在其正式生产环境通过后在ACM queue期刊发表: <a href="http://queue.acm.org/detail.cfm?id=3022184" target="_blank" rel="external">http://queue.acm.org/detail.cfm?id=3022184</a> 并提交到了Linux主线中。<br>这项技术致力于实现在劣质网络下达到较高的稳定性和可用性。</p><p>相信大家对CUCN 和 EAC-C2C 两条丢包率丧心病狂的海底光缆深有感触，许多好盆友都使用了例如锐速或者finalspeed等暴力发包软件来解决这个问题，这类软件虽然自己用得爽了，但是会加剧海底光缆的拥堵，以及可能导致由于你懂得的原因把IP给ban掉。</p><p>在看了相关参考文章后，在这里来分析一下：<br>TCP-BBR技术呢，用了一种溢水原理的思想，来预判丢包率，调配发包速率。<br>假设你有一支较细的U形管，下面还有一堆不可溶的填塞物，你从一边开始大量灌水，如果另一边出水正常，你就可以继续加大灌水量，达到最大带宽。如果另一边发现水时断时有，就证明下面出现了随机拥堵，这时，你就要减小灌水量，等待水位落下。这时如果采用传统继续灌水时，也就会造成水溢出（丢包现象的产生）。所以这是真正的按需发包。当然，这一切是建立在系统预估的情况下。</p><p>以实际情况说，也就是应用程序在创立会话时，这项技术会增加额外少量的的会话，这些会话用于检测带宽和延迟，根据网路设备返回的情况来分析网路质量（确认延迟和带宽口径，以及回避不易确认丢包类型）。另外，这项技术中，BBR接管了TCP的控制权。</p><p>由于这项技术公布的时间也就一周左右，可能会出现许多不稳定和不科学的现象，期待更新以及Google更详细的doc。<br>知乎上的许多大牛也对这项内容进行了详细的分析 <a href="https://www.zhihu.com/question/53559433" target="_blank" rel="external">https://www.zhihu.com/question/53559433</a></p><p>这里是几份权威的文章，较为详细的说明了TCP-BBR技术<br><a href="http://www.thequilt.net/wp-content/uploads/BBR-TCP-Opportunities.pdf" target="_blank" rel="external">http://www.thequilt.net/wp-content/uploads/BBR-TCP-Opportunities.pdf</a><br><a href="http://blog.cerowrt.org/post/bbrs_basic_beauty/" target="_blank" rel="external">http://blog.cerowrt.org/post/bbrs_basic_beauty/</a></p><p>接下来是具体安装运用方面</p><a id="more"></a><p>Linux kernel 4.9已经加入了，我们只需要更新下内核并启用就行了</p><p>更新内核有风险，许多vps都有镜像功能，请镜像一份disk，如果你是单点服务器，也请做好备份！！</p><p>这里是公布的是基于do的Debian8适用的，其他发行版Google一下，如果arch什么的就等下次滚动更新吧233333</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">wget http://kernel.ubuntu.com/~kernel-ppa/mainline/v4.9-rc8/linux-image-4.9.0-040900rc8-generic_4.9.0-040900rc8.201612051443_amd64.deb</span><br><span class="line"></span><br><span class="line">dpkg -i linux-image-4.9.0*.deb   #安装内核</span><br><span class="line"></span><br><span class="line">dpkg -l|grep linux-image  #查看服务器上已存在的内核</span><br><span class="line"></span><br><span class="line">apt-get purge linux-image-3.16.0-4-amd64 #替换成自己的旧内核名称即可，</span><br><span class="line">（可能会有提示另外一个` linux-image-amd64 ` 内核也要删掉，那就删掉吧。</span><br><span class="line"></span><br><span class="line">关于Abort kernel removal选择 No</span><br><span class="line"></span><br><span class="line">update-grub  #更新引导</span><br><span class="line"></span><br><span class="line">reboot #重启</span><br></pre></td></tr></table></figure><p>重启进入系统后，先 <code>uname -a</code> 一下看看内核是否更新成功</p><p>然后执行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;net.core.default_qdisc=fq&quot; &gt;&gt; /etc/sysctl.conf</span><br><span class="line">echo &quot;net.ipv4.tcp_congestion_control=bbr&quot; &gt;&gt; /etc/sysctl.conf</span><br><span class="line">sysctl -p</span><br></pre></td></tr></table></figure></p><p>校验一下 执行 <code>sysctl net.ipv4.tcp_available_congestion_control</code> 返回值有bbr。<br>执行 <code>lsmod | grep bbr</code> 返回值有tcp_bbr。</p><p>最后再重启一下就可以啦ovo</p><p>当你看到这篇文章时，你已经享受到了TCP-BBR技术所带来的速度了。以下是一些须注意的坑</p><p>从kernel官网下的内核更新包仅支持老内核版本在4.3以上的机器更新，所以我们应该使用Ubuntu源的<br>不同系统的grub配置文件可能不一样，灵活处理。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;TCP-BBR技术是Google实现的一项技术，在其正式生产环境通过后在ACM queue期刊发表: &lt;a href=&quot;http://queue.acm.org/detail.cfm?id=3022184&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://queue.acm.org/detail.cfm?id=3022184&lt;/a&gt; 并提交到了Linux主线中。&lt;br&gt;这项技术致力于实现在劣质网络下达到较高的稳定性和可用性。&lt;/p&gt;
&lt;p&gt;相信大家对CUCN 和 EAC-C2C 两条丢包率丧心病狂的海底光缆深有感触，许多好盆友都使用了例如锐速或者finalspeed等暴力发包软件来解决这个问题，这类软件虽然自己用得爽了，但是会加剧海底光缆的拥堵，以及可能导致由于你懂得的原因把IP给ban掉。&lt;/p&gt;
&lt;p&gt;在看了相关参考文章后，在这里来分析一下：&lt;br&gt;TCP-BBR技术呢，用了一种溢水原理的思想，来预判丢包率，调配发包速率。&lt;br&gt;假设你有一支较细的U形管，下面还有一堆不可溶的填塞物，你从一边开始大量灌水，如果另一边出水正常，你就可以继续加大灌水量，达到最大带宽。如果另一边发现水时断时有，就证明下面出现了随机拥堵，这时，你就要减小灌水量，等待水位落下。这时如果采用传统继续灌水时，也就会造成水溢出（丢包现象的产生）。所以这是真正的按需发包。当然，这一切是建立在系统预估的情况下。&lt;/p&gt;
&lt;p&gt;以实际情况说，也就是应用程序在创立会话时，这项技术会增加额外少量的的会话，这些会话用于检测带宽和延迟，根据网路设备返回的情况来分析网路质量（确认延迟和带宽口径，以及回避不易确认丢包类型）。另外，这项技术中，BBR接管了TCP的控制权。&lt;/p&gt;
&lt;p&gt;由于这项技术公布的时间也就一周左右，可能会出现许多不稳定和不科学的现象，期待更新以及Google更详细的doc。&lt;br&gt;知乎上的许多大牛也对这项内容进行了详细的分析 &lt;a href=&quot;https://www.zhihu.com/question/53559433&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://www.zhihu.com/question/53559433&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这里是几份权威的文章，较为详细的说明了TCP-BBR技术&lt;br&gt;&lt;a href=&quot;http://www.thequilt.net/wp-content/uploads/BBR-TCP-Opportunities.pdf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.thequilt.net/wp-content/uploads/BBR-TCP-Opportunities.pdf&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://blog.cerowrt.org/post/bbrs_basic_beauty/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://blog.cerowrt.org/post/bbrs_basic_beauty/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;接下来是具体安装运用方面&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>mbxo 一款专为手机而生的hexo主题</title>
    <link href="https://www.yuyanlab.com/post/mbxo/"/>
    <id>https://www.yuyanlab.com/post/mbxo/</id>
    <published>2016-10-29T11:54:00.000Z</published>
    <updated>2017-11-12T15:53:01.658Z</updated>
    
    <content type="html"><![CDATA[<p>在 mobi.css 发布后，就有了这个想法，能不能做一个非常简洁的博客手机端，即使在 GPRS 网也能以一个不错的速度访问。</p><p>于是乎， 8 月底，雏形完成啦，但是，第四次调试时老机器的硬盘出现了故障，就 gg 了。<br>于是开学了，于是军训，于是各种各样的事情，直到十月中，才用新电脑开始填坑（抽了两个晚自习写了出来 orz ）</p><p>Github:<a href="https://github.com/Alleysakura/hexo-theme-mbxo" target="_blank" rel="external">https://github.com/Alleysakura/hexo-theme-mbxo</a><br>Demo:<a href="https://alleysakura.github.io/hexo-theme-mbxo/" target="_blank" rel="external">https://alleysakura.github.io/hexo-theme-mbxo/</a></p><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在 mobi.css 发布后，就有了这个想法，能不能做一个非常简洁的博客手机端，即使在 GPRS 网也能以一个不错的速度访问。&lt;/p&gt;
&lt;p&gt;于是乎， 8 月底，雏形完成啦，但是，第四次调试时老机器的硬盘出现了故障，就 gg 了。&lt;br&gt;于是开学了，于是军训，于是各种各样的事情，直到十月中，才用新电脑开始填坑（抽了两个晚自习写了出来 orz ）&lt;/p&gt;
&lt;p&gt;Github:&lt;a href=&quot;https://github.com/Alleysakura/hexo-theme-mbxo&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/Alleysakura/hexo-theme-mbxo&lt;/a&gt;&lt;br&gt;Demo:&lt;a href=&quot;https://alleysakura.github.io/hexo-theme-mbxo/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://alleysakura.github.io/hexo-theme-mbxo/&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>利用代理隧道接入HE.net的IPv6网</title>
    <link href="https://www.yuyanlab.com/post/HEnet-ipv6/"/>
    <id>https://www.yuyanlab.com/post/HEnet-ipv6/</id>
    <published>2016-08-23T12:25:00.000Z</published>
    <updated>2017-11-12T15:53:01.658Z</updated>
    
    <content type="html"><![CDATA[<p>IPv6正在成为因特网的主流，但是，很多时候，无论是IDC还是ISP都不一定支持IPv6网络。但是IPv6的地址数量非常多，HE.net家拥有全球最大的IPv6网络，同时他家为了推广IPv6网络，推出了一项非常任性的服务23333333——利用代理隧道接入他家的v6网。<br><img src="/img/he.png" alt=""><br><a id="more"></a><br>首先打开<a href="https://tunnelbroker.net/" target="_blank" rel="external">https://tunnelbroker.net/</a> 右上注册。然后在邮件里的链接里点过去写密码，然后登陆。<br>这时候，就可以开始注册啦，点击create tunnel，如果你要为自己的电脑创建代理的话，直接输入网页上显示的ip就可以了，如果是给你的服务器上使用的话，填上你服务器的ip（v4）然后下面选择一个代理隧道地址，当然你可以用服务器ping一下，看看哪个延迟低。</p><p>确认后就能看到一张表格了（居然还有反查名和任播地址，太良心了）然后上面有个Example Configurations，里面有各种各样系统的配置文件，按照你的系统修改即可23333</p><p>当然以后修改也还是可以滴（他也提供的api修改的接口，任性发挥吧233333），HE.net任性的分了一大块地址给你，所以，只要稍懂一点路由原理，可以给你的局域网的每台机器都分配一个地址（包括各种虚拟化的的机器），不过博主也没有具体尝试过，以后有机会再试试吧。</p><p>HE.net的这项服务同样支持BGP代理隧道，不过个人用不到，天朝内的政策法规也不给你这样做2333333</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;IPv6正在成为因特网的主流，但是，很多时候，无论是IDC还是ISP都不一定支持IPv6网络。但是IPv6的地址数量非常多，HE.net家拥有全球最大的IPv6网络，同时他家为了推广IPv6网络，推出了一项非常任性的服务23333333——利用代理隧道接入他家的v6网。&lt;br&gt;&lt;img src=&quot;/img/he.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>你好 大学</title>
    <link href="https://www.yuyanlab.com/post/Hello-hbut/"/>
    <id>https://www.yuyanlab.com/post/Hello-hbut/</id>
    <published>2016-07-29T05:25:00.000Z</published>
    <updated>2017-11-12T15:53:01.658Z</updated>
    
    <content type="html"><![CDATA[<p><link rel="stylesheet" type="text/css" href="/css/ymplayer.css"></p><script type="text/javascript" src="/js/ymplayer.js"></script><ymplayer name="歌に形はないけれど">    <song src="https://htoio.b0.upaiyun.com/music/ene.mp3" song="歌に形はないけれど" artist="ENE" cover="https://htoio.b0.upaiyun.com/img/ene.png"></song></ymplayer><script type="text/javascript">    window.Ymplayer.Init();</script><p>终于被录了～好开心，第一志愿学校，第一志愿专业。耶耶耶！<br>不过好悬，今年湖工录取线暴涨……按前三年的计算可以说稳进，可是今年，差点被退档，比最低分只高两分。</p><p>进了想去的学校，进了想进的专业。会给我的计算机之路鼓足强大的信心～C，JAVA ，JS我会去攻略的（当然不会忘了Linux这个陪伴了我高中半数时光的好伙伴～）</p><p>光阴似箭，这一切像梦一样，但又十分真实，现在是时候泻药一下了<br><a id="more"></a><br>  2013年的8月26日，参加完加拿大夏令营的我，经历了短暂几小时的休整，踏进了官渡区第一中学的校门，此时，学校已经军训了3天了<br>  这时候的我，是个疯狂的果粉。同时，我毛遂自荐的当上了化学科代表，并痴迷上化学了，竞赛书，大学化学教材什么的也看过一些。自然这时候的化学，肯定也不差。</p><p>  这时，我入宅了~~~入宅作是–少女爱上姐姐    ，还有我入手了一片树莓派，触碰到了iot的大门，用python写了人生中第一个程序（虽然现在早把python忘了）</p><p>  转眼间，我升到了高二<br>  高二，除了动漫外，我爱上了摇滚（由于轻音少女），开始练琴。同时我自学完了化学选修三。</p><p>  高二下学期，是我17年来，最精彩的半年！<br>  由于一个叫《<a href="http://www.bilibili.com/video/av1940049/" target="_blank" rel="external">日本印象-秋</a>》的视频，我误入了一个叫<a href="http://www.pc426.com" target="_blank" rel="external">PC426</a>的网站，这彻底的改变了的我的人生。<br>  方向上，由化学转向到了计算机。  在看了426的奋斗日记后，深有感触，所以学习上开始拼搏，由二十多名跳进前五。<br>  同时，在2015年4月2日，尝试建起了我的第一个网站（也就是这个网站）开始了linux运维之路，（感谢入坑师傅 <a href="https://holywhite.com/" target="_blank" rel="external">@白翼</a>，还有他写的的《奔跑吧！服务器》的文章）<br>  我也加入了一支乐队–半导体乐队，在里面任主音吉他。</p><p>  高三，我的生活里，就只剩下试卷和linux。我使用的计算机，系统也换成了Debian。我从使用一键包构建apache构建web环境，进步到了可以手动按需求自行编译，也将博客的后端换成了HEXO，在高三下学期，步入了nginx和集群时代，全面走向centos7。<br>  学习上呢，也就呵呵了，靠的是高考前50天的奋斗~</p><p>  高考呢，勉勉强强，我只能说我尽了我最大的努力，虽然外人会觉得我英语失常，但就那张试卷而言我只能得到这点分，换一张或许会高很多，反正我也无所谓。<br>  高考，在我眼里就是一场赌博，一个过程，人生无常，谁又能说清楚未来的事情呢~</p><p>  假期呢，我应战CCNA，不过在出录取结果的这一天，我参加了考试，然而没过，终究是15天自学的，有两块短板太明显orz<br>  不过，我已经准备好10月再次迎战CCNA了！Cisco！咱们武汉再见！</p><p>未来的路，我没想好，做网络架构，还是搞linux运维，还是搞前端开发呢？ 以后再决定了，也许fullstack可以成为一个我的目标~，引用《纪实72小时》里的一句话“规划好的人生，太没意思了。”</p><h1 id="总而言之，大学，我来了"><a href="#总而言之，大学，我来了" class="headerlink" title="总而言之，大学，我来了~"></a>总而言之，大学，我来了~</h1>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;/css/ymplayer.css&quot;&gt;&lt;/p&gt;
&lt;script type=&quot;text/javascript&quot; src=&quot;/js/ymplayer.js&quot;&gt;&lt;/script&gt;
&lt;ymplayer name=&quot;歌に形はないけれど&quot;&gt;
    &lt;song src=&quot;https://htoio.b0.upaiyun.com/music/ene.mp3&quot; song=&quot;歌に形はないけれど&quot; artist=&quot;ENE&quot; cover=&quot;https://htoio.b0.upaiyun.com/img/ene.png&quot;&gt;&lt;/song&gt;
&lt;/ymplayer&gt;
&lt;script type=&quot;text/javascript&quot;&gt;
    window.Ymplayer.Init();
&lt;/script&gt;

&lt;p&gt;终于被录了～好开心，第一志愿学校，第一志愿专业。耶耶耶！&lt;br&gt;不过好悬，今年湖工录取线暴涨……按前三年的计算可以说稳进，可是今年，差点被退档，比最低分只高两分。&lt;/p&gt;
&lt;p&gt;进了想去的学校，进了想进的专业。会给我的计算机之路鼓足强大的信心～C，JAVA ，JS我会去攻略的（当然不会忘了Linux这个陪伴了我高中半数时光的好伙伴～）&lt;/p&gt;
&lt;p&gt;光阴似箭，这一切像梦一样，但又十分真实，现在是时候泻药一下了&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Caddy Server简易使用手册</title>
    <link href="https://www.yuyanlab.com/post/CaddyServer/"/>
    <id>https://www.yuyanlab.com/post/CaddyServer/</id>
    <published>2016-07-16T07:54:00.000Z</published>
    <updated>2017-11-12T15:53:01.658Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/img/caddy.jpg" alt=""><br>Caddy Server是一个用golang写的优秀web server，国内用户相对偏少，但我非常喜欢这个东西，所以来做个简易的手册。<br>它有许多nginx和apache没有的功能，不仅具有特色而且非常实用，比如简洁的conf，http/2，markdown渲染等等<br>要说它的缺点，就是效率不如前两者。</p><p>本文会以下几块方面来介绍此服务器</p><ul><li>caddy安装及配置文件基本写法</li><li>基本组成模块</li><li>传统php+mysql建站</li><li>caddy特色markdown建站</li><li>反向代理引入更多后端系统</li></ul><a id="more"></a><h1 id="1-Caddy的安装及配置文件基本写法"><a href="#1-Caddy的安装及配置文件基本写法" class="headerlink" title="1:Caddy的安装及配置文件基本写法"></a>1:Caddy的安装及配置文件基本写法</h1><p>caddy的安装，就是从caddy的官网下载：<a href="https://caddyserver.com/download" target="_blank" rel="external">https://caddyserver.com/download</a> 想要什么模块就尽情点上吧2333<br>如果没有官网列表上设备或是有特殊需求的同学，可以参考无闻菊苣的文章自行构建可执行文件：<a href="https://wuwen.org/2015/11/13/caddy-in-action.html" target="_blank" rel="external">https://wuwen.org/2015/11/13/caddy-in-action.html</a></p><p>PS:解压时请把压缩包放在一个新文件夹后再解压，别问我为什么QwQ</p><p>然后执行 <code>./caddy</code> 这时候访问<code>localhost:2015</code>就可以测试是否运行起来了，至于持久化运行，有多种方法实现，</p><p>candyserver下载下来的安装包里已经包含各系统启动文件</p><p>博主使用的是使用screen来守护，当然还有更专业的软件实现，比如supservisor和systemd，systemd在无闻菊苣的文章里已经有了，这里提供一份摘自互联网的supservisor的配置文件<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[program:caddy]</span><br><span class="line">command=/usr/bin/caddy -conf="/var/www/Caddyfile"  </span><br><span class="line">directory=/var/www        ; directory to cwd to before exec (def no cwd)  </span><br><span class="line">autostart=true                ; start at supervisord start (default: true)  </span><br><span class="line">autorestart=unexpected        ; whether/when to restart (default: unexpected)  </span><br><span class="line">startsecs=1                   ; number of secs prog must stay running (def. 1)  </span><br><span class="line">startretries=3                ; max # of serial start failures (default 3)  </span><br><span class="line">exitcodes=0,2                 ; 'expected' exit codes for process (default 0,2)  </span><br><span class="line">stopsignal=QUIT               ; signal used to kill process (default TERM)  </span><br><span class="line">stopwaitsecs=10               ; max num secs to wait b4 SIGKILL (default 10)  </span><br><span class="line">stopasgroup=false             ; send stop signal to the UNIX process group (default false)  </span><br><span class="line">user=www             ; setuid to this UNIX account to run the program  </span><br><span class="line">redirect_stderr=true          ; redirect proc stderr to stdout (default false)  </span><br><span class="line">stdout_logfile=/var/log/caddy.log        ; stdout log path, NONE for none; default AUTO  </span><br><span class="line">stderr_logfile=/var/log/caddyerr.log        ; stderr log path, NONE for none; default AUTO</span><br></pre></td></tr></table></figure></p><p>caddy的conf写法有好多种，首先你要在caddy的可执行文件的同目录创建一个名叫<code>Caddyfile</code>的文件，或者在启动时加入路径<code>./caddy -conf=&quot;/path/to/Caddyfile&quot;</code><br>接下来是几种caddy的conf的写法，简直辣眼睛</p><p>本地访问80：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:80</span><br></pre></td></tr></table></figure></p><p>单网站：（它会帮您签好let’s encrypt证书并且强制定向到https）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">example.com</span><br><span class="line">root /var/www/html</span><br><span class="line">//更多模块</span><br></pre></td></tr></table></figure></p><p>多网站：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">example.com &#123;</span><br><span class="line">  gzip</span><br><span class="line">  root /var/www/htm/</span><br><span class="line">  //更多模块</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="2-常用基本组成模块"><a href="#2-常用基本组成模块" class="headerlink" title="2:常用基本组成模块"></a>2:常用基本组成模块</h1><p>均写入到conf站点配置中</p><p>1.log日志<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">log /var/www/log/example.log</span><br></pre></td></tr></table></figure></p><p>2.目录访问<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">browse</span><br></pre></td></tr></table></figure></p><p>3.gzip压缩<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gzip</span><br></pre></td></tr></table></figure></p><p>4.自主ssl证书<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tls /path/ssl/example.com.crt /path/ssl/example.com.key</span><br></pre></td></tr></table></figure></p><p>5.git拉取功能(3600秒为间隔时间)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git https://github.com/user/project.git /var/www/html/git/ &#123;</span><br><span class="line">  interval 3600</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>6.访问口令认证（用户emiria，密码abc123）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">basicauth / emiria abc123</span><br></pre></td></tr></table></figure></p><p>7.cors跨域(下载时记得勾上)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">cors / &#123;  </span><br><span class="line">    origin            https://alleysakura.com</span><br><span class="line">    origin            http://alleysakura.pw https://alleysakura.pw</span><br><span class="line">    methods           POST,PUT</span><br><span class="line">    allow_credentials false</span><br><span class="line">    max_age           3600</span><br><span class="line">    allowed_headers   X-Custom-Header,X-Foobar</span><br><span class="line">    exposed_headers   X-Something-Special,SomethingElse</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>8.IP屏蔽(下载时记得勾上)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ipfilter / &#123;  </span><br><span class="line">    rule       block</span><br><span class="line">    ip         212.10.15.0-255 202.10.15.0-10 59.43.247.103</span><br><span class="line">    blockpage  /var/www/html/403.html</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>9.跳转功能(目录重写功能也类似)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redir http://example.com&#123;url&#125;</span><br></pre></td></tr></table></figure></p><p>而且不像nginx进行www重定向那么麻烦，把域名原域名（不限协议）写上，大括号里加上这个就可以，简直太赞了</p><p>10.自定义错误页面<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">errors &#123;</span><br><span class="line">    404 404.html</span><br><span class="line">    500 /var/www/html/500.html</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="3-传统php-mysql建站"><a href="#3-传统php-mysql建站" class="headerlink" title="3:传统php+mysql建站"></a>3:传统php+mysql建站</h1><p>包管理器安装mysql+php，然后添加<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fastcgi / 127.0.0.1:9000 php</span><br></pre></td></tr></table></figure></p><h1 id="4-caddy特色markdown建站"><a href="#4-caddy特色markdown建站" class="headerlink" title="4:caddy特色markdown建站"></a>4:caddy特色markdown建站</h1><p>首先载入markdown渲染格式(用index.html来定义，类似swig和ejs模板)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">markdown / &#123;</span><br><span class="line">  template index /path/templates/index.html</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这是一种渲染格式（index.html)<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>&#123;&#123;.Doc.title&#125;&#125;<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">href</span>=<span class="string">"styles/main.css"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">header</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/"</span>&gt;</span><span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">"page-title"</span>&gt;</span>&#123;&#123;.Doc.sitename&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">main</span>&gt;</span></span><br><span class="line">            &#123;&#123;range .Links&#125;&#125;</span><br><span class="line">                &#123;&#123;if ne .URL "/index.md" &#125;&#125;</span><br><span class="line">                    <span class="tag">&lt;<span class="name">article</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">h3</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123;&#123;.URL&#125;&#125;"</span>&gt;</span>&#123;&#123;.Title&#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">                        &#123;&#123;.Summary&#125;&#125;</span><br><span class="line">                    <span class="tag">&lt;/<span class="name">article</span>&gt;</span></span><br><span class="line">                &#123;&#123;end&#125;&#125;</span><br><span class="line">            &#123;&#123;end&#125;&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">main</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>接下来，我们只用按照正常的markdown在网站根目录写了（index.md)<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">template: index</span><br><span class="line">title: caddy</span><br><span class="line">sitename: test caddy</span><br><span class="line">---</span><br><span class="line">text 233333333333333333</span><br></pre></td></tr></table></figure></p><p>当然各种html标签也是可以滴，爱怎们玩怎么玩2333333</p><h1 id="5-反向代理引入更多后端系统"><a href="#5-反向代理引入更多后端系统" class="headerlink" title="5:反向代理引入更多后端系统"></a>5:反向代理引入更多后端系统</h1><p>引入反向代理，只需一行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxy / localhost:4000</span><br></pre></td></tr></table></figure></p><p>负载均衡也是类似配置的23333<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">proxy / 10.10.201.222:80 10.10.201.221:80 &#123;</span><br><span class="line">        policy round_robin</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>当然caddyserver还有许多不常用的，但是非常好玩的组件，大家可以去官网看看文档，博主也将继续探索~（&gt; y &lt;)</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/img/caddy.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;Caddy Server是一个用golang写的优秀web server，国内用户相对偏少，但我非常喜欢这个东西，所以来做个简易的手册。&lt;br&gt;它有许多nginx和apache没有的功能，不仅具有特色而且非常实用，比如简洁的conf，http/2，markdown渲染等等&lt;br&gt;要说它的缺点，就是效率不如前两者。&lt;/p&gt;
&lt;p&gt;本文会以下几块方面来介绍此服务器&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;caddy安装及配置文件基本写法&lt;/li&gt;
&lt;li&gt;基本组成模块&lt;/li&gt;
&lt;li&gt;传统php+mysql建站&lt;/li&gt;
&lt;li&gt;caddy特色markdown建站&lt;/li&gt;
&lt;li&gt;反向代理引入更多后端系统&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Gogs:一个不错的GitWeb服务器</title>
    <link href="https://www.yuyanlab.com/post/Gogs/"/>
    <id>https://www.yuyanlab.com/post/Gogs/</id>
    <published>2016-07-13T15:24:00.000Z</published>
    <updated>2017-11-12T15:53:01.658Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/img/gogs.png" alt=""><br>网址 ：<a href="https://gogs.io" target="_blank" rel="external">htttps://gogs.io</a><br>Gogs作为一个Git服务器，就目前来说已经足够成熟了。它简单易用，极少的bug，所以特别适合小公司及个人使用。<br>相比较Gitlab来说，这个更加轻量，所以我们可以使用树莓派，废旧电脑，或者一台不低于512mb内存的vps上搭一个</p><p>相关安装文档官网已经写得非常清楚了，第三方的教程中，这有一篇比较优质的<a href="https://mynook.info/blog/post/host-your-own-git-server-using-gogs" target="_blank" rel="external">https://mynook.info/blog/post/host-your-own-git-server-using-gogs</a></p><div class="tip"><br>在vps等机器跑gogs，需要我们使用screen或者tmux等工具来守护这个进程。<br></div><p>接下来是博主脑洞大开，想出的对于gogs的一些实验性(<del>作死</del>)玩法。</p><a id="more"></a><p>1.开启目录浏览<br>gogs吧git仓库挂在了一个文件夹上，于是，如果我们用nginx把某网址指向了git仓库目录，并开启目录浏览，更改时间等，直接点击即可下载/浏览，会提高各种效率（许多时候比git工作方式还高）<br>另外，对于内网中小伙伴们之间分享文件也是非常方便的。</p><p>2.在线搜索<br>github上有许多优秀文档搜索工具（可以精确的文章内的文字的），大部分是nodejs写的，如果我们把这个工具绑上一个网址，把目录指向git仓库，这样，就实现类似github那样项目内搜索功能。</p><p>最后的观点，个人用的话，是没有必要安装类似项目的，一个git-server + nginx足够了</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/img/gogs.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;网址 ：&lt;a href=&quot;https://gogs.io&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;htttps://gogs.io&lt;/a&gt;&lt;br&gt;Gogs作为一个Git服务器，就目前来说已经足够成熟了。它简单易用，极少的bug，所以特别适合小公司及个人使用。&lt;br&gt;相比较Gitlab来说，这个更加轻量，所以我们可以使用树莓派，废旧电脑，或者一台不低于512mb内存的vps上搭一个&lt;/p&gt;
&lt;p&gt;相关安装文档官网已经写得非常清楚了，第三方的教程中，这有一篇比较优质的&lt;a href=&quot;https://mynook.info/blog/post/host-your-own-git-server-using-gogs&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://mynook.info/blog/post/host-your-own-git-server-using-gogs&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;tip&quot;&gt;&lt;br&gt;在vps等机器跑gogs，需要我们使用screen或者tmux等工具来守护这个进程。&lt;br&gt;&lt;/div&gt;

&lt;p&gt;接下来是博主脑洞大开，想出的对于gogs的一些实验性(&lt;del&gt;作死&lt;/del&gt;)玩法。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
